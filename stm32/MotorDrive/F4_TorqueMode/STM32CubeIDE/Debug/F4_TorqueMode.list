
F4_TorqueMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c4  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800738c  0800738c  0000838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a4  080077a4  0000952c  2**0
                  CONTENTS
  4 .ARM          00000008  080077a4  080077a4  000087a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077ac  080077ac  0000952c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077ac  080077ac  000087ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077b0  080077b0  000087b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000052c  20000000  080077b4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  2000052c  08007ce0  0000952c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000196c  08007ce0  0000996c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000952c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00039ccd  00000000  00000000  0000955c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000088  00000000  00000000  00043229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0003577c  00000000  00000000  000432b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007972  00000000  00000000  00078a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001af8  00000000  00000000  000803a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f544b  00000000  00000000  00081e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000260e  00000000  00000000  001772e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00016e1c  00000000  00000000  001798f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002bdfa  00000000  00000000  0019070d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001bc507  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000463c  00000000  00000000  001bc54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000052c 	.word	0x2000052c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007374 	.word	0x08007374

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000530 	.word	0x20000530
 8000204:	08007374 	.word	0x08007374

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000530 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004fc:	480d      	ldr	r0, [pc, #52]	@ (8000534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004fe:	490e      	ldr	r1, [pc, #56]	@ (8000538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000500:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000514:	4c0b      	ldr	r4, [pc, #44]	@ (8000544 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000522:	f003 fb9d 	bl	8003c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000526:	f006 fef3 	bl	8007310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800052a:	f000 fbcd 	bl	8000cc8 <main>
  bx  lr    
 800052e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	2000052c 	.word	0x2000052c
  ldr r2, =_sidata
 800053c:	080077b4 	.word	0x080077b4
  ldr r2, =_sbss
 8000540:	2000052c 	.word	0x2000052c
  ldr r4, =_ebss
 8000544:	2000196c 	.word	0x2000196c

08000548 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <BusFault_Handler>
	...

0800054c <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000550:	6940      	ldr	r0, [r0, #20]
 8000552:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000554:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000556:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000558:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800055a:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800055e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000562:	6960      	ldr	r0, [r4, #20]
 8000564:	f104 011c 	add.w	r1, r4, #28
 8000568:	462b      	mov	r3, r5
 800056a:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800056c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000570:	4718      	bx	r3
 8000572:	bf00      	nop

08000574 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000574:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000576:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000578:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800057a:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800057e:	4c1e      	ldr	r4, [pc, #120]	@ (80005f8 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000580:	01db      	lsls	r3, r3, #7
 8000582:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000586:	784a      	ldrb	r2, [r1, #1]
 8000588:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800058c:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800058e:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000592:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000596:	b2da      	uxtb	r2, r3
 8000598:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 800059c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005a0:	5ca2      	ldrb	r2, [r4, r2]
 80005a2:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005a6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005a8:	5ca2      	ldrb	r2, [r4, r2]
 80005aa:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005ae:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005b0:	5ca2      	ldrb	r2, [r4, r2]
 80005b2:	4c12      	ldr	r4, [pc, #72]	@ (80005fc <ASPEP_sendBeacon+0x88>)
 80005b4:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005b8:	5ca2      	ldrb	r2, [r4, r2]
 80005ba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005be:	f043 0305 	orr.w	r3, r3, #5
 80005c2:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005c6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80005c8:	b14b      	cbz	r3, 80005de <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005ca:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005cc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80005d0:	b913      	cbnz	r3, 80005d8 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005d2:	2302      	movs	r3, #2
 80005d4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80005d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005dc:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005de:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005e2:	2303      	movs	r3, #3
 80005e4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80005e8:	6481      	str	r1, [r0, #72]	@ 0x48
 80005ea:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005ec:	2204      	movs	r2, #4
 80005ee:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 80005f0:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005f4:	6940      	ldr	r0, [r0, #20]
 80005f6:	4718      	bx	r3
 80005f8:	0800739c 	.word	0x0800739c
 80005fc:	0800738c 	.word	0x0800738c

08000600 <ASPEP_sendPing>:
{
 8000600:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000602:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000604:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000608:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800060c:	4d1d      	ldr	r5, [pc, #116]	@ (8000684 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 800060e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000612:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000616:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800061a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800061e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000622:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000626:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4c16      	ldr	r4, [pc, #88]	@ (8000688 <ASPEP_sendPing+0x88>)
 800062e:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000632:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000636:	5ca2      	ldrb	r2, [r4, r2]
 8000638:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 800063c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800063e:	5ca2      	ldrb	r2, [r4, r2]
 8000640:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000644:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000646:	5ca2      	ldrb	r2, [r4, r2]
 8000648:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800064c:	5ceb      	ldrb	r3, [r5, r3]
 800064e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000652:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000656:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000658:	b143      	cbz	r3, 800066c <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 800065a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800065c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000660:	b913      	cbnz	r3, 8000668 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000662:	2302      	movs	r3, #2
 8000664:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000668:	bc30      	pop	{r4, r5}
 800066a:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800066c:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000670:	2303      	movs	r3, #3
 8000672:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000676:	6481      	str	r1, [r0, #72]	@ 0x48
 8000678:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800067a:	2204      	movs	r2, #4
 800067c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800067e:	6940      	ldr	r0, [r0, #20]
}
 8000680:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000682:	4718      	bx	r3
 8000684:	0800738c 	.word	0x0800738c
 8000688:	0800739c 	.word	0x0800739c

0800068c <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 800068c:	2a0a      	cmp	r2, #10
 800068e:	d009      	beq.n	80006a4 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000690:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8000694:	2b01      	cmp	r3, #1
 8000696:	d91d      	bls.n	80006d4 <ASPEP_getBuffer+0x48>
 8000698:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800069c:	2b01      	cmp	r3, #1
 800069e:	d90d      	bls.n	80006bc <ASPEP_getBuffer+0x30>
        result = false;
 80006a0:	2000      	movs	r0, #0
}
 80006a2:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006a4:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d8f9      	bhi.n	80006a0 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 80006ae:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006b0:	3304      	adds	r3, #4
 80006b2:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006b4:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 80006b8:	2001      	movs	r0, #1
 80006ba:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006bc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006be:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006c2:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006c6:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 80006c8:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006cc:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006ce:	600b      	str	r3, [r1, #0]
  bool result = true;
 80006d0:	2001      	movs	r0, #1
 80006d2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006d6:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006da:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006de:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 80006e0:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006e4:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006e6:	600b      	str	r3, [r1, #0]
 80006e8:	e7f2      	b.n	80006d0 <ASPEP_getBuffer+0x44>
 80006ea:	bf00      	nop

080006ec <ASPEP_sendPacket>:
{
 80006ec:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80006ee:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 80006f2:	2802      	cmp	r0, #2
 80006f4:	d001      	beq.n	80006fa <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 80006f6:	2002      	movs	r0, #2
 80006f8:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80006fa:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 80006fe:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000702:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000706:	2801      	cmp	r0, #1
 8000708:	d104      	bne.n	8000714 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 800070a:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 800070e:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000710:	3202      	adds	r2, #2
 8000712:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000714:	2b0a      	cmp	r3, #10
 8000716:	d105      	bne.n	8000724 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000718:	f89c 0010 	ldrb.w	r0, [ip, #16]
 800071c:	b348      	cbz	r0, 8000772 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 800071e:	2000      	movs	r0, #0
 8000720:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000724:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000728:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800072a:	4d34      	ldr	r5, [pc, #208]	@ (80007fc <ASPEP_sendPacket+0x110>)
 800072c:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800072e:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000730:	5d2e      	ldrb	r6, [r5, r4]
 8000732:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000736:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000738:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800073c:	5d2e      	ldrb	r6, [r5, r4]
 800073e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000742:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000744:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000746:	5d2c      	ldrb	r4, [r5, r4]
 8000748:	f3c0 6503 	ubfx	r5, r0, #24, #4
 800074c:	406c      	eors	r4, r5
 800074e:	4d2c      	ldr	r5, [pc, #176]	@ (8000800 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000750:	5d2c      	ldrb	r4, [r5, r4]
 8000752:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000756:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800075a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800075c:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000760:	b1b9      	cbz	r1, 8000792 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000762:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000764:	2b09      	cmp	r3, #9
 8000766:	d006      	beq.n	8000776 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000768:	2b0a      	cmp	r3, #10
 800076a:	d02a      	beq.n	80007c2 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 800076c:	b37b      	cbz	r3, 80007ce <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 800076e:	2000      	movs	r0, #0
}
 8000770:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000772:	2001      	movs	r0, #1
}
 8000774:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000776:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 800077a:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 800077c:	458e      	cmp	lr, r1
 800077e:	bf14      	ite	ne
 8000780:	2003      	movne	r0, #3
 8000782:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000784:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000788:	b3a1      	cbz	r1, 80007f4 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 800078a:	2102      	movs	r1, #2
 800078c:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 800078e:	809a      	strh	r2, [r3, #4]
}
 8000790:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8000792:	2b09      	cmp	r3, #9
 8000794:	d029      	beq.n	80007ea <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 8000796:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000798:	f04f 0303 	mov.w	r3, #3
 800079c:	bf0b      	itete	eq
 800079e:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007a2:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80007a6:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007aa:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007ae:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 80007b2:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007b4:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 80007b8:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80007bc:	4671      	mov	r1, lr
 80007be:	4798      	blx	r3
 80007c0:	e7d5      	b.n	800076e <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 80007c2:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d009      	beq.n	80007de <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 80007ca:	2003      	movs	r0, #3
}
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 80007ce:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f9      	bne.n	80007ca <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 80007d6:	2302      	movs	r3, #2
 80007d8:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 80007dc:	e7c7      	b.n	800076e <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 80007de:	2302      	movs	r3, #2
 80007e0:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80007e4:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 80007e8:	e7c1      	b.n	800076e <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 80007ea:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80007ee:	2103      	movs	r1, #3
 80007f0:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007f2:	e7dc      	b.n	80007ae <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80007f4:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 80007f8:	e7c7      	b.n	800078a <ASPEP_sendPacket+0x9e>
 80007fa:	bf00      	nop
 80007fc:	0800739c 	.word	0x0800739c
 8000800:	0800738c 	.word	0x0800738c

08000804 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000804:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000806:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800080a:	2b03      	cmp	r3, #3
{
 800080c:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800080e:	d013      	beq.n	8000838 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000810:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000812:	2100      	movs	r1, #0
 8000814:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000816:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 800081a:	2a02      	cmp	r2, #2
 800081c:	d013      	beq.n	8000846 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800081e:	2b02      	cmp	r3, #2
 8000820:	d11d      	bne.n	800085e <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000822:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000826:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000828:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800082a:	2204      	movs	r2, #4
 800082c:	6940      	ldr	r0, [r0, #20]
 800082e:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000830:	2303      	movs	r3, #3
 8000832:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000836:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000838:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 800083c:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800083e:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000840:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000844:	d10b      	bne.n	800085e <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000846:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800084a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800084c:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800084e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000850:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000852:	6960      	ldr	r0, [r4, #20]
 8000854:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000856:	2303      	movs	r3, #3
 8000858:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 800085c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800085e:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000860:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000862:	b1cb      	cbz	r3, 8000898 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000864:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000866:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000868:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	889a      	ldrh	r2, [r3, #4]
 800086e:	6960      	ldr	r0, [r4, #20]
 8000870:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000872:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000874:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000878:	2b02      	cmp	r3, #2
 800087a:	d007      	beq.n	800088c <ASPEP_HWDataTransmittedIT+0x88>
 800087c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000880:	2b02      	cmp	r3, #2
 8000882:	d003      	beq.n	800088c <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000884:	2300      	movs	r3, #0
 8000886:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000888:	b662      	cpsie	i
}
 800088a:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 800088c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800088e:	0063      	lsls	r3, r4, #1
 8000890:	3368      	adds	r3, #104	@ 0x68
 8000892:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000894:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8000896:	e7f7      	b.n	8000888 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000898:	64a3      	str	r3, [r4, #72]	@ 0x48
 800089a:	e7f5      	b.n	8000888 <ASPEP_HWDataTransmittedIT+0x84>

0800089c <ASPEP_RXframeProcess>:
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 800089c:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008a0:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 80008a2:	f04f 0c00 	mov.w	ip, #0
{
 80008a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008aa:	4604      	mov	r4, r0
    *packetLength = 0;
 80008ac:	f8a1 c000 	strh.w	ip, [r1]
    if (pHandle->NewPacketAvailable)
 80008b0:	b1cb      	cbz	r3, 80008e6 <ASPEP_RXframeProcess+0x4a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008b2:	f890 3064 	ldrb.w	r3, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008b6:	f880 c061 	strb.w	ip, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d055      	beq.n	800096a <ASPEP_RXframeProcess+0xce>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d018      	beq.n	80008f4 <ASPEP_RXframeProcess+0x58>
 80008c2:	b933      	cbnz	r3, 80008d2 <ASPEP_RXframeProcess+0x36>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 80008c4:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80008c6:	2905      	cmp	r1, #5
 80008c8:	f000 80e3 	beq.w	8000a92 <ASPEP_RXframeProcess+0x1f6>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 80008cc:	2906      	cmp	r1, #6
 80008ce:	f000 8129 	beq.w	8000b24 <ASPEP_RXframeProcess+0x288>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80008d2:	2500      	movs	r5, #0

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008d4:	6960      	ldr	r0, [r4, #20]
 80008d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80008d8:	2204      	movs	r2, #4
 80008da:	f104 011c 	add.w	r1, r4, #28
 80008de:	4798      	blx	r3
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80008e0:	4628      	mov	r0, r5
 80008e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80008e6:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 80008ea:	b9bb      	cbnz	r3, 800091c <ASPEP_RXframeProcess+0x80>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80008ec:	2500      	movs	r5, #0
}
 80008ee:	4628      	mov	r0, r5
 80008f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 80008f4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80008f6:	2b05      	cmp	r3, #5
 80008f8:	d045      	beq.n	8000986 <ASPEP_RXframeProcess+0xea>
          else if (PING == pHandle->rxPacketType)
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	f000 8118 	beq.w	8000b30 <ASPEP_RXframeProcess+0x294>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000900:	2b09      	cmp	r3, #9
 8000902:	d1e6      	bne.n	80008d2 <ASPEP_RXframeProcess+0x36>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000904:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLength;
 8000908:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 800090c:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800090e:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000910:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000912:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000916:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000918:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800091a:	e7db      	b.n	80008d4 <ASPEP_RXframeProcess+0x38>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800091c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000920:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000922:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000926:	488b      	ldr	r0, [pc, #556]	@ (8000b54 <ASPEP_RXframeProcess+0x2b8>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000928:	4d8b      	ldr	r5, [pc, #556]	@ (8000b58 <ASPEP_RXframeProcess+0x2bc>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800092a:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800092e:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000932:	5c82      	ldrb	r2, [r0, r2]
 8000934:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000938:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800093a:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 800093c:	5ceb      	ldrb	r3, [r5, r3]
 800093e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000942:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000946:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 80f6 	beq.w	8000b3a <ASPEP_RXframeProcess+0x29e>
  __ASM volatile ("cpsie i" : : : "memory");
 800094e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000950:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000954:	b913      	cbnz	r3, 800095c <ASPEP_RXframeProcess+0xc0>
          pHandle->ctrlBuffer.state = pending;
 8000956:	2302      	movs	r3, #2
 8000958:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800095c:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800095e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000960:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000962:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000966:	4798      	blx	r3
 8000968:	e7c0      	b.n	80008ec <ASPEP_RXframeProcess+0x50>
          if (BEACON == pHandle->rxPacketType)
 800096a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800096c:	2905      	cmp	r1, #5
 800096e:	d04f      	beq.n	8000a10 <ASPEP_RXframeProcess+0x174>
          else if (PING == pHandle->rxPacketType)
 8000970:	2906      	cmp	r1, #6
 8000972:	d1ae      	bne.n	80008d2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000974:	4619      	mov	r1, r3
 8000976:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800097a:	f7ff fe41 	bl	8000600 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800097e:	2302      	movs	r3, #2
 8000980:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000984:	e7a5      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000986:	f894 e01d 	ldrb.w	lr, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800098a:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800098e:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000990:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000994:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000998:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800099c:	f00e 0e3f 	and.w	lr, lr, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009a0:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009a2:	4575      	cmp	r5, lr
 80009a4:	bf28      	it	cs
 80009a6:	4675      	movcs	r5, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009a8:	42b0      	cmp	r0, r6
 80009aa:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009ac:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009b0:	bf28      	it	cs
 80009b2:	4631      	movcs	r1, r6
 80009b4:	4663      	mov	r3, ip
 80009b6:	f361 0307 	bfi	r3, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80009ba:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009be:	45b8      	cmp	r8, r7
 80009c0:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009c2:	f365 230f 	bfi	r3, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009c6:	bf28      	it	cs
 80009c8:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009ca:	45ca      	cmp	sl, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009cc:	f361 4317 	bfi	r3, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009d0:	4651      	mov	r1, sl
 80009d2:	bf28      	it	cs
 80009d4:	4649      	movcs	r1, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009d6:	f361 631f 	bfi	r3, r1, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009da:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009dc:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009de:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80009e2:	d80f      	bhi.n	8000a04 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80009e4:	45ae      	cmp	lr, r5
 80009e6:	d80d      	bhi.n	8000a04 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80009e8:	45b8      	cmp	r8, r7
 80009ea:	d80b      	bhi.n	8000a04 <ASPEP_RXframeProcess+0x168>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80009ec:	45ca      	cmp	sl, r9
 80009ee:	d809      	bhi.n	8000a04 <ASPEP_RXframeProcess+0x168>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80009f0:	f894 c070 	ldrb.w	ip, [r4, #112]	@ 0x70
 80009f4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80009f8:	ebac 0c02 	sub.w	ip, ip, r2
 80009fc:	fabc fc8c 	clz	ip, ip
 8000a00:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000a04:	f884 c064 	strb.w	ip, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f7ff fdb3 	bl	8000574 <ASPEP_sendBeacon>
 8000a0e:	e760      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a10:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a12:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a16:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a18:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a1c:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a20:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a24:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a28:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a2a:	42a8      	cmp	r0, r5
 8000a2c:	bf28      	it	cs
 8000a2e:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a30:	42b1      	cmp	r1, r6
 8000a32:	4663      	mov	r3, ip
 8000a34:	468c      	mov	ip, r1
 8000a36:	bf28      	it	cs
 8000a38:	46b4      	movcs	ip, r6
 8000a3a:	f36c 0307 	bfi	r3, ip, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a3e:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000a42:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a46:	45bc      	cmp	ip, r7
 8000a48:	46e1      	mov	r9, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a4a:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a4e:	bf28      	it	cs
 8000a50:	46b9      	movcs	r9, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a52:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a54:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a58:	46c1      	mov	r9, r8
 8000a5a:	bf28      	it	cs
 8000a5c:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a5e:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a62:	42b1      	cmp	r1, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a64:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a66:	d80b      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000a68:	4285      	cmp	r5, r0
 8000a6a:	d809      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000a6c:	45bc      	cmp	ip, r7
 8000a6e:	d807      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1e4>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000a70:	45f0      	cmp	r8, lr
 8000a72:	d805      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1e4>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a74:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000a78:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d002      	beq.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a86:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f7ff fd72 	bl	8000574 <ASPEP_sendBeacon>
 8000a90:	e71f      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a92:	f890 c01d 	ldrb.w	ip, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a96:	f890 106d 	ldrb.w	r1, [r0, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a9a:	7f05      	ldrb	r5, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a9c:	f890 606c 	ldrb.w	r6, [r0, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000aa0:	f890 706e 	ldrb.w	r7, [r0, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aa4:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000aa8:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000aac:	09ed      	lsrs	r5, r5, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aae:	4561      	cmp	r1, ip
 8000ab0:	bf28      	it	cs
 8000ab2:	4661      	movcs	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ab4:	42b5      	cmp	r5, r6
 8000ab6:	4628      	mov	r0, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000ab8:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000abc:	bf28      	it	cs
 8000abe:	4630      	movcs	r0, r6
 8000ac0:	f360 0307 	bfi	r3, r0, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000ac4:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ac8:	45b8      	cmp	r8, r7
 8000aca:	4640      	mov	r0, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000acc:	f361 230f 	bfi	r3, r1, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ad0:	bf28      	it	cs
 8000ad2:	4638      	movcs	r0, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ad4:	45ca      	cmp	sl, r9
 8000ad6:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ad8:	f360 4317 	bfi	r3, r0, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000adc:	bf28      	it	cs
 8000ade:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ae0:	f36e 631f 	bfi	r3, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ae4:	42b5      	cmp	r5, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ae6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ae8:	d8cd      	bhi.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000aea:	458c      	cmp	ip, r1
 8000aec:	d8cb      	bhi.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d8c9      	bhi.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000af2:	45ca      	cmp	sl, r9
 8000af4:	d8c7      	bhi.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000af6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000afa:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d1c1      	bne.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b02:	1c4b      	adds	r3, r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b04:	1c42      	adds	r2, r0, #1
 8000b06:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b08:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0a:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b0c:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b10:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b12:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b14:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b16:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b1a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b1e:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
 8000b22:	e7b0      	b.n	8000a86 <ASPEP_RXframeProcess+0x1ea>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b24:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f7ff fd69 	bl	8000600 <ASPEP_sendPing>
 8000b2e:	e6d0      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b30:	7f42      	ldrb	r2, [r0, #29]
 8000b32:	2101      	movs	r1, #1
 8000b34:	f7ff fd64 	bl	8000600 <ASPEP_sendPing>
 8000b38:	e6cb      	b.n	80008d2 <ASPEP_RXframeProcess+0x36>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000b3a:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b44:	64a1      	str	r1, [r4, #72]	@ 0x48
 8000b46:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000b48:	2204      	movs	r2, #4
 8000b4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b4c:	6960      	ldr	r0, [r4, #20]
 8000b4e:	4798      	blx	r3
 8000b50:	e704      	b.n	800095c <ASPEP_RXframeProcess+0xc0>
 8000b52:	bf00      	nop
 8000b54:	0800739c 	.word	0x0800739c
 8000b58:	0800738c 	.word	0x0800738c

08000b5c <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b5c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000b5e:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8000b62:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b64:	b13b      	cbz	r3, 8000b76 <ASPEP_HWDataReceivedIT+0x1a>
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d104      	bne.n	8000b74 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b70:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000b74:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b76:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b78:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <ASPEP_HWDataReceivedIT+0x98>)
 8000b7a:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b82:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b84:	5cd3      	ldrb	r3, [r2, r3]
 8000b86:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000b8a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b92:	5cd3      	ldrb	r3, [r2, r3]
 8000b94:	b95b      	cbnz	r3, 8000bae <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000b96:	7f03      	ldrb	r3, [r0, #28]
 8000b98:	f003 030f 	and.w	r3, r3, #15
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8000ba0:	d809      	bhi.n	8000bb6 <ASPEP_HWDataReceivedIT+0x5a>
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d81e      	bhi.n	8000be4 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8000bac:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000bb4:	bd10      	pop	{r4, pc}
 8000bb6:	2b09      	cmp	r3, #9
 8000bb8:	d1f5      	bne.n	8000ba6 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bba:	8b83      	ldrh	r3, [r0, #28]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000bc2:	b17b      	cbz	r3, 8000be4 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000bc4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d30f      	bcc.n	8000bec <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000bcc:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8000bd0:	6981      	ldr	r1, [r0, #24]
 8000bd2:	6940      	ldr	r0, [r0, #20]
 8000bd4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000bd8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000bda:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8000be2:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8000bea:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bec:	2302      	movs	r3, #2
 8000bee:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000bf2:	bd10      	pop	{r4, pc}
 8000bf4:	0800739c 	.word	0x0800739c

08000bf8 <ASPEP_HWDMAReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000bf8:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c00:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000c02:	6940      	ldr	r0, [r0, #20]
 8000c04:	2204      	movs	r2, #4
 8000c06:	311c      	adds	r1, #28
 8000c08:	4718      	bx	r3
 8000c0a:	bf00      	nop
 8000c0c:	0000      	movs	r0, r0
	...

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	2300      	movs	r3, #0
{
 8000c14:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8000c1a:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000c22:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4926      	ldr	r1, [pc, #152]	@ (8000cc0 <SystemClock_Config+0xb0>)
 8000c28:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2a:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2e:	4a25      	ldr	r2, [pc, #148]	@ (8000cc4 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000c34:	6408      	str	r0, [r1, #64]	@ 0x40
 8000c36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000c38:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8000c3c:	9101      	str	r1, [sp, #4]
 8000c3e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	6813      	ldr	r3, [r2, #0]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c52:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8000cb8 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5c:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c60:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c62:	9414      	str	r4, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c64:	2002      	movs	r0, #2
 8000c66:	2102      	movs	r1, #2
 8000c68:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c6c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c6e:	23b4      	movs	r3, #180	@ 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c70:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c72:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c76:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c78:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	f003 fdfd 	bl	8004878 <HAL_RCC_OscConfig>
 8000c7e:	b108      	cbz	r0, 8000c84 <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c84:	f003 fca2 	bl	80045cc <HAL_PWREx_EnableOverDrive>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	b108      	cbz	r0, 8000c90 <SystemClock_Config+0x80>
 8000c8c:	b672      	cpsid	i
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c92:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c96:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c9e:	a803      	add	r0, sp, #12
 8000ca0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ca2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca6:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ca8:	f003 fccc 	bl	8004644 <HAL_RCC_ClockConfig>
 8000cac:	b108      	cbz	r0, 8000cb2 <SystemClock_Config+0xa2>
 8000cae:	b672      	cpsid	i
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <SystemClock_Config+0xa0>
}
 8000cb2:	b017      	add	sp, #92	@ 0x5c
 8000cb4:	bd30      	pop	{r4, r5, pc}
 8000cb6:	bf00      	nop
 8000cb8:	00000001 	.word	0x00000001
 8000cbc:	00010000 	.word	0x00010000
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40007000 	.word	0x40007000

08000cc8 <main>:
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09c      	sub	sp, #112	@ 0x70
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ccc:	2400      	movs	r4, #0
  HAL_Init();
 8000cce:	f002 fff5 	bl	8003cbc <HAL_Init>
  SystemClock_Config();
 8000cd2:	f7ff ff9d 	bl	8000c10 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	4ba0      	ldr	r3, [pc, #640]	@ (8000f58 <main+0x290>)
 8000cd8:	9401      	str	r4, [sp, #4]
 8000cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  hadc1.Instance = ADC1;
 8000cdc:	4d9f      	ldr	r5, [pc, #636]	@ (8000f5c <main+0x294>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ce2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ce6:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000cea:	9201      	str	r2, [sp, #4]
 8000cec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	9402      	str	r4, [sp, #8]
 8000cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cf2:	f042 0204 	orr.w	r2, r2, #4
 8000cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cfa:	f002 0204 	and.w	r2, r2, #4
 8000cfe:	9202      	str	r2, [sp, #8]
 8000d00:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	9403      	str	r4, [sp, #12]
 8000d04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d06:	f042 0201 	orr.w	r2, r2, #1
 8000d0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d0e:	f002 0201 	and.w	r2, r2, #1
 8000d12:	9203      	str	r2, [sp, #12]
 8000d14:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	9404      	str	r4, [sp, #16]
 8000d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d1a:	f042 0202 	orr.w	r2, r2, #2
 8000d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d22:	f002 0202 	and.w	r2, r2, #2
 8000d26:	9204      	str	r2, [sp, #16]
 8000d28:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	9400      	str	r4, [sp, #0]
 8000d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d2e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000d32:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d36:	2620      	movs	r6, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3c:	9300      	str	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d3e:	4621      	mov	r1, r4
 8000d40:	4632      	mov	r2, r6
 8000d42:	a813      	add	r0, sp, #76	@ 0x4c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d44:	9b00      	ldr	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d46:	f006 fadb 	bl	8007300 <memset>
  hadc1.Instance = ADC1;
 8000d4a:	4b85      	ldr	r3, [pc, #532]	@ (8000f60 <main+0x298>)
 8000d4c:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4e:	4b85      	ldr	r3, [pc, #532]	@ (8000f64 <main+0x29c>)
 8000d50:	62ab      	str	r3, [r5, #40]	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 8000d5a:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5e:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d60:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d62:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d66:	62ec      	str	r4, [r5, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d68:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d6c:	606b      	str	r3, [r5, #4]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d6e:	2401      	movs	r4, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d74:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = ENABLE;
 8000d76:	612c      	str	r4, [r5, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000d78:	61ec      	str	r4, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7a:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d7c:	60eb      	str	r3, [r5, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7e:	f002 ffc9 	bl	8003d14 <HAL_ADC_Init>
 8000d82:	b108      	cbz	r0, 8000d88 <main+0xc0>
 8000d84:	b672      	cpsid	i
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <main+0xbe>
  sConfigInjected.InjectedRank = 1;
 8000d88:	e9cd 0413 	strd	r0, r4, [sp, #76]	@ 0x4c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000d8c:	9019      	str	r0, [sp, #100]	@ 0x64
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d8e:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
  sConfigInjected.InjectedOffset = 0;
 8000d92:	9016      	str	r0, [sp, #88]	@ 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d94:	2703      	movs	r7, #3
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000d96:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d9a:	a913      	add	r1, sp, #76	@ 0x4c
 8000d9c:	4628      	mov	r0, r5
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d9e:	9415      	str	r4, [sp, #84]	@ 0x54
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000da0:	9717      	str	r7, [sp, #92]	@ 0x5c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000da2:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000da4:	f003 f918 	bl	8003fd8 <HAL_ADCEx_InjectedConfigChannel>
 8000da8:	b108      	cbz	r0, 8000dae <main+0xe6>
 8000daa:	b672      	cpsid	i
  while (1)
 8000dac:	e7fe      	b.n	8000dac <main+0xe4>
  sConfigInjected.InjectedRank = 2;
 8000dae:	230b      	movs	r3, #11
 8000db0:	f04f 0802 	mov.w	r8, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000db4:	a913      	add	r1, sp, #76	@ 0x4c
 8000db6:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 2;
 8000db8:	e9cd 3813 	strd	r3, r8, [sp, #76]	@ 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dbc:	f003 f90c 	bl	8003fd8 <HAL_ADCEx_InjectedConfigChannel>
 8000dc0:	b108      	cbz	r0, 8000dc6 <main+0xfe>
 8000dc2:	b672      	cpsid	i
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <main+0xfc>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000dc6:	230a      	movs	r3, #10
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dc8:	a913      	add	r1, sp, #76	@ 0x4c
 8000dca:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 3;
 8000dcc:	9714      	str	r7, [sp, #80]	@ 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000dce:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dd0:	f003 f902 	bl	8003fd8 <HAL_ADCEx_InjectedConfigChannel>
 8000dd4:	b108      	cbz	r0, 8000dda <main+0x112>
 8000dd6:	b672      	cpsid	i
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <main+0x110>
  sConfig.Offset = 0;
 8000dda:	e9cd 800e 	strd	r8, r0, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dde:	a90c      	add	r1, sp, #48	@ 0x30
 8000de0:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8000de2:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de6:	f003 f841 	bl	8003e6c <HAL_ADC_ConfigChannel>
 8000dea:	4605      	mov	r5, r0
 8000dec:	b108      	cbz	r0, 8000df2 <main+0x12a>
 8000dee:	b672      	cpsid	i
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <main+0x128>
  htim1.Instance = TIM1;
 8000df2:	4f5d      	ldr	r7, [pc, #372]	@ (8000f68 <main+0x2a0>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000df4:	9007      	str	r0, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8000dfa:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8000dfe:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e02:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8000e06:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0a:	9005      	str	r0, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0c:	9012      	str	r0, [sp, #72]	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0e:	9006      	str	r0, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e10:	4601      	mov	r1, r0
 8000e12:	4632      	mov	r2, r6
 8000e14:	a813      	add	r0, sp, #76	@ 0x4c
 8000e16:	f006 fa73 	bl	8007300 <memset>
  htim1.Instance = TIM1;
 8000e1a:	4b54      	ldr	r3, [pc, #336]	@ (8000f6c <main+0x2a4>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000e1c:	607d      	str	r5, [r7, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	61bd      	str	r5, [r7, #24]
  htim1.Instance = TIM1;
 8000e20:	603b      	str	r3, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e22:	f241 55f9 	movw	r5, #5625	@ 0x15f9
 8000e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e2a:	4638      	mov	r0, r7
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e2c:	e9c7 5303 	strd	r5, r3, [r7, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e30:	60be      	str	r6, [r7, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000e32:	617c      	str	r4, [r7, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e34:	f003 ff24 	bl	8004c80 <HAL_TIM_Base_Init>
 8000e38:	b108      	cbz	r0, 8000e3e <main+0x176>
 8000e3a:	b672      	cpsid	i
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <main+0x174>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e3e:	4638      	mov	r0, r7
 8000e40:	f003 ffb0 	bl	8004da4 <HAL_TIM_PWM_Init>
 8000e44:	b108      	cbz	r0, 8000e4a <main+0x182>
 8000e46:	b672      	cpsid	i
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <main+0x180>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e4a:	2006      	movs	r0, #6
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	e9cd 0307 	strd	r0, r3, [sp, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e52:	a907      	add	r1, sp, #28
 8000e54:	4638      	mov	r0, r7
 8000e56:	f004 f9f1 	bl	800523c <HAL_TIM_SlaveConfigSynchro>
 8000e5a:	b108      	cbz	r0, 8000e60 <main+0x198>
 8000e5c:	b672      	cpsid	i
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <main+0x196>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e64:	a905      	add	r1, sp, #20
 8000e66:	4638      	mov	r0, r7
 8000e68:	f004 fa74 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	b108      	cbz	r0, 8000e74 <main+0x1ac>
 8000e70:	b672      	cpsid	i
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <main+0x1aa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e74:	2360      	movs	r3, #96	@ 0x60
 8000e76:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e78:	4638      	mov	r0, r7
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8000e7a:	f640 23fc 	movw	r3, #2812	@ 0xafc
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7e:	a90c      	add	r1, sp, #48	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e80:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e84:	e9cd 220f 	strd	r2, r2, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e88:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8c:	f004 f8d2 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	b108      	cbz	r0, 8000e96 <main+0x1ce>
 8000e92:	b672      	cpsid	i
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <main+0x1cc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e96:	4834      	ldr	r0, [pc, #208]	@ (8000f68 <main+0x2a0>)
 8000e98:	2204      	movs	r2, #4
 8000e9a:	a90c      	add	r1, sp, #48	@ 0x30
 8000e9c:	f004 f8ca 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	b108      	cbz	r0, 8000ea6 <main+0x1de>
 8000ea2:	b672      	cpsid	i
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <main+0x1dc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ea6:	4830      	ldr	r0, [pc, #192]	@ (8000f68 <main+0x2a0>)
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	a90c      	add	r1, sp, #48	@ 0x30
 8000eac:	f004 f8c2 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8000eb0:	b108      	cbz	r0, 8000eb6 <main+0x1ee>
 8000eb2:	b672      	cpsid	i
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <main+0x1ec>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000eb6:	f241 53f8 	movw	r3, #5624	@ 0x15f8
 8000eba:	2270      	movs	r2, #112	@ 0x70
 8000ebc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec0:	4829      	ldr	r0, [pc, #164]	@ (8000f68 <main+0x2a0>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	a90c      	add	r1, sp, #48	@ 0x30
 8000ec6:	f004 f8b5 	bl	8005034 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b108      	cbz	r0, 8000ed2 <main+0x20a>
 8000ece:	b672      	cpsid	i
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <main+0x208>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000ed2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eda:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000ede:	224c      	movs	r2, #76	@ 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee0:	4821      	ldr	r0, [pc, #132]	@ (8000f68 <main+0x2a0>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee2:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ee4:	eb0d 0102 	add.w	r1, sp, r2
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000ee8:	e9cd 3215 	strd	r3, r2, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000eec:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ef0:	f004 fa70 	bl	80053d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef4:	4604      	mov	r4, r0
 8000ef6:	b108      	cbz	r0, 8000efc <main+0x234>
 8000ef8:	b672      	cpsid	i
  while (1)
 8000efa:	e7fe      	b.n	8000efa <main+0x232>
  htim2.Instance = TIM2;
 8000efc:	4d1c      	ldr	r5, [pc, #112]	@ (8000f70 <main+0x2a8>)
  HAL_TIM_MspPostInit(&htim1);
 8000efe:	481a      	ldr	r0, [pc, #104]	@ (8000f68 <main+0x2a0>)
 8000f00:	f002 fc30 	bl	8003764 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000f04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f10:	9414      	str	r4, [sp, #80]	@ 0x50
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f12:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f14:	61ac      	str	r4, [r5, #24]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f16:	9416      	str	r4, [sp, #88]	@ 0x58
 8000f18:	9418      	str	r4, [sp, #96]	@ 0x60
 8000f1a:	941a      	str	r4, [sp, #104]	@ 0x68
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f1c:	2601      	movs	r6, #1
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000f1e:	240c      	movs	r4, #12
  htim2.Instance = TIM2;
 8000f20:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f22:	a913      	add	r1, sp, #76	@ 0x4c
  htim2.Init.Period = M1_PULSE_NBR;
 8000f24:	f640 73ff 	movw	r3, #4095	@ 0xfff
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f28:	2703      	movs	r7, #3
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f2a:	4628      	mov	r0, r5
  htim2.Init.Period = M1_PULSE_NBR;
 8000f2c:	60eb      	str	r3, [r5, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f2e:	9615      	str	r6, [sp, #84]	@ 0x54
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000f30:	9417      	str	r4, [sp, #92]	@ 0x5c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f32:	9619      	str	r6, [sp, #100]	@ 0x64
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000f34:	941b      	str	r4, [sp, #108]	@ 0x6c
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f36:	9713      	str	r7, [sp, #76]	@ 0x4c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f38:	f003 ffc4 	bl	8004ec4 <HAL_TIM_Encoder_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b108      	cbz	r0, 8000f44 <main+0x27c>
 8000f40:	b672      	cpsid	i
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <main+0x27a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f44:	a90c      	add	r1, sp, #48	@ 0x30
 8000f46:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f48:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4c:	f004 fa02 	bl	8005354 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b178      	cbz	r0, 8000f74 <main+0x2ac>
 8000f54:	b672      	cpsid	i
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <main+0x28e>
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	200006dc 	.word	0x200006dc
 8000f60:	40012000 	.word	0x40012000
 8000f64:	0f000001 	.word	0x0f000001
 8000f68:	20000694 	.word	0x20000694
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	2000064c 	.word	0x2000064c
  huart2.Instance = USART2;
 8000f74:	482d      	ldr	r0, [pc, #180]	@ (800102c <main+0x364>)
  huart2.Init.BaudRate = 921600;
 8000f76:	4a2e      	ldr	r2, [pc, #184]	@ (8001030 <main+0x368>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f78:	6103      	str	r3, [r0, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.BaudRate = 921600;
 8000f82:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f86:	6144      	str	r4, [r0, #20]
  huart2.Init.BaudRate = 921600;
 8000f88:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8c:	f004 fa4c 	bl	8005428 <HAL_UART_Init>
 8000f90:	4604      	mov	r4, r0
 8000f92:	b108      	cbz	r0, 8000f98 <main+0x2d0>
 8000f94:	b672      	cpsid	i
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <main+0x2ce>
  MX_MotorControl_Init();
 8000f98:	f001 f85c 	bl	8002054 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000f9c:	4632      	mov	r2, r6
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	2026      	movs	r0, #38	@ 0x26
 8000fa2:	f003 f8ff 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fa6:	2026      	movs	r0, #38	@ 0x26
 8000fa8:	f003 f938 	bl	800421c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 8000fac:	4622      	mov	r2, r4
 8000fae:	4639      	mov	r1, r7
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f003 f8f7 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fb6:	2010      	movs	r0, #16
 8000fb8:	f003 f930 	bl	800421c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000fbc:	4622      	mov	r2, r4
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	2012      	movs	r0, #18
 8000fc2:	f003 f8ef 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fc6:	2012      	movs	r0, #18
 8000fc8:	f003 f928 	bl	800421c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fcc:	4622      	mov	r2, r4
 8000fce:	4621      	mov	r1, r4
 8000fd0:	2019      	movs	r0, #25
 8000fd2:	f003 f8e7 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fd6:	2019      	movs	r0, #25
 8000fd8:	f003 f920 	bl	800421c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000fdc:	4632      	mov	r2, r6
 8000fde:	2104      	movs	r1, #4
 8000fe0:	2018      	movs	r0, #24
 8000fe2:	f003 f8df 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000fe6:	2018      	movs	r0, #24
 8000fe8:	f003 f918 	bl	800421c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000fec:	4622      	mov	r2, r4
 8000fee:	4639      	mov	r1, r7
 8000ff0:	201c      	movs	r0, #28
 8000ff2:	f003 f8d7 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff6:	201c      	movs	r0, #28
 8000ff8:	f003 f910 	bl	800421c <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   //B
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <main+0x36c>)
 8000ffe:	4622      	mov	r2, r4
 8001000:	2140      	movs	r1, #64	@ 0x40
 8001002:	f003 fadf 	bl	80045c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //G
 8001006:	480b      	ldr	r0, [pc, #44]	@ (8001034 <main+0x36c>)
 8001008:	4622      	mov	r2, r4
 800100a:	2180      	movs	r1, #128	@ 0x80
 800100c:	f003 fada 	bl	80045c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   //R
 8001010:	4808      	ldr	r0, [pc, #32]	@ (8001034 <main+0x36c>)
 8001012:	4632      	mov	r2, r6
 8001014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001018:	f003 fad4 	bl	80045c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);   // DRV Enable
 800101c:	4805      	ldr	r0, [pc, #20]	@ (8001034 <main+0x36c>)
 800101e:	4632      	mov	r2, r6
 8001020:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001024:	f003 face 	bl	80045c4 <HAL_GPIO_WritePin>
  while (1)
 8001028:	e7fe      	b.n	8001028 <main+0x360>
 800102a:	bf00      	nop
 800102c:	20000608 	.word	0x20000608
 8001030:	40004400 	.word	0x40004400
 8001034:	40020800 	.word	0x40020800

08001038 <Error_Handler>:
 8001038:	b672      	cpsid	i
  while (1)
 800103a:	e7fe      	b.n	800103a <Error_Handler+0x2>

0800103c <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 800103c:	2002      	movs	r0, #2
 800103e:	4770      	bx	lr

08001040 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MCI_Init>:
  *         (only present if position control is enabled)
  * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  */
__weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars,
                     PWMC_Handle_t *pPWMHandle )
{
 8001048:	b410      	push	{r4}
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800104a:	2400      	movs	r4, #0
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
    pHandle->CommandState = MCI_BUFFER_EMPTY;
    pHandle->DirectCommand = MCI_NO_COMMAND;
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 800104c:	e9c0 4407 	strd	r4, r4, [r0, #28]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001050:	7304      	strb	r4, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001052:	f8c0 400e 	str.w	r4, [r0, #14]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001056:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    pHandle->pFOCVars = pFOCVars;
 800105a:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800105e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->pPWM = pPWMHandle;
 8001062:	6083      	str	r3, [r0, #8]
}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001068:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800106c:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001070:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8001074:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8001076:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001078:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800107a:	4770      	bx	lr

0800107c <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800107c:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001080:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001084:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8001088:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800108a:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800108c:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800108e:	4770      	bx	lr

08001090 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001090:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001092:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001094:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001098:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 800109a:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800109e:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80010a0:	b002      	add	sp, #8
 80010a2:	4770      	bx	lr

080010a4 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80010a4:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 80010a6:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80010aa:	430b      	orrs	r3, r1
 80010ac:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 80010b0:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80010b4:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 80010b6:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80010bc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d000      	beq.n	80010c6 <MCI_ExecBufferedCommands+0xa>
 80010c4:	4770      	bx	lr
{
 80010c6:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 80010c8:	7b02      	ldrb	r2, [r0, #12]
 80010ca:	2a02      	cmp	r2, #2
 80010cc:	4604      	mov	r4, r0
 80010ce:	d007      	beq.n	80010e0 <MCI_ExecBufferedCommands+0x24>
 80010d0:	2a03      	cmp	r2, #3
 80010d2:	d028      	beq.n	8001126 <MCI_ExecBufferedCommands+0x6a>
 80010d4:	2a01      	cmp	r2, #1
 80010d6:	d017      	beq.n	8001108 <MCI_ExecBufferedCommands+0x4c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80010d8:	2303      	movs	r3, #3
 80010da:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80010de:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80010e0:	6843      	ldr	r3, [r0, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80010e8:	6800      	ldr	r0, [r0, #0]
 80010ea:	2104      	movs	r1, #4
 80010ec:	f005 fcb0 	bl	8006a50 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80010f0:	8ba2      	ldrh	r2, [r4, #28]
 80010f2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80010f6:	6820      	ldr	r0, [r4, #0]
 80010f8:	f005 fcae 	bl	8006a58 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d0eb      	beq.n	80010d8 <MCI_ExecBufferedCommands+0x1c>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001100:	2302      	movs	r3, #2
 8001102:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001106:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001108:	6843      	ldr	r3, [r0, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001110:	6800      	ldr	r0, [r0, #0]
 8001112:	2103      	movs	r1, #3
 8001114:	f005 fc9c 	bl	8006a50 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001118:	8ba2      	ldrh	r2, [r4, #28]
 800111a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800111e:	6820      	ldr	r0, [r4, #0]
 8001120:	f005 fc9a 	bl	8006a58 <STC_ExecRamp>
          break;
 8001124:	e7ea      	b.n	80010fc <MCI_ExecBufferedCommands+0x40>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001126:	6842      	ldr	r2, [r0, #4]
 8001128:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800112c:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001130:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001132:	e7e5      	b.n	8001100 <MCI_ExecBufferedCommands+0x44>

08001134 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001134:	7fc0      	ldrb	r0, [r0, #31]
 8001136:	4770      	bx	lr

08001138 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8001138:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800113a:	4770      	bx	lr

0800113c <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 800113c:	8c00      	ldrh	r0, [r0, #32]
 800113e:	4770      	bx	lr

08001140 <MCI_StartWithPolarizationMotor>:
{
 8001140:	b510      	push	{r4, lr}
 8001142:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001144:	f7ff fff6 	bl	8001134 <MCI_GetSTMState>
 8001148:	b108      	cbz	r0, 800114e <MCI_StartWithPolarizationMotor+0xe>
  bool retVal = true;
 800114a:	2001      	movs	r0, #1
}
 800114c:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800114e:	4620      	mov	r0, r4
 8001150:	f7ff fff2 	bl	8001138 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001154:	2800      	cmp	r0, #0
 8001156:	d1f8      	bne.n	800114a <MCI_StartWithPolarizationMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001158:	4620      	mov	r0, r4
 800115a:	f7ff ffef 	bl	800113c <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800115e:	2800      	cmp	r0, #0
 8001160:	d1f3      	bne.n	800114a <MCI_StartWithPolarizationMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8001162:	2201      	movs	r2, #1
      pHandle->pPWM->offsetCalibStatus = false;
 8001164:	68a1      	ldr	r1, [r4, #8]
      pHandle->DirectCommand = MCI_START;
 8001166:	77a2      	strb	r2, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001168:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
      pHandle->pPWM->offsetCalibStatus = false;
 800116c:	f881 0081 	strb.w	r0, [r1, #129]	@ 0x81
}
 8001170:	bd10      	pop	{r4, pc}
 8001172:	bf00      	nop

08001174 <MCI_StopMotor>:
{
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001178:	f7ff ffdc 	bl	8001134 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 800117c:	4604      	mov	r4, r0
 800117e:	b118      	cbz	r0, 8001188 <MCI_StopMotor+0x14>
 8001180:	f1b0 040c 	subs.w	r4, r0, #12
 8001184:	bf18      	it	ne
 8001186:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001188:	4628      	mov	r0, r5
 800118a:	f7ff ffd5 	bl	8001138 <MCI_GetOccurredFaults>
 800118e:	b110      	cbz	r0, 8001196 <MCI_StopMotor+0x22>
  bool retVal = false;
 8001190:	2400      	movs	r4, #0
}
 8001192:	4620      	mov	r0, r4
 8001194:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001196:	4628      	mov	r0, r5
 8001198:	f7ff ffd0 	bl	800113c <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800119c:	2800      	cmp	r0, #0
 800119e:	d1f7      	bne.n	8001190 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80011a0:	2c00      	cmp	r4, #0
 80011a2:	d0f5      	beq.n	8001190 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 80011a4:	2305      	movs	r3, #5
 80011a6:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 80011a8:	e7f3      	b.n	8001192 <MCI_StopMotor+0x1e>
 80011aa:	bf00      	nop

080011ac <MCI_FaultAcknowledged>:
{
 80011ac:	b510      	push	{r4, lr}
 80011ae:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80011b0:	f7ff ffc0 	bl	8001134 <MCI_GetSTMState>
 80011b4:	280b      	cmp	r0, #11
 80011b6:	d001      	beq.n	80011bc <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 80011b8:	2000      	movs	r0, #0
}
 80011ba:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80011bc:	4620      	mov	r0, r4
 80011be:	f7ff ffbd 	bl	800113c <MCI_GetCurrentFaults>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d1f8      	bne.n	80011b8 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 80011c6:	2302      	movs	r3, #2
 80011c8:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 80011ca:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 80011cc:	2001      	movs	r0, #1
}
 80011ce:	bd10      	pop	{r4, pc}

080011d0 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80011d0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80011d2:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80011d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 80011dc:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 80011e4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 80011ec:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 80011f4:	8b80      	ldrh	r0, [r0, #28]
 80011f6:	4770      	bx	lr

080011f8 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 80011f8:	6800      	ldr	r0, [r0, #0]
 80011fa:	f005 bc6d 	b.w	8006ad8 <STC_StopRamp>
 80011fe:	bf00      	nop

08001200 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001200:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001202:	6800      	ldr	r0, [r0, #0]
 8001204:	f005 fc12 	bl	8006a2c <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_speed);
}
 8001208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 800120c:	f005 bbae 	b.w	800696c <SPD_GetAvrgMecSpeedUnit>

08001210 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001210:	6800      	ldr	r0, [r0, #0]
 8001212:	f005 bc15 	b.w	8006a40 <STC_GetMecSpeedRefUnit>
 8001216:	bf00      	nop

08001218 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001218:	6842      	ldr	r2, [r0, #4]
 800121a:	6810      	ldr	r0, [r2, #0]
 800121c:	2300      	movs	r3, #0
 800121e:	b282      	uxth	r2, r0
 8001220:	f362 030f 	bfi	r3, r2, #0, #16
 8001224:	0c00      	lsrs	r0, r0, #16
 8001226:	f360 431f 	bfi	r3, r0, #16, #16
{
 800122a:	b082      	sub	sp, #8
#endif
}
 800122c:	4618      	mov	r0, r3
 800122e:	b002      	add	sp, #8
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001234:	6842      	ldr	r2, [r0, #4]
 8001236:	6850      	ldr	r0, [r2, #4]
 8001238:	2300      	movs	r3, #0
 800123a:	b282      	uxth	r2, r0
 800123c:	f362 030f 	bfi	r3, r2, #0, #16
 8001240:	0c00      	lsrs	r0, r0, #16
 8001242:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001246:	b082      	sub	sp, #8
#endif
}
 8001248:	4618      	mov	r0, r3
 800124a:	b002      	add	sp, #8
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001250:	6842      	ldr	r2, [r0, #4]
 8001252:	68d0      	ldr	r0, [r2, #12]
 8001254:	2300      	movs	r3, #0
 8001256:	b282      	uxth	r2, r0
 8001258:	f362 030f 	bfi	r3, r2, #0, #16
 800125c:	0c00      	lsrs	r0, r0, #16
 800125e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001262:	b082      	sub	sp, #8
#endif
}
 8001264:	4618      	mov	r0, r3
 8001266:	b002      	add	sp, #8
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 800126c:	6842      	ldr	r2, [r0, #4]
 800126e:	6910      	ldr	r0, [r2, #16]
 8001270:	2300      	movs	r3, #0
 8001272:	b282      	uxth	r2, r0
 8001274:	f362 030f 	bfi	r3, r2, #0, #16
 8001278:	0c00      	lsrs	r0, r0, #16
 800127a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800127e:	b082      	sub	sp, #8
#endif
}
 8001280:	4618      	mov	r0, r3
 8001282:	b002      	add	sp, #8
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001288:	6842      	ldr	r2, [r0, #4]
 800128a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800128e:	2300      	movs	r3, #0
 8001290:	b282      	uxth	r2, r0
 8001292:	f362 030f 	bfi	r3, r2, #0, #16
 8001296:	0c00      	lsrs	r0, r0, #16
 8001298:	f360 431f 	bfi	r3, r0, #16, #16
{
 800129c:	b082      	sub	sp, #8
#endif
}
 800129e:	4618      	mov	r0, r3
 80012a0:	b002      	add	sp, #8
 80012a2:	4770      	bx	lr

080012a4 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80012a4:	6842      	ldr	r2, [r0, #4]
 80012a6:	f8d2 001a 	ldr.w	r0, [r2, #26]
 80012aa:	2300      	movs	r3, #0
 80012ac:	b282      	uxth	r2, r0
 80012ae:	f362 030f 	bfi	r3, r2, #0, #16
 80012b2:	0c00      	lsrs	r0, r0, #16
 80012b4:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012b8:	b082      	sub	sp, #8
#endif
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	b002      	add	sp, #8
 80012be:	4770      	bx	lr

080012c0 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80012c0:	6843      	ldr	r3, [r0, #4]
#endif
}
 80012c2:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80012c6:	4770      	bx	lr

080012c8 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80012c8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80012ca:	e9d0 0400 	ldrd	r0, r4, [r0]
 80012ce:	f005 fc3d 	bl	8006b4c <STC_GetDefaultIqdref>
 80012d2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80012d6:	8220      	strh	r0, [r4, #16]
 80012d8:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80012da:	bd10      	pop	{r4, pc}

080012dc <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80012dc:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80012e0:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80012e4:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80012e8:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80012ec:	fb10 f202 	smulbb	r2, r0, r2
 80012f0:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80012f4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 80012f8:	b084      	sub	sp, #16
 80012fa:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 80012fc:	da05      	bge.n	800130a <MCM_Clarke+0x2e>
 80012fe:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001300:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8001304:	da0c      	bge.n	8001320 <MCM_Clarke+0x44>
 8001306:	4a09      	ldr	r2, [pc, #36]	@ (800132c <MCM_Clarke+0x50>)
 8001308:	e001      	b.n	800130e <MCM_Clarke+0x32>
 800130a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 800130e:	b29b      	uxth	r3, r3
 8001310:	2000      	movs	r0, #0
 8001312:	f363 000f 	bfi	r0, r3, #0, #16
 8001316:	b293      	uxth	r3, r2
 8001318:	f363 401f 	bfi	r0, r3, #16, #16
}
 800131c:	b004      	add	sp, #16
 800131e:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <MCM_Clarke+0x50>)
 8001322:	b20a      	sxth	r2, r1
 8001324:	4282      	cmp	r2, r0
 8001326:	bfb8      	it	lt
 8001328:	4602      	movlt	r2, r0
 800132a:	e7f0      	b.n	800130e <MCM_Clarke+0x32>
 800132c:	ffff8001 	.word	0xffff8001

08001330 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8001330:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 8001334:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 8001338:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 800133c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8001340:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001342:	d028      	beq.n	8001396 <MCM_Trig_Functions+0x66>
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	461a      	mov	r2, r3
 800134a:	d816      	bhi.n	800137a <MCM_Trig_Functions+0x4a>
 800134c:	b361      	cbz	r1, 80013a8 <MCM_Trig_Functions+0x78>
 800134e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001352:	d109      	bne.n	8001368 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001354:	b2c0      	uxtb	r0, r0
 8001356:	43c2      	mvns	r2, r0
 8001358:	491a      	ldr	r1, [pc, #104]	@ (80013c4 <MCM_Trig_Functions+0x94>)
 800135a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800135c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001360:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001364:	4252      	negs	r2, r2
 8001366:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8001368:	b29b      	uxth	r3, r3
 800136a:	2000      	movs	r0, #0
 800136c:	f363 000f 	bfi	r0, r3, #0, #16
 8001370:	b292      	uxth	r2, r2
 8001372:	f362 401f 	bfi	r0, r2, #16, #16
}
 8001376:	b002      	add	sp, #8
 8001378:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 800137a:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 800137e:	d1f3      	bne.n	8001368 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001380:	4910      	ldr	r1, [pc, #64]	@ (80013c4 <MCM_Trig_Functions+0x94>)
 8001382:	b2c0      	uxtb	r0, r0
 8001384:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001386:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800138a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800138c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800138e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001392:	b21b      	sxth	r3, r3
      break;
 8001394:	e7e8      	b.n	8001368 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001396:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001398:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800139a:	490a      	ldr	r1, [pc, #40]	@ (80013c4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800139c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800139e:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013a2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 80013a6:	e7df      	b.n	8001368 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013a8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013aa:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013ac:	4905      	ldr	r1, [pc, #20]	@ (80013c4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013ae:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013b0:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013b8:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013ba:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013bc:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013be:	b21b      	sxth	r3, r3
      break;
 80013c0:	e7d2      	b.n	8001368 <MCM_Trig_Functions+0x38>
 80013c2:	bf00      	nop
 80013c4:	0800753c 	.word	0x0800753c

080013c8 <MCM_Park>:
{
 80013c8:	b530      	push	{r4, r5, lr}
 80013ca:	4605      	mov	r5, r0
 80013cc:	4604      	mov	r4, r0
 80013ce:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80013d0:	4608      	mov	r0, r1
 80013d2:	f7ff ffad 	bl	8001330 <MCM_Trig_Functions>
 80013d6:	b22d      	sxth	r5, r5
 80013d8:	b201      	sxth	r1, r0
 80013da:	1424      	asrs	r4, r4, #16
 80013dc:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80013de:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80013e2:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 80013e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ea:	da05      	bge.n	80013f8 <MCM_Park+0x30>
 80013ec:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 80013ee:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 80013f2:	da22      	bge.n	800143a <MCM_Park+0x72>
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <MCM_Park+0x80>)
 80013f6:	e001      	b.n	80013fc <MCM_Park+0x34>
 80013f8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80013fc:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001400:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8001404:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001408:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 800140c:	da04      	bge.n	8001418 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 800140e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001412:	da0c      	bge.n	800142e <MCM_Park+0x66>
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MCM_Park+0x80>)
 8001416:	e001      	b.n	800141c <MCM_Park+0x54>
 8001418:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 800141c:	b292      	uxth	r2, r2
 800141e:	2000      	movs	r0, #0
 8001420:	f362 000f 	bfi	r0, r2, #0, #16
 8001424:	b29b      	uxth	r3, r3
 8001426:	f363 401f 	bfi	r0, r3, #16, #16
}
 800142a:	b005      	add	sp, #20
 800142c:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 800142e:	4906      	ldr	r1, [pc, #24]	@ (8001448 <MCM_Park+0x80>)
 8001430:	b21b      	sxth	r3, r3
 8001432:	428b      	cmp	r3, r1
 8001434:	bfb8      	it	lt
 8001436:	460b      	movlt	r3, r1
 8001438:	e7f0      	b.n	800141c <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 800143a:	4b03      	ldr	r3, [pc, #12]	@ (8001448 <MCM_Park+0x80>)
 800143c:	b212      	sxth	r2, r2
 800143e:	429a      	cmp	r2, r3
 8001440:	bfb8      	it	lt
 8001442:	461a      	movlt	r2, r3
 8001444:	e7da      	b.n	80013fc <MCM_Park+0x34>
 8001446:	bf00      	nop
 8001448:	ffff8001 	.word	0xffff8001

0800144c <MCM_Rev_Park>:
{
 800144c:	b530      	push	{r4, r5, lr}
 800144e:	4605      	mov	r5, r0
 8001450:	b085      	sub	sp, #20
 8001452:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001454:	4608      	mov	r0, r1
 8001456:	f7ff ff6b 	bl	8001330 <MCM_Trig_Functions>
 800145a:	1424      	asrs	r4, r4, #16
 800145c:	1402      	asrs	r2, r0, #16
 800145e:	b22d      	sxth	r5, r5
 8001460:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001462:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001466:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 800146a:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 800146e:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001472:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001476:	2000      	movs	r0, #0
 8001478:	f363 000f 	bfi	r0, r3, #0, #16
 800147c:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001480:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001484:	b005      	add	sp, #20
 8001486:	bd30      	pop	{r4, r5, pc}

08001488 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001488:	1e03      	subs	r3, r0, #0
 800148a:	dd32      	ble.n	80014f2 <MCM_Sqrt+0x6a>
    {
      wtemproot = ((int32_t)128);
    }
    else
    {
      wtemproot = ((int32_t)8192);
 800148c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001490:	bfd4      	ite	le
 8001492:	2180      	movle	r1, #128	@ 0x80
 8001494:	f44f 5100 	movgt.w	r1, #8192	@ 0x2000
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001498:	fb93 f2f1 	sdiv	r2, r3, r1
 800149c:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800149e:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014a2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014a6:	d025      	beq.n	80014f4 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014a8:	fb93 f2f0 	sdiv	r2, r3, r0
 80014ac:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014ae:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014b2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014b6:	d01d      	beq.n	80014f4 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014b8:	fb93 f2f1 	sdiv	r2, r3, r1
 80014bc:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014be:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014c2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014c6:	d015      	beq.n	80014f4 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014c8:	fb93 f2f0 	sdiv	r2, r3, r0
 80014cc:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014ce:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014d2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014d6:	d00d      	beq.n	80014f4 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014d8:	fb93 f2f1 	sdiv	r2, r3, r1
 80014dc:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014de:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014e2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014e6:	d005      	beq.n	80014f4 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014e8:	fb93 f3f0 	sdiv	r3, r3, r0
 80014ec:	4418      	add	r0, r3
 80014ee:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014f0:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 80014f2:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	2326      	movs	r3, #38	@ 0x26
 80014fc:	4916      	ldr	r1, [pc, #88]	@ (8001558 <FOC_Clear+0x60>)
 80014fe:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001502:	2400      	movs	r4, #0
 8001504:	50cc      	str	r4, [r1, r3]
{
 8001506:	4605      	mov	r5, r0
 8001508:	f103 0208 	add.w	r2, r3, #8
 800150c:	1858      	adds	r0, r3, r1
 800150e:	3310      	adds	r3, #16
 8001510:	440a      	add	r2, r1
 8001512:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001514:	4911      	ldr	r1, [pc, #68]	@ (800155c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001516:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001518:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 800151c:	6054      	str	r4, [r2, #4]
 800151e:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001520:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8001522:	f8c3 4006 	str.w	r4, [r3, #6]
 8001526:	f8c3 400a 	str.w	r4, [r3, #10]
 800152a:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800152e:	f004 fb7b 	bl	8005c28 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <FOC_Clear+0x68>)
 8001534:	4621      	mov	r1, r4
 8001536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800153a:	f004 fb75 	bl	8005c28 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <FOC_Clear+0x6c>)
 8001540:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001544:	f005 fa74 	bl	8006a30 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <FOC_Clear+0x70>)
 800154a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800154e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001552:	f000 bf19 	b.w	8002388 <PWMC_SwitchOffPWM>
 8001556:	bf00      	nop
 8001558:	20000770 	.word	0x20000770
 800155c:	20000008 	.word	0x20000008
 8001560:	20000004 	.word	0x20000004
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000768 	.word	0x20000768

0800156c <MCboot>:
  if (MC_NULL == pMCIList)
 800156c:	2800      	cmp	r0, #0
 800156e:	d073      	beq.n	8001658 <MCboot+0xec>
{
 8001570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 8001574:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 80016a8 <MCboot+0x13c>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001578:	f8df b130 	ldr.w	fp, [pc, #304]	@ 80016ac <MCboot+0x140>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 800157c:	4d37      	ldr	r5, [pc, #220]	@ (800165c <MCboot+0xf0>)
 800157e:	4e38      	ldr	r6, [pc, #224]	@ (8001660 <MCboot+0xf4>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001580:	4f38      	ldr	r7, [pc, #224]	@ (8001664 <MCboot+0xf8>)
{
 8001582:	b083      	sub	sp, #12
    bMCBootCompleted = (uint8_t )0;
 8001584:	f04f 0800 	mov.w	r8, #0
 8001588:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800158a:	4837      	ldr	r0, [pc, #220]	@ (8001668 <MCboot+0xfc>)
 800158c:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001590:	f889 8000 	strb.w	r8, [r9]
    R3_1_Init(&PWM_Handle_M1);
 8001594:	f004 fe8e 	bl	80062b4 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8001598:	4834      	ldr	r0, [pc, #208]	@ (800166c <MCboot+0x100>)
 800159a:	f7fe ffd7 	bl	800054c <ASPEP_start>
    startTimers();
 800159e:	f004 fbef 	bl	8005d80 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80015a2:	4833      	ldr	r0, [pc, #204]	@ (8001670 <MCboot+0x104>)
 80015a4:	f004 fb2c 	bl	8005c00 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 80015a8:	4832      	ldr	r0, [pc, #200]	@ (8001674 <MCboot+0x108>)
 80015aa:	f004 f851 	bl	8005650 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80015ae:	6829      	ldr	r1, [r5, #0]
 80015b0:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <MCboot+0x108>)
 80015b2:	4a31      	ldr	r2, [pc, #196]	@ (8001678 <MCboot+0x10c>)
 80015b4:	4630      	mov	r0, r6
 80015b6:	f003 ffff 	bl	80055b8 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 80015ba:	4b30      	ldr	r3, [pc, #192]	@ (800167c <MCboot+0x110>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80015bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001674 <MCboot+0x108>)
 80015be:	492c      	ldr	r1, [pc, #176]	@ (8001670 <MCboot+0x104>)
 80015c0:	6828      	ldr	r0, [r5, #0]
    pEAC[M1] = &EncAlignCtrlM1;
 80015c2:	601e      	str	r6, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80015c4:	f005 fa1a 	bl	80069fc <STC_Init>
    STO_CR_Init (&STO_CR_M1);
 80015c8:	482d      	ldr	r0, [pc, #180]	@ (8001680 <MCboot+0x114>)
    RVBS_Init(&BusVoltageSensor_M1);
 80015ca:	4e2e      	ldr	r6, [pc, #184]	@ (8001684 <MCboot+0x118>)
    STO_CR_Init (&STO_CR_M1);
 80015cc:	f005 fd9c 	bl	8007108 <STO_CR_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80015d0:	4829      	ldr	r0, [pc, #164]	@ (8001678 <MCboot+0x10c>)
 80015d2:	f005 fe4d 	bl	8007270 <VSS_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80015d6:	482c      	ldr	r0, [pc, #176]	@ (8001688 <MCboot+0x11c>)
 80015d8:	f004 fb12 	bl	8005c00 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80015dc:	482b      	ldr	r0, [pc, #172]	@ (800168c <MCboot+0x120>)
 80015de:	f004 fb0f 	bl	8005c00 <PID_HandleInit>
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80015e2:	482b      	ldr	r0, [pc, #172]	@ (8001690 <MCboot+0x124>)
 80015e4:	f001 fec2 	bl	800336c <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80015e8:	4630      	mov	r0, r6
 80015ea:	f005 f959 	bl	80068a0 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80015ee:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <MCboot+0x128>)
    NTC_Init(&TempSensor_M1);
 80015f0:	4829      	ldr	r0, [pc, #164]	@ (8001698 <MCboot+0x12c>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80015f6:	4e29      	ldr	r6, [pc, #164]	@ (800169c <MCboot+0x130>)
 80015f8:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 80015fa:	f004 fae3 	bl	8005bc4 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 80015fe:	4828      	ldr	r0, [pc, #160]	@ (80016a0 <MCboot+0x134>)
 8001600:	f005 f9a8 	bl	8006954 <REMNG_Init>
    FOC_Clear(M1);
 8001604:	4640      	mov	r0, r8
 8001606:	f7ff ff77 	bl	80014f8 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800160a:	f04f 0a01 	mov.w	sl, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800160e:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001610:	f886 a024 	strb.w	sl, [r6, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001614:	f005 fa9a 	bl	8006b4c <STC_GetDefaultIqdref>
 8001618:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800161a:	6828      	ldr	r0, [r5, #0]
 800161c:	f005 fa96 	bl	8006b4c <STC_GetDefaultIqdref>
 8001620:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001624:	6829      	ldr	r1, [r5, #0]
 8001626:	f8db 3000 	ldr.w	r3, [fp]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800162a:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800162c:	4632      	mov	r2, r6
 800162e:	4638      	mov	r0, r7
 8001630:	f7ff fd0a 	bl	8001048 <MCI_Init>
   Mci[M1].pScale = &scaleParams_M1;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MCboot+0x138>)
    MCI_ExecTorqueRamp(&Mci[M1], STC_GetDefaultIqdref(pSTC[M1]).q, 0);
 8001636:	6828      	ldr	r0, [r5, #0]
   Mci[M1].pScale = &scaleParams_M1;
 8001638:	61bb      	str	r3, [r7, #24]
    MCI_ExecTorqueRamp(&Mci[M1], STC_GetDefaultIqdref(pSTC[M1]).q, 0);
 800163a:	f005 fa87 	bl	8006b4c <STC_GetDefaultIqdref>
 800163e:	4642      	mov	r2, r8
 8001640:	b201      	sxth	r1, r0
 8001642:	4638      	mov	r0, r7
 8001644:	f7ff fd1a 	bl	800107c <MCI_ExecTorqueRamp>
    pMCIList[M1] = &Mci[M1];
 8001648:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 800164a:	f7ff fcf9 	bl	8001040 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 800164e:	f889 a000 	strb.w	sl, [r9]
}
 8001652:	b003      	add	sp, #12
 8001654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000000c 	.word	0x2000000c
 8001660:	20000074 	.word	0x20000074
 8001664:	20000724 	.word	0x20000724
 8001668:	200002cc 	.word	0x200002cc
 800166c:	20000494 	.word	0x20000494
 8001670:	200003fc 	.word	0x200003fc
 8001674:	20000090 	.word	0x20000090
 8001678:	20000294 	.word	0x20000294
 800167c:	2000076c 	.word	0x2000076c
 8001680:	20000110 	.word	0x20000110
 8001684:	2000002c 	.word	0x2000002c
 8001688:	200003d0 	.word	0x200003d0
 800168c:	200003a4 	.word	0x200003a4
 8001690:	20000048 	.word	0x20000048
 8001694:	20000000 	.word	0x20000000
 8001698:	20000058 	.word	0x20000058
 800169c:	20000770 	.word	0x20000770
 80016a0:	20000014 	.word	0x20000014
 80016a4:	20000448 	.word	0x20000448
 80016a8:	20000760 	.word	0x20000760
 80016ac:	20000768 	.word	0x20000768

080016b0 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop

080016b4 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80016b4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80016b6:	4c08      	ldr	r4, [pc, #32]	@ (80016d8 <FOC_CalcCurrRef+0x24>)
 80016b8:	2326      	movs	r3, #38	@ 0x26
 80016ba:	fb03 4400 	mla	r4, r3, r0, r4
 80016be:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80016c2:	b103      	cbz	r3, 80016c6 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80016c4:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80016c6:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <FOC_CalcCurrRef+0x28>)
 80016c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80016cc:	f005 fa08 	bl	8006ae0 <STC_CalcTorqueReference>
 80016d0:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80016d2:	8220      	strh	r0, [r4, #16]
}
 80016d4:	bd10      	pop	{r4, pc}
 80016d6:	bf00      	nop
 80016d8:	20000770 	.word	0x20000770
 80016dc:	2000000c 	.word	0x2000000c

080016e0 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80016e0:	4b01      	ldr	r3, [pc, #4]	@ (80016e8 <TSK_SetChargeBootCapDelayM1+0x8>)
 80016e2:	8018      	strh	r0, [r3, #0]
}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000764 	.word	0x20000764

080016ec <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80016ee:	8818      	ldrh	r0, [r3, #0]
 80016f0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80016f2:	fab0 f080 	clz	r0, r0
 80016f6:	0940      	lsrs	r0, r0, #5
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000764 	.word	0x20000764

08001700 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001700:	4b01      	ldr	r3, [pc, #4]	@ (8001708 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001702:	8018      	strh	r0, [r3, #0]
}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000762 	.word	0x20000762

0800170c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 800170c:	4b03      	ldr	r3, [pc, #12]	@ (800171c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800170e:	8818      	ldrh	r0, [r3, #0]
 8001710:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001712:	fab0 f080 	clz	r0, r0
 8001716:	0940      	lsrs	r0, r0, #5
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000762 	.word	0x20000762

08001720 <TSK_MediumFrequencyTaskM1>:
{
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001724:	2300      	movs	r3, #0
  (void)STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 8001726:	f10d 0106 	add.w	r1, sp, #6
 800172a:	48a1      	ldr	r0, [pc, #644]	@ (80019b0 <TSK_MediumFrequencyTaskM1+0x290>)
  PQD_CalcElMotorPower(pMPM[M1]);
 800172c:	4da1      	ldr	r5, [pc, #644]	@ (80019b4 <TSK_MediumFrequencyTaskM1+0x294>)
  int16_t wAux = 0;
 800172e:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001732:	4ca1      	ldr	r4, [pc, #644]	@ (80019b8 <TSK_MediumFrequencyTaskM1+0x298>)
  (void)STO_CR_CalcAvrgMecSpeedUnit(&STO_CR_M1, &wAux);
 8001734:	f005 fc1a 	bl	8006f6c <STO_CR_CalcAvrgMecSpeedUnit>
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8001738:	f10d 0106 	add.w	r1, sp, #6
 800173c:	489f      	ldr	r0, [pc, #636]	@ (80019bc <TSK_MediumFrequencyTaskM1+0x29c>)
 800173e:	f003 ffe7 	bl	8005710 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001742:	6828      	ldr	r0, [r5, #0]
 8001744:	f004 fae2 	bl	8005d0c <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff fcf7 	bl	800113c <MCI_GetCurrentFaults>
 800174e:	b118      	cbz	r0, 8001758 <TSK_MediumFrequencyTaskM1+0x38>
    Mci[M1].State = FAULT_NOW;
 8001750:	230a      	movs	r3, #10
 8001752:	77e3      	strb	r3, [r4, #31]
}
 8001754:	b002      	add	sp, #8
 8001756:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fced 	bl	8001138 <MCI_GetOccurredFaults>
 800175e:	bb78      	cbnz	r0, 80017c0 <TSK_MediumFrequencyTaskM1+0xa0>
      switch (Mci[M1].State)
 8001760:	7fe3      	ldrb	r3, [r4, #31]
 8001762:	2b14      	cmp	r3, #20
 8001764:	d8f6      	bhi.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
 8001766:	a201      	add	r2, pc, #4	@ (adr r2, 800176c <TSK_MediumFrequencyTaskM1+0x4c>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	08001911 	.word	0x08001911
 8001770:	08001755 	.word	0x08001755
 8001774:	080018bf 	.word	0x080018bf
 8001778:	08001755 	.word	0x08001755
 800177c:	08001755 	.word	0x08001755
 8001780:	08001755 	.word	0x08001755
 8001784:	080018ab 	.word	0x080018ab
 8001788:	08001755 	.word	0x08001755
 800178c:	0800189f 	.word	0x0800189f
 8001790:	08001755 	.word	0x08001755
 8001794:	080017c1 	.word	0x080017c1
 8001798:	08001891 	.word	0x08001891
 800179c:	08001755 	.word	0x08001755
 80017a0:	08001755 	.word	0x08001755
 80017a4:	08001755 	.word	0x08001755
 80017a8:	08001755 	.word	0x08001755
 80017ac:	08001839 	.word	0x08001839
 80017b0:	08001807 	.word	0x08001807
 80017b4:	08001755 	.word	0x08001755
 80017b8:	08001755 	.word	0x08001755
 80017bc:	080017c9 	.word	0x080017c9
      Mci[M1].State = FAULT_OVER;
 80017c0:	230b      	movs	r3, #11
 80017c2:	77e3      	strb	r3, [r4, #31]
}
 80017c4:	b002      	add	sp, #8
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 80017c8:	7fa3      	ldrb	r3, [r4, #30]
 80017ca:	2b05      	cmp	r3, #5
 80017cc:	f000 80b0 	beq.w	8001930 <TSK_MediumFrequencyTaskM1+0x210>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 80017d0:	f7ff ff9c 	bl	800170c <TSK_StopPermanencyTimeHasElapsedM1>
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d0bd      	beq.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
              ENC_Clear(&ENCODER_M1);
 80017d8:	4878      	ldr	r0, [pc, #480]	@ (80019bc <TSK_MediumFrequencyTaskM1+0x29c>)
 80017da:	f003 ff71 	bl	80056c0 <ENC_Clear>
              R3_1_SwitchOnPWM(pwmcHandle[M1]);
 80017de:	4b78      	ldr	r3, [pc, #480]	@ (80019c0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	f004 fc17 	bl	8006014 <R3_1_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff ff62 	bl	80016b0 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 80017ec:	4b75      	ldr	r3, [pc, #468]	@ (80019c4 <TSK_MediumFrequencyTaskM1+0x2a4>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	f005 f9ba 	bl	8006b68 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80017f4:	4870      	ldr	r0, [pc, #448]	@ (80019b8 <TSK_MediumFrequencyTaskM1+0x298>)
 80017f6:	f7ff fc61 	bl	80010bc <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff ff5a 	bl	80016b4 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8001800:	2306      	movs	r3, #6
 8001802:	77e3      	strb	r3, [r4, #31]
 8001804:	e7a6      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001806:	7fa3      	ldrb	r3, [r4, #30]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001808:	4e6d      	ldr	r6, [pc, #436]	@ (80019c0 <TSK_MediumFrequencyTaskM1+0x2a0>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 800180a:	2b05      	cmp	r3, #5
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 800180c:	6830      	ldr	r0, [r6, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 800180e:	f000 8091 	beq.w	8001934 <TSK_MediumFrequencyTaskM1+0x214>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001812:	2101      	movs	r1, #1
 8001814:	f000 fdbc 	bl	8002390 <PWMC_CurrentReadingCalibr>
 8001818:	2800      	cmp	r0, #0
 800181a:	d09b      	beq.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 800181c:	7fa3      	ldrb	r3, [r4, #30]
 800181e:	2b03      	cmp	r3, #3
 8001820:	f000 80a6 	beq.w	8001970 <TSK_MediumFrequencyTaskM1+0x250>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001824:	6830      	ldr	r0, [r6, #0]
 8001826:	2100      	movs	r1, #0
 8001828:	f004 fcec 	bl	8006204 <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 800182c:	2014      	movs	r0, #20
 800182e:	f7ff ff57 	bl	80016e0 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001832:	2310      	movs	r3, #16
 8001834:	77e3      	strb	r3, [r4, #31]
 8001836:	e78d      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001838:	7fa3      	ldrb	r3, [r4, #30]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d078      	beq.n	8001930 <TSK_MediumFrequencyTaskM1+0x210>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 800183e:	f7ff ff55 	bl	80016ec <TSK_ChargeBootCapDelayHasElapsedM1>
 8001842:	2800      	cmp	r0, #0
 8001844:	d086      	beq.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001846:	4d5e      	ldr	r5, [pc, #376]	@ (80019c0 <TSK_MediumFrequencyTaskM1+0x2a0>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001848:	4e5e      	ldr	r6, [pc, #376]	@ (80019c4 <TSK_MediumFrequencyTaskM1+0x2a4>)
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800184a:	6828      	ldr	r0, [r5, #0]
 800184c:	f004 fc2c 	bl	80060a8 <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001850:	4b5d      	ldr	r3, [pc, #372]	@ (80019c8 <TSK_MediumFrequencyTaskM1+0x2a8>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001852:	495e      	ldr	r1, [pc, #376]	@ (80019cc <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001854:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800185c:	f005 f8e4 	bl	8006a28 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8001860:	4856      	ldr	r0, [pc, #344]	@ (80019bc <TSK_MediumFrequencyTaskM1+0x29c>)
 8001862:	f003 ff2d 	bl	80056c0 <ENC_Clear>
              STO_CR_Clear(&STO_CR_M1);
 8001866:	4852      	ldr	r0, [pc, #328]	@ (80019b0 <TSK_MediumFrequencyTaskM1+0x290>)
 8001868:	f005 fc22 	bl	80070b0 <STO_CR_Clear>
              FOC_Clear( M1 );
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff fe43 	bl	80014f8 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 8001872:	4857      	ldr	r0, [pc, #348]	@ (80019d0 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001874:	f003 fee8 	bl	8005648 <EAC_IsAligned>
 8001878:	2800      	cmp	r0, #0
 800187a:	f040 8082 	bne.w	8001982 <TSK_MediumFrequencyTaskM1+0x262>
                EAC_StartAlignment(&EncAlignCtrlM1);
 800187e:	4854      	ldr	r0, [pc, #336]	@ (80019d0 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001880:	f003 fea2 	bl	80055c8 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8001884:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001886:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 8001888:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800188a:	f000 fd7f 	bl	800238c <PWMC_SwitchOnPWM>
 800188e:	e761      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001890:	7fa3      	ldrb	r3, [r4, #30]
 8001892:	2b02      	cmp	r3, #2
 8001894:	f47f af5e 	bne.w	8001754 <TSK_MediumFrequencyTaskM1+0x34>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001898:	2300      	movs	r3, #0
 800189a:	83e3      	strh	r3, [r4, #30]
 800189c:	e75a      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800189e:	f7ff ff35 	bl	800170c <TSK_StopPermanencyTimeHasElapsedM1>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	f43f af56 	beq.w	8001754 <TSK_MediumFrequencyTaskM1+0x34>
 80018a8:	e7f6      	b.n	8001898 <TSK_MediumFrequencyTaskM1+0x178>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80018aa:	7fa3      	ldrb	r3, [r4, #30]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d03f      	beq.n	8001930 <TSK_MediumFrequencyTaskM1+0x210>
            MCI_ExecBufferedCommands(&Mci[M1]);
 80018b0:	4841      	ldr	r0, [pc, #260]	@ (80019b8 <TSK_MediumFrequencyTaskM1+0x298>)
 80018b2:	f7ff fc03 	bl	80010bc <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fefc 	bl	80016b4 <FOC_CalcCurrRef>
 80018bc:	e74a      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80018be:	7fa3      	ldrb	r3, [r4, #30]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d035      	beq.n	8001930 <TSK_MediumFrequencyTaskM1+0x210>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 80018c4:	4842      	ldr	r0, [pc, #264]	@ (80019d0 <TSK_MediumFrequencyTaskM1+0x2b0>)
 80018c6:	f003 febf 	bl	8005648 <EAC_IsAligned>
 80018ca:	4605      	mov	r5, r0
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 80018cc:	4840      	ldr	r0, [pc, #256]	@ (80019d0 <TSK_MediumFrequencyTaskM1+0x2b0>)
 80018ce:	f003 fea3 	bl	8005618 <EAC_Exec>
 80018d2:	4606      	mov	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 80018d4:	b90d      	cbnz	r5, 80018da <TSK_MediumFrequencyTaskM1+0x1ba>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d042      	beq.n	8001960 <TSK_MediumFrequencyTaskM1+0x240>
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 80018da:	4d39      	ldr	r5, [pc, #228]	@ (80019c0 <TSK_MediumFrequencyTaskM1+0x2a0>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 80018dc:	4e39      	ldr	r6, [pc, #228]	@ (80019c4 <TSK_MediumFrequencyTaskM1+0x2a4>)
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 80018de:	6828      	ldr	r0, [r5, #0]
 80018e0:	f004 fbe2 	bl	80060a8 <R3_1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 80018e4:	6830      	ldr	r0, [r6, #0]
 80018e6:	2103      	movs	r1, #3
 80018e8:	f005 f8b2 	bl	8006a50 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 80018ec:	4933      	ldr	r1, [pc, #204]	@ (80019bc <TSK_MediumFrequencyTaskM1+0x29c>)
 80018ee:	6830      	ldr	r0, [r6, #0]
 80018f0:	f005 f89a 	bl	8006a28 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fdff 	bl	80014f8 <FOC_Clear>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80018fa:	6828      	ldr	r0, [r5, #0]
 80018fc:	2100      	movs	r1, #0
 80018fe:	f004 fc81 	bl	8006204 <R3_1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001902:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001906:	f7ff fefb 	bl	8001700 <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 800190a:	2314      	movs	r3, #20
 800190c:	77e3      	strb	r3, [r4, #31]
 800190e:	e721      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001910:	7fa3      	ldrb	r3, [r4, #30]
 8001912:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8001916:	2b01      	cmp	r3, #1
 8001918:	f47f af1c 	bne.w	8001754 <TSK_MediumFrequencyTaskM1+0x34>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 800191c:	4d28      	ldr	r5, [pc, #160]	@ (80019c0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800191e:	6828      	ldr	r0, [r5, #0]
 8001920:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 8001924:	b9a9      	cbnz	r1, 8001952 <TSK_MediumFrequencyTaskM1+0x232>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001926:	f000 fd33 	bl	8002390 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 800192a:	2311      	movs	r3, #17
 800192c:	77e3      	strb	r3, [r4, #31]
 800192e:	e711      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001930:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	f004 fbb8 	bl	80060a8 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fddd 	bl	80014f8 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 800193e:	6828      	ldr	r0, [r5, #0]
 8001940:	f004 fa00 	bl	8005d44 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001944:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001948:	f7ff feda 	bl	8001700 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 800194c:	2308      	movs	r3, #8
 800194e:	77e3      	strb	r3, [r4, #31]
}
 8001950:	e700      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001952:	4619      	mov	r1, r3
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001954:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001958:	f000 fd1a 	bl	8002390 <PWMC_CurrentReadingCalibr>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800195c:	6828      	ldr	r0, [r5, #0]
 800195e:	e762      	b.n	8001826 <TSK_MediumFrequencyTaskM1+0x106>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	f005 f8bc 	bl	8006ae0 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 8001968:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <TSK_MediumFrequencyTaskM1+0x2a8>)
 800196a:	821e      	strh	r6, [r3, #16]
 800196c:	8258      	strh	r0, [r3, #18]
            {
 800196e:	e6f1      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
                FOC_Clear(M1);
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff fdc1 	bl	80014f8 <FOC_Clear>
                PQD_Clear(pMPM[M1]);
 8001976:	6828      	ldr	r0, [r5, #0]
 8001978:	f004 f9e4 	bl	8005d44 <PQD_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800197c:	2300      	movs	r3, #0
 800197e:	83e3      	strh	r3, [r4, #30]
 8001980:	e6e8      	b.n	8001754 <TSK_MediumFrequencyTaskM1+0x34>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8001982:	6830      	ldr	r0, [r6, #0]
 8001984:	2103      	movs	r1, #3
 8001986:	f005 f863 	bl	8006a50 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 800198a:	490c      	ldr	r1, [pc, #48]	@ (80019bc <TSK_MediumFrequencyTaskM1+0x29c>)
 800198c:	6830      	ldr	r0, [r6, #0]
 800198e:	f005 f84b 	bl	8006a28 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff fe8c 	bl	80016b0 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fe8b 	bl	80016b4 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800199e:	6830      	ldr	r0, [r6, #0]
 80019a0:	f005 f8e2 	bl	8006b68 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <TSK_MediumFrequencyTaskM1+0x298>)
 80019a6:	f7ff fb89 	bl	80010bc <MCI_ExecBufferedCommands>
 80019aa:	2306      	movs	r3, #6
 80019ac:	e76b      	b.n	8001886 <TSK_MediumFrequencyTaskM1+0x166>
 80019ae:	bf00      	nop
 80019b0:	20000110 	.word	0x20000110
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000724 	.word	0x20000724
 80019bc:	20000090 	.word	0x20000090
 80019c0:	20000768 	.word	0x20000768
 80019c4:	2000000c 	.word	0x2000000c
 80019c8:	20000770 	.word	0x20000770
 80019cc:	20000294 	.word	0x20000294
 80019d0:	20000074 	.word	0x20000074

080019d4 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <MC_Scheduler+0x78>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d000      	beq.n	80019de <MC_Scheduler+0xa>
 80019dc:	4770      	bx	lr
{
 80019de:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 80019e0:	4c1b      	ldr	r4, [pc, #108]	@ (8001a50 <MC_Scheduler+0x7c>)
 80019e2:	8823      	ldrh	r3, [r4, #0]
 80019e4:	b19b      	cbz	r3, 8001a0e <MC_Scheduler+0x3a>
      hMFTaskCounterM1--;
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 80019ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001a54 <MC_Scheduler+0x80>)
      hMFTaskCounterM1--;
 80019ec:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80019ee:	8813      	ldrh	r3, [r2, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	b11b      	cbz	r3, 80019fc <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 80019f4:	8813      	ldrh	r3, [r2, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80019fc:	4a16      	ldr	r2, [pc, #88]	@ (8001a58 <MC_Scheduler+0x84>)
 80019fe:	8813      	ldrh	r3, [r2, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b11b      	cbz	r3, 8001a0c <MC_Scheduler+0x38>
      hStopPermanencyCounterM1--;
 8001a04:	8813      	ldrh	r3, [r2, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	8013      	strh	r3, [r2, #0]
}
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001a0e:	4d13      	ldr	r5, [pc, #76]	@ (8001a5c <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 8001a10:	f7ff fe86 	bl	8001720 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001a14:	f7ff fb16 	bl	8001044 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001a1e:	6883      	ldr	r3, [r0, #8]
 8001a20:	4798      	blx	r3
 8001a22:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001a24:	b130      	cbz	r0, 8001a34 <MC_Scheduler+0x60>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001a26:	4629      	mov	r1, r5
 8001a28:	220a      	movs	r2, #10
 8001a2a:	f851 0b08 	ldr.w	r0, [r1], #8
 8001a2e:	6803      	ldr	r3, [r0, #0]
 8001a30:	4798      	blx	r3
 8001a32:	b908      	cbnz	r0, 8001a38 <MC_Scheduler+0x64>
{
 8001a34:	2301      	movs	r3, #1
 8001a36:	e7d8      	b.n	80019ea <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f000 fa4d 	bl	8001ed8 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001a3e:	6828      	ldr	r0, [r5, #0]
 8001a40:	89ea      	ldrh	r2, [r5, #14]
 8001a42:	6846      	ldr	r6, [r0, #4]
 8001a44:	68a9      	ldr	r1, [r5, #8]
 8001a46:	230a      	movs	r3, #10
 8001a48:	47b0      	blx	r6
 8001a4a:	e7f3      	b.n	8001a34 <MC_Scheduler+0x60>
 8001a4c:	20000760 	.word	0x20000760
 8001a50:	20000766 	.word	0x20000766
 8001a54:	20000764 	.word	0x20000764
 8001a58:	20000762 	.word	0x20000762
 8001a5c:	20000484 	.word	0x20000484

08001a60 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_aux_Inputs; /* Only if sensorless aux */
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001a64:	4c3d      	ldr	r4, [pc, #244]	@ (8001b5c <TSK_HighFrequencyTask+0xfc>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001a66:	f8df 8120 	ldr.w	r8, [pc, #288]	@ 8001b88 <TSK_HighFrequencyTask+0x128>
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001a6a:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001a6e:	b088      	sub	sp, #32
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8001a70:	9005      	str	r0, [sp, #20]
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8001a72:	483b      	ldr	r0, [pc, #236]	@ (8001b60 <TSK_HighFrequencyTask+0x100>)
 8001a74:	f003 fe32 	bl	80056dc <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001a78:	4b3a      	ldr	r3, [pc, #232]	@ (8001b64 <TSK_HighFrequencyTask+0x104>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	f004 ffd6 	bl	8006a2c <STC_GetSpeedSensor>
 8001a80:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001a82:	f004 ff6f 	bl	8006964 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001a86:	a902      	add	r1, sp, #8
  hElAngle = SPD_GetElAngle(speedHandle);
 8001a88:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001a8a:	f8d8 0000 	ldr.w	r0, [r8]
 8001a8e:	f000 faff 	bl	8002090 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001a92:	9802      	ldr	r0, [sp, #8]
 8001a94:	f7ff fc22 	bl	80012dc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001a98:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001a9a:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001a9c:	f7ff fc94 	bl	80013c8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001aa0:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <TSK_HighFrequencyTask+0x108>)
 8001aa2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001aa6:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001aa8:	b200      	sxth	r0, r0
 8001aaa:	1a09      	subs	r1, r1, r0
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	f004 f8ed 	bl	8005c8c <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001ab2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8001ab6:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001aba:	1ac9      	subs	r1, r1, r3
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <TSK_HighFrequencyTask+0x10c>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001abe:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	f004 f8e3 	bl	8005c8c <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001ac6:	f8ad 6004 	strh.w	r6, [sp, #4]
 8001aca:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001ace:	9901      	ldr	r1, [sp, #4]
 8001ad0:	4827      	ldr	r0, [pc, #156]	@ (8001b70 <TSK_HighFrequencyTask+0x110>)
 8001ad2:	f003 fd43 	bl	800555c <Circle_Limitation>
 8001ad6:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001ad8:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001ada:	9601      	str	r6, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001adc:	f004 ff4a 	bl	8006974 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	9801      	ldr	r0, [sp, #4]
 8001ae4:	f7ff fcb2 	bl	800144c <MCM_Rev_Park>
 8001ae8:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001aea:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001aee:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001af0:	f000 fad0 	bl	8002094 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001af8:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001afa:	e9c4 2300 	strd	r2, r3, [r4]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8001afe:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Iqd = Iqd;
 8001b00:	9a00      	ldr	r2, [sp, #0]
  FOCVars[M1].hElAngle = hElAngle;
 8001b02:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 8001b04:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 8001b06:	f8c4 6016 	str.w	r6, [r4, #22]
  FOCVars[M1].Iqd = Iqd;
 8001b0a:	60e2      	str	r2, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001b0c:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 8001b10:	d019      	beq.n	8001b46 <TSK_HighFrequencyTask+0xe6>
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001b12:	4818      	ldr	r0, [pc, #96]	@ (8001b74 <TSK_HighFrequencyTask+0x114>)
    STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 8001b14:	9306      	str	r3, [sp, #24]
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001b16:	f003 fd19 	bl	800554c <VBS_GetAvBusVoltage_d>
    (void)STO_CR_CalcElAngle (&STO_CR_M1, &STO_aux_Inputs);
 8001b1a:	a905      	add	r1, sp, #20
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001b1c:	4603      	mov	r3, r0
    (void)STO_CR_CalcElAngle (&STO_CR_M1, &STO_aux_Inputs);
 8001b1e:	4816      	ldr	r0, [pc, #88]	@ (8001b78 <TSK_HighFrequencyTask+0x118>)
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8001b20:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)STO_CR_CalcElAngle (&STO_CR_M1, &STO_aux_Inputs);
 8001b24:	f005 f828 	bl	8006b78 <STO_CR_CalcElAngle>
    STO_CR_CalcAvrgElSpeedDpp (&STO_CR_M1);
 8001b28:	4813      	ldr	r0, [pc, #76]	@ (8001b78 <TSK_HighFrequencyTask+0x118>)
 8001b2a:	f005 fb4d 	bl	80071c8 <STO_CR_CalcAvrgElSpeedDpp>
  GLOBAL_TIMESTAMP++;
 8001b2e:	4a13      	ldr	r2, [pc, #76]	@ (8001b7c <TSK_HighFrequencyTask+0x11c>)
  if (0U == MCPA_UART_A.Mark)
 8001b30:	4813      	ldr	r0, [pc, #76]	@ (8001b80 <TSK_HighFrequencyTask+0x120>)
  GLOBAL_TIMESTAMP++;
 8001b32:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001b34:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8001b38:	3301      	adds	r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001b3c:	b941      	cbnz	r1, 8001b50 <TSK_HighFrequencyTask+0xf0>
}
 8001b3e:	2000      	movs	r0, #0
 8001b40:	b008      	add	sp, #32
 8001b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001b46:	480f      	ldr	r0, [pc, #60]	@ (8001b84 <TSK_HighFrequencyTask+0x124>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f7ff faab 	bl	80010a4 <MCI_FaultProcessing>
 8001b4e:	e7ee      	b.n	8001b2e <TSK_HighFrequencyTask+0xce>
    MCPA_dataLog (&MCPA_UART_A);
 8001b50:	f003 fecc 	bl	80058ec <MCPA_dataLog>
}
 8001b54:	2000      	movs	r0, #0
 8001b56:	b008      	add	sp, #32
 8001b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b5c:	20000770 	.word	0x20000770
 8001b60:	20000090 	.word	0x20000090
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	20000010 	.word	0x20000010
 8001b74:	2000002c 	.word	0x2000002c
 8001b78:	20000110 	.word	0x20000110
 8001b7c:	20001968 	.word	0x20001968
 8001b80:	20000458 	.word	0x20000458
 8001b84:	20000724 	.word	0x20000724
 8001b88:	20000768 	.word	0x20000768

08001b8c <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001b8e:	4f20      	ldr	r7, [pc, #128]	@ (8001c10 <TSK_SafetyTask_PWMOFF+0x84>)
{
 8001b90:	4604      	mov	r4, r0
  CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[bMotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001b92:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8001b96:	f000 fc23 	bl	80023e0 <PWMC_IsFaultOccurred>
 8001b9a:	4605      	mov	r5, r0
                                                    (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if (M1 == bMotor)
 8001b9c:	b344      	cbz	r4, 8001bf0 <TSK_SafetyTask_PWMOFF+0x64>
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001b9e:	4e1d      	ldr	r6, [pc, #116]	@ (8001c14 <TSK_SafetyTask_PWMOFF+0x88>)
 8001ba0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001ba4:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8001ba8:	43ea      	mvns	r2, r5
 8001baa:	4630      	mov	r0, r6
 8001bac:	b292      	uxth	r2, r2
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7ff fa78 	bl	80010a4 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f7ff fb0b 	bl	80011d0 <MCI_GetFaultState>
 8001bba:	b1c0      	cbz	r0, 8001bee <TSK_SafetyTask_PWMOFF+0x62>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001bbe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001bc2:	b110      	cbz	r0, 8001bca <TSK_SafetyTask_PWMOFF+0x3e>
    {
      EAC_SetRestartState(pEAC[bMotor], false);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f003 fd41 	bl	800564c <EAC_SetRestartState>
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001bca:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8001bce:	f000 fbdb 	bl	8002388 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8001bd2:	4812      	ldr	r0, [pc, #72]	@ (8001c1c <TSK_SafetyTask_PWMOFF+0x90>)
 8001bd4:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001bd8:	b9b3      	cbnz	r3, 8001c08 <TSK_SafetyTask_PWMOFF+0x7c>
    }
    else
    {
      /* Nothing to do */
    }
    FOC_Clear(bMotor);
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff fc8c 	bl	80014f8 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <TSK_SafetyTask_PWMOFF+0x94>)
 8001be2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001bea:	f004 b8ab 	b.w	8005d44 <PQD_Clear>
}
 8001bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001bf0:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <TSK_SafetyTask_PWMOFF+0x98>)
 8001bf2:	f001 fc9d 	bl	8003530 <RCM_ExecRegularConv>
 8001bf6:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001bf8:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001bfa:	f004 fe7d 	bl	80068f8 <RVBS_CalcAvVbus>
 8001bfe:	f020 0008 	bic.w	r0, r0, #8
 8001c02:	4328      	orrs	r0, r5
 8001c04:	b285      	uxth	r5, r0
 8001c06:	e7ca      	b.n	8001b9e <TSK_SafetyTask_PWMOFF+0x12>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001c08:	f003 ff30 	bl	8005a6c <MCPA_flushDataLog>
 8001c0c:	e7e5      	b.n	8001bda <TSK_SafetyTask_PWMOFF+0x4e>
 8001c0e:	bf00      	nop
 8001c10:	20000768 	.word	0x20000768
 8001c14:	20000724 	.word	0x20000724
 8001c18:	2000076c 	.word	0x2000076c
 8001c1c:	20000458 	.word	0x20000458
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000048 	.word	0x20000048
 8001c28:	2000002c 	.word	0x2000002c

08001c2c <TSK_SafetyTask>:
{
 8001c2c:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <TSK_SafetyTask+0x1c>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d000      	beq.n	8001c38 <TSK_SafetyTask+0xc>
}
 8001c36:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff ffa7 	bl	8001b8c <TSK_SafetyTask_PWMOFF>
}
 8001c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001c42:	f001 bcab 	b.w	800359c <RCM_ExecUserConv>
 8001c46:	bf00      	nop
 8001c48:	20000760 	.word	0x20000760

08001c4c <MC_RunMotorControlTasks>:
{
 8001c4c:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8001c4e:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <MC_RunMotorControlTasks+0x14>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b903      	cbnz	r3, 8001c56 <MC_RunMotorControlTasks+0xa>
}
 8001c54:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001c56:	f7ff febd 	bl	80019d4 <MC_Scheduler>
    TSK_SafetyTask();
 8001c5a:	f7ff ffe7 	bl	8001c2c <TSK_SafetyTask>
}
 8001c5e:	bd08      	pop	{r3, pc}
 8001c60:	20000760 	.word	0x20000760

08001c64 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001c64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <TSK_HardwareFaultTask+0x18>)
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	f004 fa1d 	bl	80060a8 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001c72:	4803      	ldr	r0, [pc, #12]	@ (8001c80 <TSK_HardwareFaultTask+0x1c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	2180      	movs	r1, #128	@ 0x80
 8001c78:	f7ff ba14 	b.w	80010a4 <MCI_FaultProcessing>
 8001c7c:	20000768 	.word	0x20000768
 8001c80:	20000724 	.word	0x20000724

08001c84 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001c84:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c86:	4a35      	ldr	r2, [pc, #212]	@ (8001d5c <mc_lock_pins+0xd8>)
 8001c88:	4835      	ldr	r0, [pc, #212]	@ (8001d60 <mc_lock_pins+0xdc>)
 8001c8a:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c8e:	f44f 7400 	mov.w	r4, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c92:	61d1      	str	r1, [r2, #28]
 8001c94:	b08c      	sub	sp, #48	@ 0x30
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c96:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c98:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c9a:	69d3      	ldr	r3, [r2, #28]
 8001c9c:	930b      	str	r3, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c9e:	f44f 7580 	mov.w	r5, #256	@ 0x100
  (void) temp;
 8001ca2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ca4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ca6:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ca8:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001caa:	69d3      	ldr	r3, [r2, #28]
 8001cac:	930a      	str	r3, [sp, #40]	@ 0x28
  (void) temp;
 8001cae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d64 <mc_lock_pins+0xe0>)
 8001cb2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cb4:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cb6:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cb8:	69d8      	ldr	r0, [r3, #28]
 8001cba:	9009      	str	r0, [sp, #36]	@ 0x24
  (void) temp;
 8001cbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cbe:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cc0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cc2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cc4:	69d9      	ldr	r1, [r3, #28]
 8001cc6:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cc8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ccc:	f44f 31a0 	mov.w	r1, #81920	@ 0x14000
  (void) temp;
 8001cd0:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cd2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cd4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cd6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cd8:	69d1      	ldr	r1, [r2, #28]
 8001cda:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cdc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ce0:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8001ce4:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ce6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ce8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cea:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cec:	69d9      	ldr	r1, [r3, #28]
 8001cee:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cf0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cf4:	f44f 31c0 	mov.w	r1, #98304	@ 0x18000
  (void) temp;
 8001cf8:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cfa:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cfc:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cfe:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001d00:	69d1      	ldr	r1, [r2, #28]
 8001d02:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001d04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d08:	f44f 3190 	mov.w	r1, #73728	@ 0x12000
  (void) temp;
 8001d0c:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d0e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001d10:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d12:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001d14:	69d2      	ldr	r2, [r2, #28]
 8001d16:	9204      	str	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001d18:	2001      	movs	r0, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d1a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  (void) temp;
 8001d1e:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d20:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001d22:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d24:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001d26:	69d9      	ldr	r1, [r3, #28]
 8001d28:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001d2a:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d2c:	490e      	ldr	r1, [pc, #56]	@ (8001d68 <mc_lock_pins+0xe4>)
  (void) temp;
 8001d2e:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d30:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001d32:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d34:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <mc_lock_pins+0xe8>)
  (void) temp;
 8001d3c:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d3e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001d40:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d42:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001d44:	69d9      	ldr	r1, [r3, #28]
 8001d46:	9101      	str	r1, [sp, #4]
  (void) temp;
 8001d48:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d4a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001d4c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001d4e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001d54:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001d56:	b00c      	add	sp, #48	@ 0x30
 8001d58:	bc30      	pop	{r4, r5}
 8001d5a:	4770      	bx	lr
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	00010100 	.word	0x00010100
 8001d64:	40020000 	.word	0x40020000
 8001d68:	00010002 	.word	0x00010002
 8001d6c:	40020800 	.word	0x40020800

08001d70 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8001d74:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001d78:	4b31      	ldr	r3, [pc, #196]	@ (8001e40 <RI_SetRegCommandParser+0xd0>)
{
 8001d7a:	b089      	sub	sp, #36	@ 0x24
    uint16_t size = 0U;
 8001d7c:	f04f 0900 	mov.w	r9, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001d80:	9306      	str	r3, [sp, #24]
    uint8_t number_of_item =0;
    pHandle->txLength = 0;

    while (rxLength > 0)
 8001d82:	454c      	cmp	r4, r9
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001d84:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <RI_SetRegCommandParser+0xd4>)
    uint16_t size = 0U;
 8001d86:	f8ad 9016 	strh.w	r9, [sp, #22]
    uint8_t * txData = pHandle->txBuffer;
 8001d8a:	e9d0 c601 	ldrd	ip, r6, [r0, #4]
{
 8001d8e:	4607      	mov	r7, r0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8001d90:	9307      	str	r3, [sp, #28]
    pHandle->txLength = 0;
 8001d92:	f8a0 900e 	strh.w	r9, [r0, #14]
    while (rxLength > 0)
 8001d96:	dd47      	ble.n	8001e28 <RI_SetRegCommandParser+0xb8>
 8001d98:	eb06 0801 	add.w	r8, r6, r1
  uint8_t retVal = MCP_CMD_OK;
 8001d9c:	f8cd 900c 	str.w	r9, [sp, #12]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8001da0:	f1c6 0a01 	rsb	sl, r6, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8001da4:	f10c 0502 	add.w	r5, ip, #2
      regID = *dataElementID & REG_MASK;
 8001da8:	f8bc c000 	ldrh.w	ip, [ip]
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001dac:	fa5f f18c 	uxtb.w	r1, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001db0:	3c02      	subs	r4, #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001db2:	f001 0b07 	and.w	fp, r1, #7
 8001db6:	f10d 0920 	add.w	r9, sp, #32
      if (motorID > NBR_OF_MOTORS)
 8001dba:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001dbe:	fa0f fe84 	sxth.w	lr, r4
 8001dc2:	f10d 0316 	add.w	r3, sp, #22
 8001dc6:	462a      	mov	r2, r5
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8001dc8:	b2a4      	uxth	r4, r4
      regID = *dataElementID & REG_MASK;
 8001dca:	f02c 0007 	bic.w	r0, ip, #7
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001dce:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8001dd2:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8001dd6:	d11b      	bne.n	8001e10 <RI_SetRegCommandParser+0xa0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8001dd8:	f8cd e000 	str.w	lr, [sp]
 8001ddc:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8001de0:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8001de2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8001de6:	eb06 030a 	add.w	r3, r6, sl
 8001dea:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8001dec:	1aa4      	subs	r4, r4, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8001dee:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8001df0:	b224      	sxth	r4, r4
        rxData = rxData+size;
 8001df2:	eb05 0c02 	add.w	ip, r5, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8001df6:	d013      	beq.n	8001e20 <RI_SetRegCommandParser+0xb0>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8001df8:	4546      	cmp	r6, r8
 8001dfa:	d00d      	beq.n	8001e18 <RI_SetRegCommandParser+0xa8>
          {
            *txData = accessResult;
 8001dfc:	f806 0b01 	strb.w	r0, [r6], #1
            txData = txData+1;
            pHandle->txLength++;
 8001e00:	89fb      	ldrh	r3, [r7, #14]
 8001e02:	3301      	adds	r3, #1
 8001e04:	81fb      	strh	r3, [r7, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001e06:	b1a0      	cbz	r0, 8001e32 <RI_SetRegCommandParser+0xc2>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8001e08:	2807      	cmp	r0, #7
 8001e0a:	d001      	beq.n	8001e10 <RI_SetRegCommandParser+0xa0>
 8001e0c:	280a      	cmp	r0, #10
 8001e0e:	d10e      	bne.n	8001e2e <RI_SetRegCommandParser+0xbe>
        retVal = MCP_CMD_NOK;
 8001e10:	2001      	movs	r0, #1
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001e12:	b009      	add	sp, #36	@ 0x24
 8001e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8001e18:	2008      	movs	r0, #8
}
 8001e1a:	b009      	add	sp, #36	@ 0x24
 8001e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d1e9      	bne.n	8001df8 <RI_SetRegCommandParser+0x88>
    if (MCP_CMD_OK == retVal)
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d1f4      	bne.n	8001e12 <RI_SetRegCommandParser+0xa2>
      pHandle->txLength = 0;
 8001e28:	2000      	movs	r0, #0
 8001e2a:	81f8      	strh	r0, [r7, #14]
 8001e2c:	e7f1      	b.n	8001e12 <RI_SetRegCommandParser+0xa2>
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	9303      	str	r3, [sp, #12]
    while (rxLength > 0)
 8001e32:	2c00      	cmp	r4, #0
 8001e34:	dcb6      	bgt.n	8001da4 <RI_SetRegCommandParser+0x34>
 8001e36:	9803      	ldr	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	d0f5      	beq.n	8001e28 <RI_SetRegCommandParser+0xb8>
 8001e3c:	e7e9      	b.n	8001e12 <RI_SetRegCommandParser+0xa2>
 8001e3e:	bf00      	nop
 8001e40:	08002419 	.word	0x08002419
 8001e44:	0800251d 	.word	0x0800251d

08001e48 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8001e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e4c:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8001e54:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8001e56:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <RI_GetRegCommandParser+0x88>)
 8001e5c:	9304      	str	r3, [sp, #16]
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <RI_GetRegCommandParser+0x8c>)
    uint8_t * rxData = pHandle->rxBuffer;
 8001e60:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8001e64:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8001e66:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8001e68:	f1b8 0f00 	cmp.w	r8, #0
 8001e6c:	d016      	beq.n	8001e9c <RI_GetRegCommandParser+0x54>
 8001e6e:	4607      	mov	r7, r0
 8001e70:	b20d      	sxth	r5, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8001e72:	464c      	mov	r4, r9
    {
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength - MCP_ID_SIZE;
      rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID

      regID = *dataElementID & REG_MASK;
 8001e74:	f834 cb02 	ldrh.w	ip, [r4], #2
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8001e78:	fa5f f18c 	uxtb.w	r1, ip
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001e7c:	f001 0e07 	and.w	lr, r1, #7
 8001e80:	f10d 0a18 	add.w	sl, sp, #24
      if (motorID > NBR_OF_MOTORS)
 8001e84:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001e88:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8001e8a:	f02c 0007 	bic.w	r0, ip, #7
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001e8e:	f10d 030e 	add.w	r3, sp, #14
 8001e92:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8001e96:	f001 0138 	and.w	r1, r1, #56	@ 0x38
      if (motorID > NBR_OF_MOTORS)
 8001e9a:	d003      	beq.n	8001ea4 <RI_GetRegCommandParser+0x5c>
        retVal = MCP_CMD_NOK;
 8001e9c:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8001e9e:	b006      	add	sp, #24
 8001ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8001ea4:	9500      	str	r5, [sp, #0]
 8001ea6:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8001eaa:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8001eac:	eba8 0304 	sub.w	r3, r8, r4
    while (rxLength > 0U)
 8001eb0:	fa19 f383 	uxtah	r3, r9, r3
 8001eb4:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	d1f1      	bne.n	8001e9e <RI_GetRegCommandParser+0x56>
          txData = txData+size;
 8001eba:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8001ebe:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8001ec0:	1a6d      	subs	r5, r5, r1
          pHandle->txLength += size;
 8001ec2:	440a      	add	r2, r1
          txData = txData+size;
 8001ec4:	440e      	add	r6, r1
          pHandle->txLength += size;
 8001ec6:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8001ec8:	b22d      	sxth	r5, r5
    while (rxLength > 0U)
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1d2      	bne.n	8001e74 <RI_GetRegCommandParser+0x2c>
 8001ece:	e7e6      	b.n	8001e9e <RI_GetRegCommandParser+0x56>
 8001ed0:	080029d9 	.word	0x080029d9
 8001ed4:	08002b0d 	.word	0x08002b0d

08001ed8 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001edc:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001ede:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001ee0:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001ee4:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001ee6:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001ee8:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001eec:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001eee:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001ef0:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001ef4:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001ef8:	b291      	uxth	r1, r2
{
 8001efa:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001efc:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8001efe:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8001f02:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8001f04:	d045      	beq.n	8001f92 <MCP_ReceivedPacket+0xba>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8001f06:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001f08:	4f50      	ldr	r7, [pc, #320]	@ (800204c <MCP_ReceivedPacket+0x174>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001f0a:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8001f14:	2500      	movs	r5, #0

    switch (command)
 8001f16:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001f1a:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8001f1c:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 8001f20:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8001f22:	d82a      	bhi.n	8001f7a <MCP_ReceivedPacket+0xa2>
 8001f24:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8001f28:	d81e      	bhi.n	8001f68 <MCP_ReceivedPacket+0x90>
 8001f2a:	e8df f00c 	tbb	[pc, ip]
 8001f2e:	1d55      	.short	0x1d55
 8001f30:	1d1d1d1d 	.word	0x1d1d1d1d
 8001f34:	1d5d1d1d 	.word	0x1d5d1d1d
 8001f38:	1d1d1d1d 	.word	0x1d1d1d1d
 8001f3c:	1d621d1d 	.word	0x1d621d1d
 8001f40:	1d1d1d1d 	.word	0x1d1d1d1d
 8001f44:	1d671d1d 	.word	0x1d671d1d
 8001f48:	1d1d1d1d 	.word	0x1d1d1d1d
 8001f4c:	1d411d1d 	.word	0x1d411d1d
 8001f50:	1d1d1d1d 	.word	0x1d1d1d1d
 8001f54:	1d471d1d 	.word	0x1d471d1d
 8001f58:	1d1d1d1d 	.word	0x1d1d1d1d
 8001f5c:	1d3d1d1d 	.word	0x1d3d1d1d
 8001f60:	1d1d1d1d 	.word	0x1d1d1d1d
 8001f64:	1d1d      	.short	0x1d1d
 8001f66:	4f          	.byte	0x4f
 8001f67:	00          	.byte	0x00
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001f6c:	68a2      	ldr	r2, [r4, #8]
 8001f6e:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8001f70:	89e3      	ldrh	r3, [r4, #14]
 8001f72:	3301      	adds	r3, #1
 8001f74:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8001f76:	b003      	add	sp, #12
 8001f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 8001f7a:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8001f7e:	d042      	beq.n	8002006 <MCP_ReceivedPacket+0x12e>
 8001f80:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8001f84:	d1f0      	bne.n	8001f68 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8001f86:	4638      	mov	r0, r7
 8001f88:	f7ff f99e 	bl	80012c8 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001f8c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001f8e:	4628      	mov	r0, r5
        break;
 8001f90:	e7ec      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8001f92:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8001f96:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001f98:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8001f9c:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8001f9e:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8001fa0:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8001fa2:	d941      	bls.n	8002028 <MCP_ReceivedPacket+0x150>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8001fa4:	200d      	movs	r0, #13
 8001fa6:	e7e1      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8001fa8:	4638      	mov	r0, r7
 8001faa:	f7ff f8c3 	bl	8001134 <MCI_GetSTMState>
 8001fae:	b398      	cbz	r0, 8002018 <MCP_ReceivedPacket+0x140>
          (void)MCI_StopMotor(pMCI);
 8001fb0:	4638      	mov	r0, r7
 8001fb2:	f7ff f8df 	bl	8001174 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001fb6:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001fb8:	2000      	movs	r0, #0
 8001fba:	e7d7      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8001fbc:	4638      	mov	r0, r7
 8001fbe:	f7ff f8b9 	bl	8001134 <MCI_GetSTMState>
 8001fc2:	2806      	cmp	r0, #6
 8001fc4:	d03c      	beq.n	8002040 <MCP_ReceivedPacket+0x168>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001fc6:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001fc8:	2000      	movs	r0, #0
 8001fca:	e7cf      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8001fcc:	4638      	mov	r0, r7
 8001fce:	f7ff f8ed 	bl	80011ac <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001fd2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001fd4:	2000      	movs	r0, #0
        break;
 8001fd6:	e7c9      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8001fd8:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8001fda:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8001fdc:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8001fde:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8001fe0:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001fe2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8001fe4:	2000      	movs	r0, #0
        break;
 8001fe6:	e7c1      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff fec1 	bl	8001d70 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001fee:	89e3      	ldrh	r3, [r4, #14]
        break;
 8001ff0:	e7bc      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7ff ff28 	bl	8001e48 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8001ff8:	89e3      	ldrh	r3, [r4, #14]
        break;
 8001ffa:	e7b7      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
        MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 8001ffc:	4638      	mov	r0, r7
 8001ffe:	f7ff f89f 	bl	8001140 <MCI_StartWithPolarizationMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002002:	89e3      	ldrh	r3, [r4, #14]
 8002004:	e7b2      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8002006:	68a3      	ldr	r3, [r4, #8]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4631      	mov	r1, r6
 800200c:	f104 030e 	add.w	r3, r4, #14
 8002010:	f7ff f814 	bl	800103c <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002014:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002016:	e7a9      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002018:	4638      	mov	r0, r7
 800201a:	f7ff f891 	bl	8001140 <MCI_StartWithPolarizationMotor>
 800201e:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002022:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002024:	b2c0      	uxtb	r0, r0
 8002026:	e7a1      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <MCP_ReceivedPacket+0x178>)
 800202a:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 800202e:	b15d      	cbz	r5, 8002048 <MCP_ReceivedPacket+0x170>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002030:	68a3      	ldr	r3, [r4, #8]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	4631      	mov	r1, r6
 8002036:	f104 030e 	add.w	r3, r4, #14
 800203a:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800203c:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 800203e:	e795      	b.n	8001f6c <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 8002040:	4638      	mov	r0, r7
 8002042:	f7ff f8d9 	bl	80011f8 <MCI_StopRamp>
 8002046:	e7be      	b.n	8001fc6 <MCP_ReceivedPacket+0xee>
 8002048:	462b      	mov	r3, r5
 800204a:	e7ab      	b.n	8001fa4 <MCP_ReceivedPacket+0xcc>
 800204c:	20000724 	.word	0x20000724
 8002050:	20000798 	.word	0x20000798

08002054 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002054:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002056:	f002 fb93 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 800205a:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <MX_MotorControl_Init+0x30>)
 800205c:	fba3 3000 	umull	r3, r0, r3, r0
 8002060:	09c0      	lsrs	r0, r0, #7
 8002062:	f002 f8e9 	bl	8004238 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <MX_MotorControl_Init+0x34>)
 8002068:	2200      	movs	r2, #0
 800206a:	6819      	ldr	r1, [r3, #0]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f002 f898 	bl	80041a4 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002074:	4805      	ldr	r0, [pc, #20]	@ (800208c <MX_MotorControl_Init+0x38>)
 8002076:	f7ff fa79 	bl	800156c <MCboot>
  mc_lock_pins();
}
 800207a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 800207e:	f7ff be01 	b.w	8001c84 <mc_lock_pins>
 8002082:	bf00      	nop
 8002084:	10624dd3 	.word	0x10624dd3
 8002088:	20000528 	.word	0x20000528
 800208c:	20001924 	.word	0x20001924

08002090 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002090:	6803      	ldr	r3, [r0, #0]
 8002092:	4718      	bx	r3

08002094 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002094:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002096:	f8b0 4072 	ldrh.w	r4, [r0, #114]	@ 0x72
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800209a:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800209e:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80020a2:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80020a4:	fb04 fc0c 	mul.w	ip, r4, ip
 80020a8:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80020ac:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 80020b0:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 80020b4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80020b8:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 80020bc:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 80020c0:	1c55      	adds	r5, r2, #1
{
 80020c2:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80020c4:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80020c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80020cc:	ea4f 0161 	mov.w	r1, r1, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 80020d0:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    if (wY < 0)
 80020d4:	f2c0 8094 	blt.w	8002200 <PWMC_SetPhaseVoltage+0x16c>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80020d8:	1c5d      	adds	r5, r3, #1
 80020da:	db64      	blt.n	80021a6 <PWMC_SetPhaseVoltage+0x112>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80020dc:	ebb1 010e 	subs.w	r1, r1, lr
 80020e0:	bf44      	itt	mi
 80020e2:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80020e6:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bfbc      	itt	lt
 80020ee:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80020f2:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 80020f6:	2a00      	cmp	r2, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80020f8:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80020fc:	bfb8      	it	lt
 80020fe:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8002102:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
        pHandle->Sector = SECTOR_2;
 8002106:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 800210a:	bfb8      	it	lt
 800210c:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 8002110:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 8002114:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002118:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 800211c:	2c00      	cmp	r4, #0
 800211e:	f040 8097 	bne.w	8002250 <PWMC_SetPhaseVoltage+0x1bc>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002122:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002126:	fa1f fc81 	uxth.w	ip, r1
        pHandle->highDuty = (uint16_t)wTimePhC;
 800212a:	b294      	uxth	r4, r2
            pHandle->highDuty = 2U;
 800212c:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 8002130:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
            pHandle->lowDuty = 0U;
 8002134:	f8a0 e058 	strh.w	lr, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002138:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800213c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002140:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002144:	b289      	uxth	r1, r1
 8002146:	b29b      	uxth	r3, r3
 8002148:	b292      	uxth	r2, r2
    if (1U == pHandle->DTTest)
 800214a:	2c01      	cmp	r4, #1
            pHandle->midDuty = 1U;
 800214c:	f8a0 c05a 	strh.w	ip, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002150:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002154:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002158:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    if (1U == pHandle->DTTest)
 800215c:	d11e      	bne.n	800219c <PWMC_SetPhaseVoltage+0x108>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 800215e:	f9b0 5062 	ldrsh.w	r5, [r0, #98]	@ 0x62
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002162:	f8b0 4074 	ldrh.w	r4, [r0, #116]	@ 0x74
      if (pHandle->Ia > 0)
 8002166:	2d00      	cmp	r5, #0
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002168:	bfcc      	ite	gt
 800216a:	1909      	addgt	r1, r1, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 800216c:	1b09      	suble	r1, r1, r4
 800216e:	b289      	uxth	r1, r1
 8002170:	f8a0 1050 	strh.w	r1, [r0, #80]	@ 0x50
      }

      if (pHandle->Ib > 0)
 8002174:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	@ 0x64
 8002178:	2900      	cmp	r1, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 800217a:	f9b0 1066 	ldrsh.w	r1, [r0, #102]	@ 0x66
        pHandle->CntPhB += pHandle->DTCompCnt;
 800217e:	bfcc      	ite	gt
 8002180:	191b      	addgt	r3, r3, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002182:	1b1b      	suble	r3, r3, r4
      if (pHandle->Ic > 0)
 8002184:	2900      	cmp	r1, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002186:	b29b      	uxth	r3, r3
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002188:	bfcc      	ite	gt
 800218a:	18a4      	addgt	r4, r4, r2
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 800218c:	1b12      	suble	r2, r2, r4
 800218e:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002192:	bfcc      	ite	gt
 8002194:	f8a0 4054 	strhgt.w	r4, [r0, #84]	@ 0x54
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002198:	f8a0 2054 	strhle.w	r2, [r0, #84]	@ 0x54
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800219c:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800219e:	b003      	add	sp, #12
 80021a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80021a4:	4718      	bx	r3
        if ( wX <= 0 )
 80021a6:	f1bc 0f00 	cmp.w	ip, #0
 80021aa:	dd7f      	ble.n	80022ac <PWMC_SetPhaseVoltage+0x218>
          wTimePhB = wTimePhA + (wZ / 131072);
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bfb8      	it	lt
 80021b0:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80021b4:	ebac 0e0e 	sub.w	lr, ip, lr
          wTimePhB = wTimePhA + (wZ / 131072);
 80021b8:	bfb8      	it	lt
 80021ba:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 80021be:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80021c2:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80021c6:	bfb8      	it	lt
 80021c8:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80021cc:	f890 407f 	ldrb.w	r4, [r0, #127]	@ 0x7f
          pHandle->Sector = SECTOR_1;
 80021d0:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 80021d4:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80021d8:	bfb8      	it	lt
 80021da:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 80021de:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 80021e2:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80021e6:	2c00      	cmp	r4, #0
 80021e8:	f040 80b5 	bne.w	8002356 <PWMC_SetPhaseVoltage+0x2c2>
 80021ec:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
 80021f0:	2d00      	cmp	r5, #0
 80021f2:	f000 80c2 	beq.w	800237a <PWMC_SetPhaseVoltage+0x2e6>
 80021f6:	f04f 0e02 	mov.w	lr, #2
 80021fa:	f04f 0c01 	mov.w	ip, #1
 80021fe:	e795      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
      if (wZ < 0)
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 8002204:	f890 5087 	ldrb.w	r5, [r0, #135]	@ 0x87
      if (wZ < 0)
 8002208:	db74      	blt.n	80022f4 <PWMC_SetPhaseVoltage+0x260>
        if (wX <= 0)
 800220a:	f1bc 0f00 	cmp.w	ip, #0
 800220e:	dd25      	ble.n	800225c <PWMC_SetPhaseVoltage+0x1c8>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002210:	ebb1 010c 	subs.w	r1, r1, ip
 8002214:	bf44      	itt	mi
 8002216:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 800221a:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 800221e:	2a00      	cmp	r2, #0
 8002220:	bfb8      	it	lt
 8002222:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002226:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 800222a:	bfb8      	it	lt
 800222c:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 8002230:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002232:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8002236:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 800223a:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 800223e:	2d00      	cmp	r5, #0
 8002240:	f040 8083 	bne.w	800234a <PWMC_SetPhaseVoltage+0x2b6>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002244:	fa1f fe83 	uxth.w	lr, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002248:	fa1f fc82 	uxth.w	ip, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 800224c:	b28c      	uxth	r4, r1
 800224e:	e76d      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
 8002250:	f04f 0e02 	mov.w	lr, #2
 8002254:	f04f 0c00 	mov.w	ip, #0
 8002258:	2401      	movs	r4, #1
 800225a:	e767      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800225c:	ebbc 0e0e 	subs.w	lr, ip, lr
 8002260:	bf44      	itt	mi
 8002262:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002266:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800226a:	2b00      	cmp	r3, #0
 800226c:	bfb8      	it	lt
 800226e:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002272:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002276:	bfb8      	it	lt
 8002278:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 800227c:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
          wTimePhC = wTimePhB - (wX / 131072);
 8002280:	f1bc 0200 	subs.w	r2, ip, #0
 8002284:	bfb8      	it	lt
 8002286:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800228a:	eb04 41ae 	add.w	r1, r4, lr, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 800228e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002292:	bfb8      	it	lt
 8002294:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8002298:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 800229c:	2d00      	cmp	r5, #0
 800229e:	d066      	beq.n	800236e <PWMC_SetPhaseVoltage+0x2da>
 80022a0:	f04f 0e00 	mov.w	lr, #0
 80022a4:	f04f 0c01 	mov.w	ip, #1
 80022a8:	2402      	movs	r4, #2
 80022aa:	e73f      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
          wTimePhC = wTimePhA - (wY / 131072);
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	bfb8      	it	lt
 80022b0:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 80022b4:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80022b8:	bfb8      	it	lt
 80022ba:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80022be:	eba1 010c 	sub.w	r1, r1, ip
          pHandle->Sector = SECTOR_6;
 80022c2:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
          wTimePhB = wTimePhC + (wX / 131072);
 80022c6:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80022ca:	eb04 41a1 	add.w	r1, r4, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80022ce:	bfb8      	it	lt
 80022d0:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 80022d4:	f890 4087 	ldrb.w	r4, [r0, #135]	@ 0x87
          wTimePhC = wTimePhA - (wY / 131072);
 80022d8:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80022dc:	bfb8      	it	lt
 80022de:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80022e2:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 80022e6:	b3e4      	cbz	r4, 8002362 <PWMC_SetPhaseVoltage+0x2ce>
 80022e8:	f04f 0e01 	mov.w	lr, #1
 80022ec:	f04f 0c02 	mov.w	ip, #2
 80022f0:	2400      	movs	r4, #0
 80022f2:	e71b      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80022f4:	ebb1 010e 	subs.w	r1, r1, lr
 80022f8:	bf44      	itt	mi
 80022fa:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80022fe:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002302:	2b00      	cmp	r3, #0
 8002304:	bfbc      	itt	lt
 8002306:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 800230a:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 800230e:	2a00      	cmp	r2, #0
 8002310:	bfb8      	it	lt
 8002312:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002316:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        pHandle->Sector = SECTOR_5;
 800231a:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 800231e:	bfb8      	it	lt
 8002320:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8002324:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
        wTimePhB = wTimePhA + (wZ / 131072);
 8002328:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 800232c:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002330:	b92d      	cbnz	r5, 800233e <PWMC_SetPhaseVoltage+0x2aa>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002332:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8002336:	fa1f fc81 	uxth.w	ip, r1
          pHandle->highDuty = (uint16_t)wTimePhB;
 800233a:	b29c      	uxth	r4, r3
 800233c:	e6f6      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
 800233e:	f04f 0e01 	mov.w	lr, #1
 8002342:	f04f 0c00 	mov.w	ip, #0
 8002346:	2402      	movs	r4, #2
 8002348:	e6f0      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
 800234a:	f04f 0e00 	mov.w	lr, #0
 800234e:	f04f 0c02 	mov.w	ip, #2
 8002352:	2401      	movs	r4, #1
 8002354:	e6ea      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
 8002356:	f04f 0e02 	mov.w	lr, #2
 800235a:	f04f 0c01 	mov.w	ip, #1
 800235e:	2400      	movs	r4, #0
 8002360:	e6e4      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002362:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhC;
 8002366:	fa1f fc82 	uxth.w	ip, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 800236a:	b29c      	uxth	r4, r3
 800236c:	e6de      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800236e:	fa1f fe82 	uxth.w	lr, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002372:	fa1f fc83 	uxth.w	ip, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002376:	b28c      	uxth	r4, r1
 8002378:	e6d8      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 800237a:	fa1f fe81 	uxth.w	lr, r1
            pHandle->midDuty = (uint16_t)wTimePhB;
 800237e:	fa1f fc83 	uxth.w	ip, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8002382:	b294      	uxth	r4, r2
 8002384:	e6d2      	b.n	800212c <PWMC_SetPhaseVoltage+0x98>
 8002386:	bf00      	nop

08002388 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002388:	6843      	ldr	r3, [r0, #4]
 800238a:	4718      	bx	r3

0800238c <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 800238c:	6883      	ldr	r3, [r0, #8]
 800238e:	4718      	bx	r3

08002390 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002390:	b510      	push	{r4, lr}
 8002392:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002394:	b179      	cbz	r1, 80023b6 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002396:	2901      	cmp	r1, #1
 8002398:	d001      	beq.n	800239e <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 800239a:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 800239c:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800239e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 80023a2:	b16b      	cbz	r3, 80023c0 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f4      	bne.n	800239a <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 80023b0:	68c3      	ldr	r3, [r0, #12]
 80023b2:	4798      	blx	r3
          retVal = true;
 80023b4:	e004      	b.n	80023c0 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 80023b6:	f7ff ffe7 	bl	8002388 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 80023ba:	68e3      	ldr	r3, [r4, #12]
 80023bc:	4620      	mov	r0, r4
 80023be:	4798      	blx	r3
      retVal = true;
 80023c0:	2001      	movs	r0, #1
}
 80023c2:	bd10      	pop	{r4, pc}

080023c4 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80023c4:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 80023c6:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 80023c8:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80023cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023d0:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80023d2:	307a      	adds	r0, #122	@ 0x7a
    pHandle->OverVoltageFlag = true;
 80023d4:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
    pHandle->BrakeActionLock = true;
 80023d8:	f883 c085 	strb.w	ip, [r3, #133]	@ 0x85
}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop

080023e0 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 80023e0:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80023e2:	f890 0083 	ldrb.w	r0, [r0, #131]	@ 0x83
 80023e6:	b1a8      	cbz	r0, 8002414 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 80023ee:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 80023f0:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80023f2:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 80023f6:	b11a      	cbz	r2, 8002400 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    retVal |= MC_OVER_CURR;
 80023fe:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8002400:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 8002404:	b12a      	cbz	r2, 8002412 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8002406:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 800240a:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 800240c:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 800240e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8002412:	4770      	bx	lr
 8002414:	2140      	movs	r1, #64	@ 0x40
 8002416:	e7ec      	b.n	80023f2 <PWMC_IsFaultOccurred+0x12>

08002418 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8002418:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 800241a:	3908      	subs	r1, #8
{
 800241c:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8002420:	2920      	cmp	r1, #32
 8002422:	d812      	bhi.n	800244a <RI_SetRegisterGlobal+0x32>
 8002424:	e8df f001 	tbb	[pc, r1]
 8002428:	11111117 	.word	0x11111117
 800242c:	11111111 	.word	0x11111111
 8002430:	11111121 	.word	0x11111121
 8002434:	11111111 	.word	0x11111111
 8002438:	11111133 	.word	0x11111133
 800243c:	11111111 	.word	0x11111111
 8002440:	1111113d 	.word	0x1111113d
 8002444:	11111111 	.word	0x11111111
 8002448:	51          	.byte	0x51
 8002449:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800244a:	2200      	movs	r2, #0
 800244c:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800244e:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8002450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002454:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8002456:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8002458:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 800245c:	bf14      	ite	ne
 800245e:	2005      	movne	r0, #5
 8002460:	2004      	moveq	r0, #4
}
 8002462:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8002466:	801a      	strh	r2, [r3, #0]
}
 8002468:	4770      	bx	lr
      switch (regID)
 800246a:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800246e:	d04e      	beq.n	800250e <RI_SetRegisterGlobal+0xf6>
 8002470:	d93e      	bls.n	80024f0 <RI_SetRegisterGlobal+0xd8>
 8002472:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002476:	d04a      	beq.n	800250e <RI_SetRegisterGlobal+0xf6>
 8002478:	f641 3258 	movw	r2, #7000	@ 0x1b58
          retVal = MCP_ERROR_UNKNOWN_REG;
 800247c:	4290      	cmp	r0, r2
 800247e:	bf0c      	ite	eq
 8002480:	2004      	moveq	r0, #4
 8002482:	2005      	movne	r0, #5
      *size = 2;
 8002484:	2202      	movs	r2, #2
}
 8002486:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 800248a:	801a      	strh	r2, [r3, #0]
}
 800248c:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 800248e:	2818      	cmp	r0, #24
      *size = 4;
 8002490:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 8002494:	bf14      	ite	ne
 8002496:	2005      	movne	r0, #5
 8002498:	4610      	moveq	r0, r2
}
 800249a:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 800249e:	801a      	strh	r2, [r3, #0]
}
 80024a0:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80024a2:	2101      	movs	r1, #1
 80024a4:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024a6:	f992 0000 	ldrsb.w	r0, [r2]
 80024aa:	b348      	cbz	r0, 8002500 <RI_SetRegisterGlobal+0xe8>
 80024ac:	fa1f f08c 	uxth.w	r0, ip
 80024b0:	e003      	b.n	80024ba <RI_SetRegisterGlobal+0xa2>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80024b2:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024b4:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 80024b8:	b314      	cbz	r4, 8002500 <RI_SetRegisterGlobal+0xe8>
    *size = *size + 1U;
 80024ba:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024be:	4281      	cmp	r1, r0
    *size = *size + 1U;
 80024c0:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80024c4:	d3f5      	bcc.n	80024b2 <RI_SetRegisterGlobal+0x9a>
      retVal = MCP_ERROR_RO_REG;
 80024c6:	2004      	movs	r0, #4
 80024c8:	e7c2      	b.n	8002450 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 80024ca:	8812      	ldrh	r2, [r2, #0]
 80024cc:	3202      	adds	r2, #2
 80024ce:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80024d0:	fa1f fc8c 	uxth.w	ip, ip
 80024d4:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 80024d6:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 80024d8:	d81b      	bhi.n	8002512 <RI_SetRegisterGlobal+0xfa>
        switch (regID)
 80024da:	28a8      	cmp	r0, #168	@ 0xa8
 80024dc:	d0f3      	beq.n	80024c6 <RI_SetRegisterGlobal+0xae>
 80024de:	d813      	bhi.n	8002508 <RI_SetRegisterGlobal+0xf0>
 80024e0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80024e4:	2828      	cmp	r0, #40	@ 0x28
 80024e6:	d0ee      	beq.n	80024c6 <RI_SetRegisterGlobal+0xae>
 80024e8:	2005      	movs	r0, #5
}
 80024ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 80024f4:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80024f8:	bf0c      	ite	eq
 80024fa:	2004      	moveq	r0, #4
 80024fc:	2005      	movne	r0, #5
 80024fe:	e7c1      	b.n	8002484 <RI_SetRegisterGlobal+0x6c>
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002500:	2300      	movs	r3, #0
 8002502:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8002504:	2004      	movs	r0, #4
 8002506:	e7a3      	b.n	8002450 <RI_SetRegisterGlobal+0x38>
 8002508:	28e8      	cmp	r0, #232	@ 0xe8
 800250a:	d1ed      	bne.n	80024e8 <RI_SetRegisterGlobal+0xd0>
 800250c:	e7db      	b.n	80024c6 <RI_SetRegisterGlobal+0xae>
  uint8_t retVal = MCP_CMD_OK;
 800250e:	2000      	movs	r0, #0
 8002510:	e7b8      	b.n	8002484 <RI_SetRegisterGlobal+0x6c>
        *size = 0;
 8002512:	2200      	movs	r2, #0
 8002514:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002516:	200a      	movs	r0, #10
 8002518:	e79a      	b.n	8002450 <RI_SetRegisterGlobal+0x38>
 800251a:	bf00      	nop

0800251c <RI_SetRegisterMotor1>:
{
 800251c:	b530      	push	{r4, r5, lr}
 800251e:	b083      	sub	sp, #12
  switch(typeID)
 8002520:	3908      	subs	r1, #8
{
 8002522:	f9bd c018 	ldrsh.w	ip, [sp, #24]
 8002526:	4696      	mov	lr, r2
 8002528:	461c      	mov	r4, r3
  switch(typeID)
 800252a:	2920      	cmp	r1, #32
 800252c:	d812      	bhi.n	8002554 <RI_SetRegisterMotor1+0x38>
 800252e:	e8df f001 	tbb	[pc, r1]
 8002532:	1116      	.short	0x1116
 8002534:	11111111 	.word	0x11111111
 8002538:	11251111 	.word	0x11251111
 800253c:	11111111 	.word	0x11111111
 8002540:	114d1111 	.word	0x114d1111
 8002544:	11111111 	.word	0x11111111
 8002548:	115b1111 	.word	0x115b1111
 800254c:	11111111 	.word	0x11111111
 8002550:	1111      	.short	0x1111
 8002552:	72          	.byte	0x72
 8002553:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8002554:	2300      	movs	r3, #0
 8002556:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8002558:	2007      	movs	r0, #7
}
 800255a:	b003      	add	sp, #12
 800255c:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 800255e:	2848      	cmp	r0, #72	@ 0x48
 8002560:	f000 818b 	beq.w	800287a <RI_SetRegisterMotor1+0x35e>
 8002564:	2888      	cmp	r0, #136	@ 0x88
 8002566:	f040 817f 	bne.w	8002868 <RI_SetRegisterMotor1+0x34c>
          uint8_t regdata8 = *data;
 800256a:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 800256c:	2b04      	cmp	r3, #4
 800256e:	f000 8194 	beq.w	800289a <RI_SetRegisterMotor1+0x37e>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002572:	2b03      	cmp	r3, #3
 8002574:	f000 81ba 	beq.w	80028ec <RI_SetRegisterMotor1+0x3d0>
  uint8_t retVal = MCP_CMD_OK;
 8002578:	2000      	movs	r0, #0
 800257a:	e176      	b.n	800286a <RI_SetRegisterMotor1+0x34e>
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 800257c:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8002580:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 8002582:	f000 81ee 	beq.w	8002962 <RI_SetRegisterMotor1+0x446>
 8002586:	f200 80b2 	bhi.w	80026ee <RI_SetRegisterMotor1+0x1d2>
 800258a:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 800258e:	f000 81e3 	beq.w	8002958 <RI_SetRegisterMotor1+0x43c>
 8002592:	f240 809b 	bls.w	80026cc <RI_SetRegisterMotor1+0x1b0>
 8002596:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 800259a:	f000 81ff 	beq.w	800299c <RI_SetRegisterMotor1+0x480>
 800259e:	d97f      	bls.n	80026a0 <RI_SetRegisterMotor1+0x184>
 80025a0:	f5b0 6f82 	cmp.w	r0, #1040	@ 0x410
 80025a4:	f000 81e8 	beq.w	8002978 <RI_SetRegisterMotor1+0x45c>
 80025a8:	d955      	bls.n	8002656 <RI_SetRegisterMotor1+0x13a>
 80025aa:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80025ae:	d050      	beq.n	8002652 <RI_SetRegisterMotor1+0x136>
 80025b0:	d96c      	bls.n	800268c <RI_SetRegisterMotor1+0x170>
 80025b2:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80025b6:	d04c      	beq.n	8002652 <RI_SetRegisterMotor1+0x136>
 80025b8:	d95f      	bls.n	800267a <RI_SetRegisterMotor1+0x15e>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80025ba:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80025be:	bf0c      	ite	eq
 80025c0:	2004      	moveq	r0, #4
 80025c2:	2005      	movne	r0, #5
      *size = 2;
 80025c4:	2302      	movs	r3, #2
 80025c6:	8023      	strh	r3, [r4, #0]
}
 80025c8:	b003      	add	sp, #12
 80025ca:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 80025cc:	2898      	cmp	r0, #152	@ 0x98
 80025ce:	f000 8156 	beq.w	800287e <RI_SetRegisterMotor1+0x362>
 80025d2:	d871      	bhi.n	80026b8 <RI_SetRegisterMotor1+0x19c>
 80025d4:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80025d8:	2818      	cmp	r0, #24
 80025da:	bf0c      	ite	eq
 80025dc:	2004      	moveq	r0, #4
 80025de:	2005      	movne	r0, #5
      *size = 4;
 80025e0:	2304      	movs	r3, #4
 80025e2:	8023      	strh	r3, [r4, #0]
}
 80025e4:	b003      	add	sp, #12
 80025e6:	bd30      	pop	{r4, r5, pc}
  *size= 1U ; /* /0 is the min String size */
 80025e8:	2001      	movs	r0, #1
 80025ea:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025ec:	f992 3000 	ldrsb.w	r3, [r2]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8135 	beq.w	8002860 <RI_SetRegisterMotor1+0x344>
 80025f6:	fa1f f38c 	uxth.w	r3, ip
 80025fa:	e005      	b.n	8002608 <RI_SetRegisterMotor1+0xec>
    *size = *size + 1U;
 80025fc:	8020      	strh	r0, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025fe:	f91e 1f01 	ldrsb.w	r1, [lr, #1]!
 8002602:	2900      	cmp	r1, #0
 8002604:	f000 812c 	beq.w	8002860 <RI_SetRegisterMotor1+0x344>
    *size = *size + 1U;
 8002608:	f100 0c01 	add.w	ip, r0, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800260c:	4298      	cmp	r0, r3
    *size = *size + 1U;
 800260e:	fa1f f08c 	uxth.w	r0, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002612:	d3f3      	bcc.n	80025fc <RI_SetRegisterMotor1+0xe0>
 8002614:	e01b      	b.n	800264e <RI_SetRegisterMotor1+0x132>
      *size = rawSize + 2U;
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	3202      	adds	r2, #2
 800261a:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 800261c:	fa1f f38c 	uxth.w	r3, ip
 8002620:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8002622:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8002624:	f200 8125 	bhi.w	8002872 <RI_SetRegisterMotor1+0x356>
        switch (regID)
 8002628:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 800262c:	f000 8156 	beq.w	80028dc <RI_SetRegisterMotor1+0x3c0>
 8002630:	f200 8108 	bhi.w	8002844 <RI_SetRegisterMotor1+0x328>
 8002634:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002638:	f000 8142 	beq.w	80028c0 <RI_SetRegisterMotor1+0x3a4>
 800263c:	f200 80ff 	bhi.w	800283e <RI_SetRegisterMotor1+0x322>
 8002640:	28a8      	cmp	r0, #168	@ 0xa8
 8002642:	d004      	beq.n	800264e <RI_SetRegisterMotor1+0x132>
 8002644:	f240 80f6 	bls.w	8002834 <RI_SetRegisterMotor1+0x318>
 8002648:	28e8      	cmp	r0, #232	@ 0xe8
 800264a:	f040 80f8 	bne.w	800283e <RI_SetRegisterMotor1+0x322>
      retVal = MCP_ERROR_RO_REG;
 800264e:	2004      	movs	r0, #4
 8002650:	e783      	b.n	800255a <RI_SetRegisterMotor1+0x3e>
 8002652:	2004      	movs	r0, #4
 8002654:	e7b6      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 8002656:	f5b0 7f74 	cmp.w	r0, #976	@ 0x3d0
 800265a:	f040 80a8 	bne.w	80027ae <RI_SetRegisterMotor1+0x292>
          STO_CR_GetObserverGains(&STO_CR_M1, &hC1,&hC2);
 800265e:	48ad      	ldr	r0, [pc, #692]	@ (8002914 <RI_SetRegisterMotor1+0x3f8>)
 8002660:	aa01      	add	r2, sp, #4
 8002662:	f10d 0102 	add.w	r1, sp, #2
 8002666:	f004 fda3 	bl	80071b0 <STO_CR_GetObserverGains>
          STO_CR_SetObserverGains(&STO_CR_M1, (int16_t)regdata16, hC2);
 800266a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800266e:	48a9      	ldr	r0, [pc, #676]	@ (8002914 <RI_SetRegisterMotor1+0x3f8>)
 8002670:	b229      	sxth	r1, r5
 8002672:	f004 fda5 	bl	80071c0 <STO_CR_SetObserverGains>
  uint8_t retVal = MCP_CMD_OK;
 8002676:	2000      	movs	r0, #0
 8002678:	e7a4      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 800267a:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 800267e:	d0e8      	beq.n	8002652 <RI_SetRegisterMotor1+0x136>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002680:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8002684:	bf0c      	ite	eq
 8002686:	2004      	moveq	r0, #4
 8002688:	2005      	movne	r0, #5
 800268a:	e79b      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 800268c:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 8002690:	d0df      	beq.n	8002652 <RI_SetRegisterMotor1+0x136>
 8002692:	d962      	bls.n	800275a <RI_SetRegisterMotor1+0x23e>
 8002694:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8002698:	bf0c      	ite	eq
 800269a:	2004      	moveq	r0, #4
 800269c:	2005      	movne	r0, #5
 800269e:	e791      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 80026a0:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 80026a4:	f000 8175 	beq.w	8002992 <RI_SetRegisterMotor1+0x476>
 80026a8:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 80026ac:	d17f      	bne.n	80027ae <RI_SetRegisterMotor1+0x292>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 80026ae:	489a      	ldr	r0, [pc, #616]	@ (8002918 <RI_SetRegisterMotor1+0x3fc>)
 80026b0:	b229      	sxth	r1, r5
 80026b2:	f003 faaf 	bl	8005c14 <PID_SetKI>
          break;
 80026b6:	e7de      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
 80026b8:	f5b0 7fac 	cmp.w	r0, #344	@ 0x158
 80026bc:	f000 80f6 	beq.w	80028ac <RI_SetRegisterMotor1+0x390>
 80026c0:	f5b0 7fcc 	cmp.w	r0, #408	@ 0x198
 80026c4:	bf0c      	ite	eq
 80026c6:	2004      	moveq	r0, #4
 80026c8:	2005      	movne	r0, #5
 80026ca:	e789      	b.n	80025e0 <RI_SetRegisterMotor1+0xc4>
 80026cc:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80026d0:	f000 8169 	beq.w	80029a6 <RI_SetRegisterMotor1+0x48a>
 80026d4:	d929      	bls.n	800272a <RI_SetRegisterMotor1+0x20e>
 80026d6:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 80026da:	f000 8133 	beq.w	8002944 <RI_SetRegisterMotor1+0x428>
 80026de:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 80026e2:	d164      	bne.n	80027ae <RI_SetRegisterMotor1+0x292>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 80026e4:	488d      	ldr	r0, [pc, #564]	@ (800291c <RI_SetRegisterMotor1+0x400>)
 80026e6:	b229      	sxth	r1, r5
 80026e8:	f003 fa94 	bl	8005c14 <PID_SetKI>
          break;
 80026ec:	e7c3      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
 80026ee:	f241 5310 	movw	r3, #5392	@ 0x1510
 80026f2:	4298      	cmp	r0, r3
 80026f4:	f000 8161 	beq.w	80029ba <RI_SetRegisterMotor1+0x49e>
 80026f8:	d937      	bls.n	800276a <RI_SetRegisterMotor1+0x24e>
 80026fa:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 80026fe:	4298      	cmp	r0, r3
 8002700:	f000 8156 	beq.w	80029b0 <RI_SetRegisterMotor1+0x494>
 8002704:	d91b      	bls.n	800273e <RI_SetRegisterMotor1+0x222>
 8002706:	f241 6350 	movw	r3, #5712	@ 0x1650
 800270a:	4298      	cmp	r0, r3
 800270c:	f000 8115 	beq.w	800293a <RI_SetRegisterMotor1+0x41e>
 8002710:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002714:	4298      	cmp	r0, r3
 8002716:	d09c      	beq.n	8002652 <RI_SetRegisterMotor1+0x136>
 8002718:	f241 6310 	movw	r3, #5648	@ 0x1610
 800271c:	4298      	cmp	r0, r3
 800271e:	d146      	bne.n	80027ae <RI_SetRegisterMotor1+0x292>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8002720:	487e      	ldr	r0, [pc, #504]	@ (800291c <RI_SetRegisterMotor1+0x400>)
 8002722:	4629      	mov	r1, r5
 8002724:	f003 fa90 	bl	8005c48 <PID_SetKIDivisorPOW2>
          break;
 8002728:	e7a5      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
 800272a:	2890      	cmp	r0, #144	@ 0x90
 800272c:	f000 8100 	beq.w	8002930 <RI_SetRegisterMotor1+0x414>
 8002730:	28d0      	cmp	r0, #208	@ 0xd0
 8002732:	d13c      	bne.n	80027ae <RI_SetRegisterMotor1+0x292>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002734:	487a      	ldr	r0, [pc, #488]	@ (8002920 <RI_SetRegisterMotor1+0x404>)
 8002736:	b229      	sxth	r1, r5
 8002738:	f003 fa6c 	bl	8005c14 <PID_SetKI>
          break;
 800273c:	e79b      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
 800273e:	f241 5350 	movw	r3, #5456	@ 0x1550
 8002742:	4298      	cmp	r0, r3
 8002744:	f000 8103 	beq.w	800294e <RI_SetRegisterMotor1+0x432>
 8002748:	f241 5390 	movw	r3, #5520	@ 0x1590
 800274c:	4298      	cmp	r0, r3
 800274e:	d12e      	bne.n	80027ae <RI_SetRegisterMotor1+0x292>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8002750:	4871      	ldr	r0, [pc, #452]	@ (8002918 <RI_SetRegisterMotor1+0x3fc>)
 8002752:	4629      	mov	r1, r5
 8002754:	f003 fa94 	bl	8005c80 <PID_SetKDDivisorPOW2>
          break;
 8002758:	e78d      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
 800275a:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 800275e:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002762:	bf0c      	ite	eq
 8002764:	2004      	moveq	r0, #4
 8002766:	2005      	movne	r0, #5
 8002768:	e72c      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 800276a:	f241 4350 	movw	r3, #5200	@ 0x1450
 800276e:	4298      	cmp	r0, r3
 8002770:	f000 80c5 	beq.w	80028fe <RI_SetRegisterMotor1+0x3e2>
 8002774:	d90d      	bls.n	8002792 <RI_SetRegisterMotor1+0x276>
 8002776:	f241 4390 	movw	r3, #5264	@ 0x1490
 800277a:	4298      	cmp	r0, r3
 800277c:	f000 80c4 	beq.w	8002908 <RI_SetRegisterMotor1+0x3ec>
 8002780:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002784:	4298      	cmp	r0, r3
 8002786:	d112      	bne.n	80027ae <RI_SetRegisterMotor1+0x292>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002788:	4865      	ldr	r0, [pc, #404]	@ (8002920 <RI_SetRegisterMotor1+0x404>)
 800278a:	4629      	mov	r1, r5
 800278c:	f003 fa78 	bl	8005c80 <PID_SetKDDivisorPOW2>
          break;
 8002790:	e771      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
 8002792:	f5b0 6f4d 	cmp.w	r0, #3280	@ 0xcd0
 8002796:	f43f af5c 	beq.w	8002652 <RI_SetRegisterMotor1+0x136>
 800279a:	d919      	bls.n	80027d0 <RI_SetRegisterMotor1+0x2b4>
 800279c:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80027a0:	f43f af69 	beq.w	8002676 <RI_SetRegisterMotor1+0x15a>
 80027a4:	d905      	bls.n	80027b2 <RI_SetRegisterMotor1+0x296>
 80027a6:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80027aa:	f43f af64 	beq.w	8002676 <RI_SetRegisterMotor1+0x15a>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80027ae:	2005      	movs	r0, #5
 80027b0:	e708      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 80027b2:	f5b0 6f59 	cmp.w	r0, #3472	@ 0xd90
 80027b6:	f43f af4c 	beq.w	8002652 <RI_SetRegisterMotor1+0x136>
 80027ba:	d917      	bls.n	80027ec <RI_SetRegisterMotor1+0x2d0>
 80027bc:	f5b0 6f5d 	cmp.w	r0, #3536	@ 0xdd0
 80027c0:	f43f af47 	beq.w	8002652 <RI_SetRegisterMotor1+0x136>
 80027c4:	f5b0 6f61 	cmp.w	r0, #3600	@ 0xe10
 80027c8:	bf0c      	ite	eq
 80027ca:	2004      	moveq	r0, #4
 80027cc:	2005      	movne	r0, #5
 80027ce:	e6f9      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 80027d0:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 80027d4:	d112      	bne.n	80027fc <RI_SetRegisterMotor1+0x2e0>
          currComp = MCI_GetIqdref(pMCIN);
 80027d6:	4853      	ldr	r0, [pc, #332]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
 80027d8:	f7fe fd48 	bl	800126c <MCI_GetIqdref>
 80027dc:	9001      	str	r0, [sp, #4]
          currComp.d = (int16_t)regdata16;
 80027de:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 80027e2:	9901      	ldr	r1, [sp, #4]
 80027e4:	484f      	ldr	r0, [pc, #316]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
 80027e6:	f7fe fc53 	bl	8001090 <MCI_SetCurrentReferences>
          break;
 80027ea:	e744      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
 80027ec:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 80027f0:	f5b0 6f51 	cmp.w	r0, #3344	@ 0xd10
 80027f4:	bf0c      	ite	eq
 80027f6:	2004      	moveq	r0, #4
 80027f8:	2005      	movne	r0, #5
 80027fa:	e6e3      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 80027fc:	d3d7      	bcc.n	80027ae <RI_SetRegisterMotor1+0x292>
 80027fe:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002802:	f43f af26 	beq.w	8002652 <RI_SetRegisterMotor1+0x136>
 8002806:	d909      	bls.n	800281c <RI_SetRegisterMotor1+0x300>
 8002808:	f5b0 6f2d 	cmp.w	r0, #2768	@ 0xad0
 800280c:	f43f af21 	beq.w	8002652 <RI_SetRegisterMotor1+0x136>
 8002810:	f5b0 6f31 	cmp.w	r0, #2832	@ 0xb10
 8002814:	bf0c      	ite	eq
 8002816:	2004      	moveq	r0, #4
 8002818:	2005      	movne	r0, #5
 800281a:	e6d3      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 800281c:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 8002820:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8002824:	f43f af15 	beq.w	8002652 <RI_SetRegisterMotor1+0x136>
 8002828:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800282c:	bf0c      	ite	eq
 800282e:	2004      	moveq	r0, #4
 8002830:	2005      	movne	r0, #5
 8002832:	e6c7      	b.n	80025c4 <RI_SetRegisterMotor1+0xa8>
 8002834:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002838:	2828      	cmp	r0, #40	@ 0x28
 800283a:	f43f af08 	beq.w	800264e <RI_SetRegisterMotor1+0x132>
 800283e:	2005      	movs	r0, #5
}
 8002840:	b003      	add	sp, #12
 8002842:	bd30      	pop	{r4, r5, pc}
 8002844:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002848:	d032      	beq.n	80028b0 <RI_SetRegisterMotor1+0x394>
 800284a:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 800284e:	d1f6      	bne.n	800283e <RI_SetRegisterMotor1+0x322>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002850:	4835      	ldr	r0, [pc, #212]	@ (8002928 <RI_SetRegisterMotor1+0x40c>)
 8002852:	f10e 0102 	add.w	r1, lr, #2
}
 8002856:	b003      	add	sp, #12
 8002858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800285c:	f003 b934 	b.w	8005ac8 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 8002860:	2300      	movs	r3, #0
 8002862:	f88e 3000 	strb.w	r3, [lr]
 8002866:	e6f2      	b.n	800264e <RI_SetRegisterMotor1+0x132>
 8002868:	2005      	movs	r0, #5
      *size = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	8023      	strh	r3, [r4, #0]
}
 800286e:	b003      	add	sp, #12
 8002870:	bd30      	pop	{r4, r5, pc}
        *size = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002876:	200a      	movs	r0, #10
 8002878:	e66f      	b.n	800255a <RI_SetRegisterMotor1+0x3e>
            retVal = MCP_ERROR_RO_REG;
 800287a:	2004      	movs	r0, #4
 800287c:	e7f5      	b.n	800286a <RI_SetRegisterMotor1+0x34e>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 800287e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002882:	492a      	ldr	r1, [pc, #168]	@ (800292c <RI_SetRegisterMotor1+0x410>)
 8002884:	4827      	ldr	r0, [pc, #156]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
 8002886:	fb81 2103 	smull	r2, r1, r1, r3
 800288a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800288e:	2200      	movs	r2, #0
 8002890:	b209      	sxth	r1, r1
 8002892:	f7fe fbe9 	bl	8001068 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8002896:	2000      	movs	r0, #0
          break;
 8002898:	e6a2      	b.n	80025e0 <RI_SetRegisterMotor1+0xc4>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 800289a:	4822      	ldr	r0, [pc, #136]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
 800289c:	f7fe fd10 	bl	80012c0 <MCI_GetTeref>
 80028a0:	2200      	movs	r2, #0
 80028a2:	4601      	mov	r1, r0
 80028a4:	481f      	ldr	r0, [pc, #124]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
 80028a6:	f7fe fbe9 	bl	800107c <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80028aa:	e665      	b.n	8002578 <RI_SetRegisterMotor1+0x5c>
          retVal = MCP_ERROR_RO_REG;
 80028ac:	2004      	movs	r0, #4
 80028ae:	e697      	b.n	80025e0 <RI_SetRegisterMotor1+0xc4>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 80028b0:	f8de 1002 	ldr.w	r1, [lr, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 80028b4:	481b      	ldr	r0, [pc, #108]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 80028b6:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 80028b8:	f7fe fbea 	bl	8001090 <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 80028bc:	2000      	movs	r0, #0
 80028be:	e64c      	b.n	800255a <RI_SetRegisterMotor1+0x3e>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 80028c0:	f8de 1002 	ldr.w	r1, [lr, #2]
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <RI_SetRegisterMotor1+0x410>)
 80028c6:	f8be 2006 	ldrh.w	r2, [lr, #6]
 80028ca:	fb83 0301 	smull	r0, r3, r3, r1
 80028ce:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80028d2:	4814      	ldr	r0, [pc, #80]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
 80028d4:	b209      	sxth	r1, r1
 80028d6:	f7fe fbc7 	bl	8001068 <MCI_ExecSpeedRamp>
            break;
 80028da:	e7ef      	b.n	80028bc <RI_SetRegisterMotor1+0x3a0>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 80028dc:	f8be 2006 	ldrh.w	r2, [lr, #6]
 80028e0:	f9be 1002 	ldrsh.w	r1, [lr, #2]
 80028e4:	480f      	ldr	r0, [pc, #60]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
 80028e6:	f7fe fbc9 	bl	800107c <MCI_ExecTorqueRamp>
            break;
 80028ea:	e7e7      	b.n	80028bc <RI_SetRegisterMotor1+0x3a0>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 80028ec:	480d      	ldr	r0, [pc, #52]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
 80028ee:	f7fe fc8f 	bl	8001210 <MCI_GetMecSpeedRefUnit>
 80028f2:	2200      	movs	r2, #0
 80028f4:	4601      	mov	r1, r0
 80028f6:	480b      	ldr	r0, [pc, #44]	@ (8002924 <RI_SetRegisterMotor1+0x408>)
 80028f8:	f7fe fbb6 	bl	8001068 <MCI_ExecSpeedRamp>
 80028fc:	e63c      	b.n	8002578 <RI_SetRegisterMotor1+0x5c>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80028fe:	4808      	ldr	r0, [pc, #32]	@ (8002920 <RI_SetRegisterMotor1+0x404>)
 8002900:	4629      	mov	r1, r5
 8002902:	f003 f995 	bl	8005c30 <PID_SetKPDivisorPOW2>
          break;
 8002906:	e6b6      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002908:	4805      	ldr	r0, [pc, #20]	@ (8002920 <RI_SetRegisterMotor1+0x404>)
 800290a:	4629      	mov	r1, r5
 800290c:	f003 f99c 	bl	8005c48 <PID_SetKIDivisorPOW2>
          break;
 8002910:	e6b1      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
 8002912:	bf00      	nop
 8002914:	20000110 	.word	0x20000110
 8002918:	200003a4 	.word	0x200003a4
 800291c:	200003d0 	.word	0x200003d0
 8002920:	200003fc 	.word	0x200003fc
 8002924:	20000724 	.word	0x20000724
 8002928:	20000458 	.word	0x20000458
 800292c:	2aaaaaab 	.word	0x2aaaaaab
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8002930:	4824      	ldr	r0, [pc, #144]	@ (80029c4 <RI_SetRegisterMotor1+0x4a8>)
 8002932:	b229      	sxth	r1, r5
 8002934:	f003 f96c 	bl	8005c10 <PID_SetKP>
          break;
 8002938:	e69d      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 800293a:	4823      	ldr	r0, [pc, #140]	@ (80029c8 <RI_SetRegisterMotor1+0x4ac>)
 800293c:	4629      	mov	r1, r5
 800293e:	f003 f99f 	bl	8005c80 <PID_SetKDDivisorPOW2>
          break;
 8002942:	e698      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8002944:	4820      	ldr	r0, [pc, #128]	@ (80029c8 <RI_SetRegisterMotor1+0x4ac>)
 8002946:	b229      	sxth	r1, r5
 8002948:	f003 f962 	bl	8005c10 <PID_SetKP>
          break;
 800294c:	e693      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 800294e:	481f      	ldr	r0, [pc, #124]	@ (80029cc <RI_SetRegisterMotor1+0x4b0>)
 8002950:	4629      	mov	r1, r5
 8002952:	f003 f979 	bl	8005c48 <PID_SetKIDivisorPOW2>
          break;
 8002956:	e68e      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8002958:	481b      	ldr	r0, [pc, #108]	@ (80029c8 <RI_SetRegisterMotor1+0x4ac>)
 800295a:	b229      	sxth	r1, r5
 800295c:	f003 f988 	bl	8005c70 <PID_SetKD>
          break;
 8002960:	e689      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          currComp = MCI_GetIqdref(pMCIN);
 8002962:	481b      	ldr	r0, [pc, #108]	@ (80029d0 <RI_SetRegisterMotor1+0x4b4>)
 8002964:	f7fe fc82 	bl	800126c <MCI_GetIqdref>
 8002968:	9001      	str	r0, [sp, #4]
          currComp.q = (int16_t)regdata16;
 800296a:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 800296e:	9901      	ldr	r1, [sp, #4]
 8002970:	4817      	ldr	r0, [pc, #92]	@ (80029d0 <RI_SetRegisterMotor1+0x4b4>)
 8002972:	f7fe fb8d 	bl	8001090 <MCI_SetCurrentReferences>
          break;
 8002976:	e67e      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          STO_CR_GetObserverGains(&STO_CR_M1, &hC1, &hC2);
 8002978:	aa01      	add	r2, sp, #4
 800297a:	f10d 0102 	add.w	r1, sp, #2
 800297e:	4815      	ldr	r0, [pc, #84]	@ (80029d4 <RI_SetRegisterMotor1+0x4b8>)
 8002980:	f004 fc16 	bl	80071b0 <STO_CR_GetObserverGains>
          STO_CR_SetObserverGains(&STO_CR_M1, hC1, (int16_t)regdata16);
 8002984:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002988:	4812      	ldr	r0, [pc, #72]	@ (80029d4 <RI_SetRegisterMotor1+0x4b8>)
 800298a:	b22a      	sxth	r2, r5
 800298c:	f004 fc18 	bl	80071c0 <STO_CR_SetObserverGains>
          break;
 8002990:	e671      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8002992:	480e      	ldr	r0, [pc, #56]	@ (80029cc <RI_SetRegisterMotor1+0x4b0>)
 8002994:	b229      	sxth	r1, r5
 8002996:	f003 f93b 	bl	8005c10 <PID_SetKP>
          break;
 800299a:	e66c      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 800299c:	480b      	ldr	r0, [pc, #44]	@ (80029cc <RI_SetRegisterMotor1+0x4b0>)
 800299e:	b229      	sxth	r1, r5
 80029a0:	f003 f966 	bl	8005c70 <PID_SetKD>
          break;
 80029a4:	e667      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80029a6:	4807      	ldr	r0, [pc, #28]	@ (80029c4 <RI_SetRegisterMotor1+0x4a8>)
 80029a8:	b229      	sxth	r1, r5
 80029aa:	f003 f961 	bl	8005c70 <PID_SetKD>
          break;
 80029ae:	e662      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80029b0:	4805      	ldr	r0, [pc, #20]	@ (80029c8 <RI_SetRegisterMotor1+0x4ac>)
 80029b2:	4629      	mov	r1, r5
 80029b4:	f003 f93c 	bl	8005c30 <PID_SetKPDivisorPOW2>
          break;
 80029b8:	e65d      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80029ba:	4804      	ldr	r0, [pc, #16]	@ (80029cc <RI_SetRegisterMotor1+0x4b0>)
 80029bc:	4629      	mov	r1, r5
 80029be:	f003 f937 	bl	8005c30 <PID_SetKPDivisorPOW2>
          break;
 80029c2:	e658      	b.n	8002676 <RI_SetRegisterMotor1+0x15a>
 80029c4:	200003fc 	.word	0x200003fc
 80029c8:	200003d0 	.word	0x200003d0
 80029cc:	200003a4 	.word	0x200003a4
 80029d0:	20000724 	.word	0x20000724
 80029d4:	20000110 	.word	0x20000110

080029d8 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80029d8:	b510      	push	{r4, lr}
    switch (typeID)
 80029da:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80029de:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 80029e2:	f1bc 0f20 	cmp.w	ip, #32
 80029e6:	d812      	bhi.n	8002a0e <RI_GetRegisterGlobal+0x36>
 80029e8:	e8df f00c 	tbb	[pc, ip]
 80029ec:	1111111b 	.word	0x1111111b
 80029f0:	11111111 	.word	0x11111111
 80029f4:	11111127 	.word	0x11111127
 80029f8:	11111111 	.word	0x11111111
 80029fc:	11111122 	.word	0x11111122
 8002a00:	11111111 	.word	0x11111111
 8002a04:	11111135 	.word	0x11111135
 8002a08:	11111111 	.word	0x11111111
 8002a0c:	13          	.byte	0x13
 8002a0d:	00          	.byte	0x00
 8002a0e:	2007      	movs	r0, #7
}
 8002a10:	bd10      	pop	{r4, pc}
        switch (regID)
 8002a12:	2828      	cmp	r0, #40	@ 0x28
 8002a14:	d044      	beq.n	8002aa0 <RI_GetRegisterGlobal+0xc8>
        *size = (*rawSize) + 2U;
 8002a16:	8812      	ldrh	r2, [r2, #0]
 8002a18:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002a1a:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002a1c:	b292      	uxth	r2, r2
 8002a1e:	801a      	strh	r2, [r3, #0]
}
 8002a20:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8002a22:	f1be 0f00 	cmp.w	lr, #0
 8002a26:	dd39      	ble.n	8002a9c <RI_GetRegisterGlobal+0xc4>
 8002a28:	2201      	movs	r2, #1
            *size= 0 ; /* */
 8002a2a:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002a2c:	2005      	movs	r0, #5
}
 8002a2e:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002a30:	f1be 0f03 	cmp.w	lr, #3
 8002a34:	dd2a      	ble.n	8002a8c <RI_GetRegisterGlobal+0xb4>
 8002a36:	2204      	movs	r2, #4
 8002a38:	e7f7      	b.n	8002a2a <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 8002a3a:	f1be 0f01 	cmp.w	lr, #1
 8002a3e:	dd25      	ble.n	8002a8c <RI_GetRegisterGlobal+0xb4>
          switch (regID)
 8002a40:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002a44:	d05a      	beq.n	8002afc <RI_GetRegisterGlobal+0x124>
 8002a46:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2000      	moveq	r0, #0
 8002a4e:	2005      	movne	r0, #5
          *size = 2;
 8002a50:	2202      	movs	r2, #2
 8002a52:	801a      	strh	r2, [r3, #0]
}
 8002a54:	bd10      	pop	{r4, pc}
        switch (regID)
 8002a56:	2820      	cmp	r0, #32
 8002a58:	d02c      	beq.n	8002ab4 <RI_GetRegisterGlobal+0xdc>
 8002a5a:	2860      	cmp	r0, #96	@ 0x60
 8002a5c:	d118      	bne.n	8002a90 <RI_GetRegisterGlobal+0xb8>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a5e:	4c28      	ldr	r4, [pc, #160]	@ (8002b00 <RI_GetRegisterGlobal+0x128>)
 8002a60:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002a64:	2101      	movs	r1, #1
 8002a66:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a68:	b1a0      	cbz	r0, 8002a94 <RI_GetRegisterGlobal+0xbc>
 8002a6a:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002a6e:	46a4      	mov	ip, r4
 8002a70:	e008      	b.n	8002a84 <RI_GetRegisterGlobal+0xac>
    *tempdestString = *tempsrcString;
 8002a72:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002a76:	8819      	ldrh	r1, [r3, #0]
 8002a78:	3101      	adds	r1, #1
 8002a7a:	b289      	uxth	r1, r1
 8002a7c:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002a7e:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002a82:	b138      	cbz	r0, 8002a94 <RI_GetRegisterGlobal+0xbc>
 8002a84:	4571      	cmp	r1, lr
 8002a86:	d3f4      	bcc.n	8002a72 <RI_GetRegisterGlobal+0x9a>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002a88:	2006      	movs	r0, #6
}
 8002a8a:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a8c:	2008      	movs	r0, #8
}
 8002a8e:	bd10      	pop	{r4, pc}
 8002a90:	2200      	movs	r2, #0
 8002a92:	e7ca      	b.n	8002a2a <RI_GetRegisterGlobal+0x52>
    *tempdestString = (int8_t)0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002a98:	2000      	movs	r0, #0
}
 8002a9a:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002a9c:	4608      	mov	r0, r1
}
 8002a9e:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002aa0:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002aa4:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002aa6:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002aaa:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002aac:	d81a      	bhi.n	8002ae4 <RI_GetRegisterGlobal+0x10c>
 8002aae:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ab0:	2008      	movs	r0, #8
 8002ab2:	e7b4      	b.n	8002a1e <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002ab4:	4c13      	ldr	r4, [pc, #76]	@ (8002b04 <RI_GetRegisterGlobal+0x12c>)
 8002ab6:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002aba:	2101      	movs	r1, #1
 8002abc:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d0e8      	beq.n	8002a94 <RI_GetRegisterGlobal+0xbc>
 8002ac2:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002ac6:	46a4      	mov	ip, r4
 8002ac8:	e009      	b.n	8002ade <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8002aca:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002ace:	8819      	ldrh	r1, [r3, #0]
 8002ad0:	3101      	adds	r1, #1
 8002ad2:	b289      	uxth	r1, r1
 8002ad4:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002ad6:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d0da      	beq.n	8002a94 <RI_GetRegisterGlobal+0xbc>
 8002ade:	458e      	cmp	lr, r1
 8002ae0:	d8f3      	bhi.n	8002aca <RI_GetRegisterGlobal+0xf2>
 8002ae2:	e7d1      	b.n	8002a88 <RI_GetRegisterGlobal+0xb0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002ae4:	4908      	ldr	r1, [pc, #32]	@ (8002b08 <RI_GetRegisterGlobal+0x130>)
 8002ae6:	6848      	ldr	r0, [r1, #4]
 8002ae8:	680c      	ldr	r4, [r1, #0]
 8002aea:	8909      	ldrh	r1, [r1, #8]
 8002aec:	f8c2 0006 	str.w	r0, [r2, #6]
 8002af0:	f8c2 4002 	str.w	r4, [r2, #2]
 8002af4:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8002af6:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002af8:	220c      	movs	r2, #12
 8002afa:	e790      	b.n	8002a1e <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8002afc:	2000      	movs	r0, #0
 8002afe:	e7a7      	b.n	8002a50 <RI_GetRegisterGlobal+0x78>
 8002b00:	0800752c 	.word	0x0800752c
 8002b04:	08007504 	.word	0x08007504
 8002b08:	080074f8 	.word	0x080074f8

08002b0c <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002b0c:	b530      	push	{r4, r5, lr}
 8002b0e:	b095      	sub	sp, #84	@ 0x54
 8002b10:	461d      	mov	r5, r3
    switch (typeID)
 8002b12:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002b16:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 8002b1a:	4614      	mov	r4, r2
    switch (typeID)
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d812      	bhi.n	8002b46 <RI_GetRegisterMotor1+0x3a>
 8002b20:	e8df f003 	tbb	[pc, r3]
 8002b24:	1111112d 	.word	0x1111112d
 8002b28:	11111111 	.word	0x11111111
 8002b2c:	11111140 	.word	0x11111140
 8002b30:	11111111 	.word	0x11111111
 8002b34:	11111165 	.word	0x11111165
 8002b38:	11111111 	.word	0x11111111
 8002b3c:	11111181 	.word	0x11111181
 8002b40:	11111111 	.word	0x11111111
 8002b44:	14          	.byte	0x14
 8002b45:	00          	.byte	0x00
 8002b46:	2007      	movs	r0, #7
  }
 8002b48:	b015      	add	sp, #84	@ 0x54
 8002b4a:	bd30      	pop	{r4, r5, pc}
        rawData++;
 8002b4c:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8002b50:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8002b54:	f000 828f 	beq.w	8003076 <RI_GetRegisterMotor1+0x56a>
 8002b58:	d87d      	bhi.n	8002c56 <RI_GetRegisterMotor1+0x14a>
 8002b5a:	28a8      	cmp	r0, #168	@ 0xa8
 8002b5c:	f000 8281 	beq.w	8003062 <RI_GetRegisterMotor1+0x556>
 8002b60:	28e8      	cmp	r0, #232	@ 0xe8
 8002b62:	d16a      	bne.n	8002c3a <RI_GetRegisterMotor1+0x12e>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b64:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002b68:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b6a:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002b6e:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002b70:	f200 8235 	bhi.w	8002fde <RI_GetRegisterMotor1+0x4d2>
 8002b74:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b76:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8002b78:	802b      	strh	r3, [r5, #0]
  }
 8002b7a:	b015      	add	sp, #84	@ 0x54
 8002b7c:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 8002b7e:	f1bc 0f00 	cmp.w	ip, #0
 8002b82:	f340 8255 	ble.w	8003030 <RI_GetRegisterMotor1+0x524>
          switch (regID)
 8002b86:	2848      	cmp	r0, #72	@ 0x48
 8002b88:	f000 8254 	beq.w	8003034 <RI_GetRegisterMotor1+0x528>
 8002b8c:	2888      	cmp	r0, #136	@ 0x88
 8002b8e:	f040 81ef 	bne.w	8002f70 <RI_GetRegisterMotor1+0x464>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002b92:	48ac      	ldr	r0, [pc, #688]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002b94:	f7fe fb22 	bl	80011dc <MCI_GetControlMode>
 8002b98:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002b9a:	2000      	movs	r0, #0
          *size = 1;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	802b      	strh	r3, [r5, #0]
  }
 8002ba0:	b015      	add	sp, #84	@ 0x54
 8002ba2:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 2)
 8002ba4:	f1bc 0f01 	cmp.w	ip, #1
 8002ba8:	f340 81df 	ble.w	8002f6a <RI_GetRegisterMotor1+0x45e>
          switch (regID)
 8002bac:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8002bb0:	f000 82d9 	beq.w	8003166 <RI_GetRegisterMotor1+0x65a>
 8002bb4:	f200 8095 	bhi.w	8002ce2 <RI_GetRegisterMotor1+0x1d6>
 8002bb8:	f5b0 6f82 	cmp.w	r0, #1040	@ 0x410
 8002bbc:	f000 82ca 	beq.w	8003154 <RI_GetRegisterMotor1+0x648>
 8002bc0:	f240 80ac 	bls.w	8002d1c <RI_GetRegisterMotor1+0x210>
 8002bc4:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8002bc8:	f000 82a7 	beq.w	800311a <RI_GetRegisterMotor1+0x60e>
 8002bcc:	d97a      	bls.n	8002cc4 <RI_GetRegisterMotor1+0x1b8>
 8002bce:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8002bd2:	f000 829d 	beq.w	8003110 <RI_GetRegisterMotor1+0x604>
 8002bd6:	d96d      	bls.n	8002cb4 <RI_GetRegisterMotor1+0x1a8>
 8002bd8:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8002bdc:	f040 8230 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8002be0:	4898      	ldr	r0, [pc, #608]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002be2:	f7fe fb43 	bl	800126c <MCI_GetIqdref>
 8002be6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002bea:	8023      	strh	r3, [r4, #0]
              break;
 8002bec:	e197      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
        if (freeSpace >= 4)
 8002bee:	f1bc 0f03 	cmp.w	ip, #3
 8002bf2:	f340 81ba 	ble.w	8002f6a <RI_GetRegisterMotor1+0x45e>
          switch (regID)
 8002bf6:	f5b0 7fac 	cmp.w	r0, #344	@ 0x158
 8002bfa:	f000 825c 	beq.w	80030b6 <RI_GetRegisterMotor1+0x5aa>
 8002bfe:	f200 81a3 	bhi.w	8002f48 <RI_GetRegisterMotor1+0x43c>
 8002c02:	2858      	cmp	r0, #88	@ 0x58
 8002c04:	f000 824f 	beq.w	80030a6 <RI_GetRegisterMotor1+0x59a>
 8002c08:	2898      	cmp	r0, #152	@ 0x98
 8002c0a:	f040 8196 	bne.w	8002f3a <RI_GetRegisterMotor1+0x42e>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002c0e:	488d      	ldr	r0, [pc, #564]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002c10:	f7fe fafe 	bl	8001210 <MCI_GetMecSpeedRefUnit>
 8002c14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c18:	0040      	lsls	r0, r0, #1
 8002c1a:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c1c:	2000      	movs	r0, #0
          *size = 4;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	802b      	strh	r3, [r5, #0]
  }
 8002c22:	b015      	add	sp, #84	@ 0x54
 8002c24:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8002c26:	28a0      	cmp	r0, #160	@ 0xa0
 8002c28:	f000 81c1 	beq.w	8002fae <RI_GetRegisterMotor1+0x4a2>
 8002c2c:	28e0      	cmp	r0, #224	@ 0xe0
 8002c2e:	f000 81a1 	beq.w	8002f74 <RI_GetRegisterMotor1+0x468>
            *size= 0 ; /* */
 8002c32:	2300      	movs	r3, #0
 8002c34:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002c36:	2005      	movs	r0, #5
            break;
 8002c38:	e786      	b.n	8002b48 <RI_GetRegisterMotor1+0x3c>
 8002c3a:	2868      	cmp	r0, #104	@ 0x68
 8002c3c:	f040 822e 	bne.w	800309c <RI_GetRegisterMotor1+0x590>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c40:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002c44:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c46:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002c4a:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002c4c:	f200 81d4 	bhi.w	8002ff8 <RI_GetRegisterMotor1+0x4ec>
 8002c50:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c52:	2008      	movs	r0, #8
 8002c54:	e790      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
 8002c56:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8002c5a:	f000 81f3 	beq.w	8003044 <RI_GetRegisterMotor1+0x538>
 8002c5e:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8002c62:	d112      	bne.n	8002c8a <RI_GetRegisterMotor1+0x17e>
            *rawSize = 4;
 8002c64:	2304      	movs	r3, #4
 8002c66:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002c68:	4876      	ldr	r0, [pc, #472]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002c6a:	f7fe faff 	bl	800126c <MCI_GetIqdref>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002c72:	4874      	ldr	r0, [pc, #464]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002c74:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002c76:	f7fe faf9 	bl	800126c <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8002c7a:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002c7c:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8002c80:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002c82:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8002c84:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8002c86:	2000      	movs	r0, #0
            break;
 8002c88:	e776      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
 8002c8a:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002c8e:	f040 8205 	bne.w	800309c <RI_GetRegisterMotor1+0x590>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002c92:	486c      	ldr	r0, [pc, #432]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002c94:	f7fe faa6 	bl	80011e4 <MCI_GetLastRampFinalSpeed>
 8002c98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c9c:	0043      	lsls	r3, r0, #1
 8002c9e:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002ca2:	4868      	ldr	r0, [pc, #416]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002ca4:	f7fe faa6 	bl	80011f4 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002ca8:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002caa:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8002cac:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002cae:	2000      	movs	r0, #0
            break;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	e761      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
 8002cb4:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8002cb8:	d147      	bne.n	8002d4a <RI_GetRegisterMotor1+0x23e>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8002cba:	4862      	ldr	r0, [pc, #392]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002cbc:	f7fe fac8 	bl	8001250 <MCI_GetIqd>
 8002cc0:	8020      	strh	r0, [r4, #0]
              break;
 8002cc2:	e12c      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002cc4:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8002cc8:	f000 820f 	beq.w	80030ea <RI_GetRegisterMotor1+0x5de>
 8002ccc:	d97f      	bls.n	8002dce <RI_GetRegisterMotor1+0x2c2>
 8002cce:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8002cd2:	d173      	bne.n	8002dbc <RI_GetRegisterMotor1+0x2b0>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8002cd4:	485b      	ldr	r0, [pc, #364]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002cd6:	f7fe fa9f 	bl	8001218 <MCI_GetIab>
 8002cda:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002cde:	8023      	strh	r3, [r4, #0]
              break;
 8002ce0:	e11d      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002ce2:	f5b0 6f61 	cmp.w	r0, #3600	@ 0xe10
 8002ce6:	f000 8266 	beq.w	80031b6 <RI_GetRegisterMotor1+0x6aa>
 8002cea:	f240 80b9 	bls.w	8002e60 <RI_GetRegisterMotor1+0x354>
 8002cee:	f241 5310 	movw	r3, #5392	@ 0x1510
 8002cf2:	4298      	cmp	r0, r3
 8002cf4:	f000 825a 	beq.w	80031ac <RI_GetRegisterMotor1+0x6a0>
 8002cf8:	f240 8095 	bls.w	8002e26 <RI_GetRegisterMotor1+0x31a>
 8002cfc:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8002d00:	4298      	cmp	r0, r3
 8002d02:	f000 824e 	beq.w	80031a2 <RI_GetRegisterMotor1+0x696>
 8002d06:	f240 8085 	bls.w	8002e14 <RI_GetRegisterMotor1+0x308>
 8002d0a:	f241 6310 	movw	r3, #5648	@ 0x1610
 8002d0e:	4298      	cmp	r0, r3
 8002d10:	d176      	bne.n	8002e00 <RI_GetRegisterMotor1+0x2f4>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8002d12:	484d      	ldr	r0, [pc, #308]	@ (8002e48 <RI_GetRegisterMotor1+0x33c>)
 8002d14:	f002 ff92 	bl	8005c3c <PID_GetKIDivisorPOW2>
 8002d18:	8020      	strh	r0, [r4, #0]
              break;
 8002d1a:	e100      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002d1c:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8002d20:	f000 823a 	beq.w	8003198 <RI_GetRegisterMotor1+0x68c>
 8002d24:	d924      	bls.n	8002d70 <RI_GetRegisterMotor1+0x264>
 8002d26:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8002d2a:	f000 8230 	beq.w	800318e <RI_GetRegisterMotor1+0x682>
 8002d2e:	d917      	bls.n	8002d60 <RI_GetRegisterMotor1+0x254>
 8002d30:	f5b0 7f74 	cmp.w	r0, #976	@ 0x3d0
 8002d34:	f040 8184 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              STO_CR_GetObserverGains(&STO_CR_M1, &hC1, &hC2);
 8002d38:	4844      	ldr	r0, [pc, #272]	@ (8002e4c <RI_GetRegisterMotor1+0x340>)
 8002d3a:	aa13      	add	r2, sp, #76	@ 0x4c
 8002d3c:	a912      	add	r1, sp, #72	@ 0x48
 8002d3e:	f004 fa37 	bl	80071b0 <STO_CR_GetObserverGains>
              *regdata16 = hC1;
 8002d42:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8002d46:	8023      	strh	r3, [r4, #0]
              break;
 8002d48:	e0e9      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002d4a:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8002d4e:	f040 8177 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8002d52:	483c      	ldr	r0, [pc, #240]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002d54:	f7fe fa7c 	bl	8001250 <MCI_GetIqd>
 8002d58:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002d5c:	8023      	strh	r3, [r4, #0]
              break;
 8002d5e:	e0de      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002d60:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8002d64:	d111      	bne.n	8002d8a <RI_GetRegisterMotor1+0x27e>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8002d66:	483a      	ldr	r0, [pc, #232]	@ (8002e50 <RI_GetRegisterMotor1+0x344>)
 8002d68:	f002 ff56 	bl	8005c18 <PID_GetKP>
 8002d6c:	8020      	strh	r0, [r4, #0]
              break;
 8002d6e:	e0d6      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002d70:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002d74:	f000 8206 	beq.w	8003184 <RI_GetRegisterMotor1+0x678>
 8002d78:	d919      	bls.n	8002dae <RI_GetRegisterMotor1+0x2a2>
 8002d7a:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8002d7e:	d10d      	bne.n	8002d9c <RI_GetRegisterMotor1+0x290>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8002d80:	4831      	ldr	r0, [pc, #196]	@ (8002e48 <RI_GetRegisterMotor1+0x33c>)
 8002d82:	f002 ff49 	bl	8005c18 <PID_GetKP>
 8002d86:	8020      	strh	r0, [r4, #0]
              break;
 8002d88:	e0c9      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002d8a:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8002d8e:	f040 8157 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8002d92:	482f      	ldr	r0, [pc, #188]	@ (8002e50 <RI_GetRegisterMotor1+0x344>)
 8002d94:	f002 ff44 	bl	8005c20 <PID_GetKI>
 8002d98:	8020      	strh	r0, [r4, #0]
              break;
 8002d9a:	e0c0      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002d9c:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8002da0:	f040 814e 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8002da4:	4828      	ldr	r0, [pc, #160]	@ (8002e48 <RI_GetRegisterMotor1+0x33c>)
 8002da6:	f002 ff3b 	bl	8005c20 <PID_GetKI>
 8002daa:	8020      	strh	r0, [r4, #0]
              break;
 8002dac:	e0b7      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002dae:	2890      	cmp	r0, #144	@ 0x90
 8002db0:	d115      	bne.n	8002dde <RI_GetRegisterMotor1+0x2d2>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8002db2:	4828      	ldr	r0, [pc, #160]	@ (8002e54 <RI_GetRegisterMotor1+0x348>)
 8002db4:	f002 ff30 	bl	8005c18 <PID_GetKP>
 8002db8:	8020      	strh	r0, [r4, #0]
              break;
 8002dba:	e0b0      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002dbc:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8002dc0:	f040 813e 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8002dc4:	481f      	ldr	r0, [pc, #124]	@ (8002e44 <RI_GetRegisterMotor1+0x338>)
 8002dc6:	f7fe fa35 	bl	8001234 <MCI_GetIalphabeta>
 8002dca:	8020      	strh	r0, [r4, #0]
              break;
 8002dcc:	e0a7      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002dce:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002dd2:	d10c      	bne.n	8002dee <RI_GetRegisterMotor1+0x2e2>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8002dd4:	4820      	ldr	r0, [pc, #128]	@ (8002e58 <RI_GetRegisterMotor1+0x34c>)
 8002dd6:	f002 fbbb 	bl	8005550 <VBS_GetAvBusVoltage_V>
 8002dda:	8020      	strh	r0, [r4, #0]
              break;
 8002ddc:	e09f      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002dde:	28d0      	cmp	r0, #208	@ 0xd0
 8002de0:	f040 812e 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002de4:	481b      	ldr	r0, [pc, #108]	@ (8002e54 <RI_GetRegisterMotor1+0x348>)
 8002de6:	f002 ff1b 	bl	8005c20 <PID_GetKI>
 8002dea:	8020      	strh	r0, [r4, #0]
              break;
 8002dec:	e097      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002dee:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8002df2:	f040 8125 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8002df6:	4819      	ldr	r0, [pc, #100]	@ (8002e5c <RI_GetRegisterMotor1+0x350>)
 8002df8:	f002 fef0 	bl	8005bdc <NTC_GetAvTemp_C>
 8002dfc:	8020      	strh	r0, [r4, #0]
              break;
 8002dfe:	e08e      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002e00:	f241 6350 	movw	r3, #5712	@ 0x1650
 8002e04:	4298      	cmp	r0, r3
 8002e06:	f040 811b 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8002e0a:	480f      	ldr	r0, [pc, #60]	@ (8002e48 <RI_GetRegisterMotor1+0x33c>)
 8002e0c:	f002 ff36 	bl	8005c7c <PID_GetKDDivisorPOW2>
 8002e10:	8020      	strh	r0, [r4, #0]
              break;
 8002e12:	e084      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002e14:	f241 5350 	movw	r3, #5456	@ 0x1550
 8002e18:	4298      	cmp	r0, r3
 8002e1a:	d134      	bne.n	8002e86 <RI_GetRegisterMotor1+0x37a>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8002e1c:	480c      	ldr	r0, [pc, #48]	@ (8002e50 <RI_GetRegisterMotor1+0x344>)
 8002e1e:	f002 ff0d 	bl	8005c3c <PID_GetKIDivisorPOW2>
 8002e22:	8020      	strh	r0, [r4, #0]
              break;
 8002e24:	e07b      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002e26:	f241 4350 	movw	r3, #5200	@ 0x1450
 8002e2a:	4298      	cmp	r0, r3
 8002e2c:	f000 81a5 	beq.w	800317a <RI_GetRegisterMotor1+0x66e>
 8002e30:	d96e      	bls.n	8002f10 <RI_GetRegisterMotor1+0x404>
 8002e32:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002e36:	4298      	cmp	r0, r3
 8002e38:	d160      	bne.n	8002efc <RI_GetRegisterMotor1+0x3f0>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8002e3a:	4806      	ldr	r0, [pc, #24]	@ (8002e54 <RI_GetRegisterMotor1+0x348>)
 8002e3c:	f002 fefe 	bl	8005c3c <PID_GetKIDivisorPOW2>
 8002e40:	8020      	strh	r0, [r4, #0]
              break;
 8002e42:	e06c      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002e44:	20000724 	.word	0x20000724
 8002e48:	200003d0 	.word	0x200003d0
 8002e4c:	20000110 	.word	0x20000110
 8002e50:	200003a4 	.word	0x200003a4
 8002e54:	200003fc 	.word	0x200003fc
 8002e58:	2000002c 	.word	0x2000002c
 8002e5c:	20000058 	.word	0x20000058
 8002e60:	f5b0 6f4d 	cmp.w	r0, #3280	@ 0xcd0
 8002e64:	f000 8184 	beq.w	8003170 <RI_GetRegisterMotor1+0x664>
 8002e68:	d91f      	bls.n	8002eaa <RI_GetRegisterMotor1+0x39e>
 8002e6a:	f5b0 6f59 	cmp.w	r0, #3472	@ 0xd90
 8002e6e:	f000 8148 	beq.w	8003102 <RI_GetRegisterMotor1+0x5f6>
 8002e72:	d912      	bls.n	8002e9a <RI_GetRegisterMotor1+0x38e>
 8002e74:	f5b0 6f5d 	cmp.w	r0, #3536	@ 0xdd0
 8002e78:	f040 80e2 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = STO_CR_GetEstimatedBemf(&STO_CR_M1).alpha;
 8002e7c:	48aa      	ldr	r0, [pc, #680]	@ (8003128 <RI_GetRegisterMotor1+0x61c>)
 8002e7e:	f004 f979 	bl	8007174 <STO_CR_GetEstimatedBemf>
 8002e82:	8020      	strh	r0, [r4, #0]
              break;
 8002e84:	e04b      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002e86:	f241 5390 	movw	r3, #5520	@ 0x1590
 8002e8a:	4298      	cmp	r0, r3
 8002e8c:	f040 80d8 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8002e90:	48a6      	ldr	r0, [pc, #664]	@ (800312c <RI_GetRegisterMotor1+0x620>)
 8002e92:	f002 fef3 	bl	8005c7c <PID_GetKDDivisorPOW2>
 8002e96:	8020      	strh	r0, [r4, #0]
              break;
 8002e98:	e041      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002e9a:	f5b0 6f51 	cmp.w	r0, #3344	@ 0xd10
 8002e9e:	d111      	bne.n	8002ec4 <RI_GetRegisterMotor1+0x3b8>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t*) &STO_CR_M1);
 8002ea0:	48a1      	ldr	r0, [pc, #644]	@ (8003128 <RI_GetRegisterMotor1+0x61c>)
 8002ea2:	f003 fda1 	bl	80069e8 <SPD_GetS16Speed>
 8002ea6:	8020      	strh	r0, [r4, #0]
              break;
 8002ea8:	e039      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002eaa:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8002eae:	f000 8121 	beq.w	80030f4 <RI_GetRegisterMotor1+0x5e8>
 8002eb2:	d919      	bls.n	8002ee8 <RI_GetRegisterMotor1+0x3dc>
 8002eb4:	f5b0 6f2d 	cmp.w	r0, #2768	@ 0xad0
 8002eb8:	d10d      	bne.n	8002ed6 <RI_GetRegisterMotor1+0x3ca>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8002eba:	489d      	ldr	r0, [pc, #628]	@ (8003130 <RI_GetRegisterMotor1+0x624>)
 8002ebc:	f003 fd52 	bl	8006964 <SPD_GetElAngle>
 8002ec0:	8020      	strh	r0, [r4, #0]
              break;
 8002ec2:	e02c      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002ec4:	f5b0 6f55 	cmp.w	r0, #3408	@ 0xd50
 8002ec8:	f040 80ba 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = STO_CR_GetEstimatedCurrent(&STO_CR_M1).alpha;
 8002ecc:	4896      	ldr	r0, [pc, #600]	@ (8003128 <RI_GetRegisterMotor1+0x61c>)
 8002ece:	f004 f95d 	bl	800718c <STO_CR_GetEstimatedCurrent>
 8002ed2:	8020      	strh	r0, [r4, #0]
              break;
 8002ed4:	e023      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002ed6:	f5b0 6f31 	cmp.w	r0, #2832	@ 0xb10
 8002eda:	f040 80b1 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8002ede:	4894      	ldr	r0, [pc, #592]	@ (8003130 <RI_GetRegisterMotor1+0x624>)
 8002ee0:	f003 fd82 	bl	80069e8 <SPD_GetS16Speed>
 8002ee4:	8020      	strh	r0, [r4, #0]
              break;
 8002ee6:	e01a      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002ee8:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8002eec:	d11c      	bne.n	8002f28 <RI_GetRegisterMotor1+0x41c>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8002eee:	4891      	ldr	r0, [pc, #580]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 8002ef0:	f7fe f9ca 	bl	8001288 <MCI_GetVqd>
 8002ef4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002ef8:	8023      	strh	r3, [r4, #0]
              break;
 8002efa:	e010      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002efc:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002f00:	4298      	cmp	r0, r3
 8002f02:	f040 809d 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8002f06:	488c      	ldr	r0, [pc, #560]	@ (8003138 <RI_GetRegisterMotor1+0x62c>)
 8002f08:	f002 feb8 	bl	8005c7c <PID_GetKDDivisorPOW2>
 8002f0c:	8020      	strh	r0, [r4, #0]
              break;
 8002f0e:	e006      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002f10:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002f14:	d003      	beq.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002f16:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002f1a:	f040 8091 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
    uint8_t retVal = MCP_CMD_OK;
 8002f1e:	2000      	movs	r0, #0
          *size = 2;
 8002f20:	2302      	movs	r3, #2
 8002f22:	802b      	strh	r3, [r5, #0]
  }
 8002f24:	b015      	add	sp, #84	@ 0x54
 8002f26:	bd30      	pop	{r4, r5, pc}
 8002f28:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8002f2c:	f040 8088 	bne.w	8003040 <RI_GetRegisterMotor1+0x534>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8002f30:	4880      	ldr	r0, [pc, #512]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 8002f32:	f7fe f9b7 	bl	80012a4 <MCI_GetValphabeta>
 8002f36:	8020      	strh	r0, [r4, #0]
              break;
 8002f38:	e7f1      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8002f3a:	2818      	cmp	r0, #24
 8002f3c:	d17e      	bne.n	800303c <RI_GetRegisterMotor1+0x530>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8002f3e:	487d      	ldr	r0, [pc, #500]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 8002f40:	f7fe f946 	bl	80011d0 <MCI_GetFaultState>
 8002f44:	6020      	str	r0, [r4, #0]
              break;
 8002f46:	e669      	b.n	8002c1c <RI_GetRegisterMotor1+0x110>
 8002f48:	f5b0 7fcc 	cmp.w	r0, #408	@ 0x198
 8002f4c:	f000 80b8 	beq.w	80030c0 <RI_GetRegisterMotor1+0x5b4>
 8002f50:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002f54:	4298      	cmp	r0, r3
 8002f56:	d171      	bne.n	800303c <RI_GetRegisterMotor1+0x530>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8002f58:	4b78      	ldr	r3, [pc, #480]	@ (800313c <RI_GetRegisterMotor1+0x630>)
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	f002 fef6 	bl	8005d4c <PQD_GetAvrgElMotorPowerW>
 8002f60:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8002f64:	9b01      	ldr	r3, [sp, #4]
 8002f66:	6023      	str	r3, [r4, #0]
              break;
 8002f68:	e658      	b.n	8002c1c <RI_GetRegisterMotor1+0x110>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002f6a:	2008      	movs	r0, #8
  }
 8002f6c:	b015      	add	sp, #84	@ 0x54
 8002f6e:	bd30      	pop	{r4, r5, pc}
 8002f70:	2005      	movs	r0, #5
 8002f72:	e613      	b.n	8002b9c <RI_GetRegisterMotor1+0x90>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002f74:	4b72      	ldr	r3, [pc, #456]	@ (8003140 <RI_GetRegisterMotor1+0x634>)
 8002f76:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8002f78:	2301      	movs	r3, #1
 8002f7a:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002f7c:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002f80:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8002f84:	b17a      	cbz	r2, 8002fa6 <RI_GetRegisterMotor1+0x49a>
 8002f86:	fa1f fc8c 	uxth.w	ip, ip
 8002f8a:	e008      	b.n	8002f9e <RI_GetRegisterMotor1+0x492>
    *tempdestString = *tempsrcString;
 8002f8c:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002f90:	882b      	ldrh	r3, [r5, #0]
 8002f92:	3301      	adds	r3, #1
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002f98:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002f9c:	b11a      	cbz	r2, 8002fa6 <RI_GetRegisterMotor1+0x49a>
 8002f9e:	459c      	cmp	ip, r3
 8002fa0:	d8f4      	bhi.n	8002f8c <RI_GetRegisterMotor1+0x480>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002fa2:	2006      	movs	r0, #6
 8002fa4:	e5d0      	b.n	8002b48 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002faa:	2000      	movs	r0, #0
 8002fac:	e5cc      	b.n	8002b48 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002fae:	4a65      	ldr	r2, [pc, #404]	@ (8003144 <RI_GetRegisterMotor1+0x638>)
  *size= 1U ; /* /0 is the min String size */
 8002fb0:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002fb2:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8002fb4:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002fb6:	f991 2000 	ldrsb.w	r2, [r1]
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	d0f3      	beq.n	8002fa6 <RI_GetRegisterMotor1+0x49a>
 8002fbe:	fa1f fc8c 	uxth.w	ip, ip
 8002fc2:	e009      	b.n	8002fd8 <RI_GetRegisterMotor1+0x4cc>
    *tempdestString = *tempsrcString;
 8002fc4:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002fc8:	882b      	ldrh	r3, [r5, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002fd0:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d0e6      	beq.n	8002fa6 <RI_GetRegisterMotor1+0x49a>
 8002fd8:	459c      	cmp	ip, r3
 8002fda:	d8f3      	bhi.n	8002fc4 <RI_GetRegisterMotor1+0x4b8>
 8002fdc:	e7e1      	b.n	8002fa2 <RI_GetRegisterMotor1+0x496>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8002fde:	4a5a      	ldr	r2, [pc, #360]	@ (8003148 <RI_GetRegisterMotor1+0x63c>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	6810      	ldr	r0, [r2, #0]
 8002fe4:	6851      	ldr	r1, [r2, #4]
 8002fe6:	6894      	ldr	r4, [r2, #8]
 8002fe8:	609c      	str	r4, [r3, #8]
 8002fea:	6018      	str	r0, [r3, #0]
 8002fec:	6059      	str	r1, [r3, #4]
 8002fee:	8992      	ldrh	r2, [r2, #12]
 8002ff0:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8002ff2:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	e5bf      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8002ff8:	4a51      	ldr	r2, [pc, #324]	@ (8003140 <RI_GetRegisterMotor1+0x634>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 8003000:	6814      	ldr	r4, [r2, #0]
 8003002:	6850      	ldr	r0, [r2, #4]
 8003004:	6891      	ldr	r1, [r2, #8]
 8003006:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800300a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800300e:	3210      	adds	r2, #16
 8003010:	4572      	cmp	r2, lr
 8003012:	601c      	str	r4, [r3, #0]
 8003014:	6058      	str	r0, [r3, #4]
 8003016:	6099      	str	r1, [r3, #8]
 8003018:	f103 0310 	add.w	r3, r3, #16
 800301c:	d1f0      	bne.n	8003000 <RI_GetRegisterMotor1+0x4f4>
 800301e:	6810      	ldr	r0, [r2, #0]
 8003020:	6851      	ldr	r1, [r2, #4]
 8003022:	6892      	ldr	r2, [r2, #8]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	6018      	str	r0, [r3, #0]
 8003028:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 800302a:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800302c:	233e      	movs	r3, #62	@ 0x3e
 800302e:	e5a3      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003030:	4608      	mov	r0, r1
 8003032:	e589      	b.n	8002b48 <RI_GetRegisterMotor1+0x3c>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003034:	483f      	ldr	r0, [pc, #252]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 8003036:	f7fe f87d 	bl	8001134 <MCI_GetSTMState>
              break;
 800303a:	e5ad      	b.n	8002b98 <RI_GetRegisterMotor1+0x8c>
 800303c:	2005      	movs	r0, #5
 800303e:	e5ee      	b.n	8002c1e <RI_GetRegisterMotor1+0x112>
 8003040:	2005      	movs	r0, #5
 8003042:	e76d      	b.n	8002f20 <RI_GetRegisterMotor1+0x414>
            *rawSize = 4;
 8003044:	2304      	movs	r3, #4
 8003046:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003048:	483a      	ldr	r0, [pc, #232]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 800304a:	f7fe f8cf 	bl	80011ec <MCI_GetLastRampFinalTorque>
 800304e:	8060      	strh	r0, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003050:	4838      	ldr	r0, [pc, #224]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 8003052:	f7fe f8cf 	bl	80011f4 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8003056:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003058:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 800305a:	3302      	adds	r3, #2
 800305c:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 800305e:	2000      	movs	r0, #0
            break;
 8003060:	e58a      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003062:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003066:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003068:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 800306c:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800306e:	d82f      	bhi.n	80030d0 <RI_GetRegisterMotor1+0x5c4>
 8003070:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003072:	2008      	movs	r0, #8
 8003074:	e580      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003076:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 800307a:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 800307c:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8003080:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003082:	d922      	bls.n	80030ca <RI_GetRegisterMotor1+0x5be>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003084:	4a31      	ldr	r2, [pc, #196]	@ (800314c <RI_GetRegisterMotor1+0x640>)
 8003086:	6850      	ldr	r0, [r2, #4]
 8003088:	6814      	ldr	r4, [r2, #0]
 800308a:	6891      	ldr	r1, [r2, #8]
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	6058      	str	r0, [r3, #4]
 8003092:	601c      	str	r4, [r3, #0]
 8003094:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003096:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003098:	230e      	movs	r3, #14
 800309a:	e56d      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
        *size = (*rawSize) + 2U;
 800309c:	8823      	ldrh	r3, [r4, #0]
 800309e:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80030a0:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	e568      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80030a6:	4823      	ldr	r0, [pc, #140]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 80030a8:	f7fe f8aa 	bl	8001200 <MCI_GetAvrgMecSpeedUnit>
 80030ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80030b0:	0040      	lsls	r0, r0, #1
 80030b2:	6020      	str	r0, [r4, #0]
              break;
 80030b4:	e5b2      	b.n	8002c1c <RI_GetRegisterMotor1+0x110>
              *regdata32 = STO_CR_GetEstimatedBemfLevel(&STO_CR_M1);
 80030b6:	481c      	ldr	r0, [pc, #112]	@ (8003128 <RI_GetRegisterMotor1+0x61c>)
 80030b8:	f004 f8c4 	bl	8007244 <STO_CR_GetEstimatedBemfLevel>
 80030bc:	6020      	str	r0, [r4, #0]
              break;
 80030be:	e5ad      	b.n	8002c1c <RI_GetRegisterMotor1+0x110>
              *regdata32 = STO_CR_GetObservedBemfLevel(&STO_CR_M1);
 80030c0:	4819      	ldr	r0, [pc, #100]	@ (8003128 <RI_GetRegisterMotor1+0x61c>)
 80030c2:	f004 f8c3 	bl	800724c <STO_CR_GetObservedBemfLevel>
 80030c6:	6020      	str	r0, [r4, #0]
              break;
 80030c8:	e5a8      	b.n	8002c1c <RI_GetRegisterMotor1+0x110>
 80030ca:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80030cc:	2008      	movs	r0, #8
 80030ce:	e553      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 80030d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003150 <RI_GetRegisterMotor1+0x644>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	6850      	ldr	r0, [r2, #4]
 80030d6:	6814      	ldr	r4, [r2, #0]
 80030d8:	6891      	ldr	r1, [r2, #8]
 80030da:	68d2      	ldr	r2, [r2, #12]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	6058      	str	r0, [r3, #4]
 80030e0:	601c      	str	r4, [r3, #0]
 80030e2:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 80030e4:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 80030e6:	2312      	movs	r3, #18
 80030e8:	e546      	b.n	8002b78 <RI_GetRegisterMotor1+0x6c>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80030ea:	4812      	ldr	r0, [pc, #72]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 80030ec:	f7fe f894 	bl	8001218 <MCI_GetIab>
 80030f0:	8020      	strh	r0, [r4, #0]
              break;
 80030f2:	e714      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80030f4:	480f      	ldr	r0, [pc, #60]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 80030f6:	f7fe f8d5 	bl	80012a4 <MCI_GetValphabeta>
 80030fa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80030fe:	8023      	strh	r3, [r4, #0]
              break;
 8003100:	e70d      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = STO_CR_GetEstimatedCurrent(&STO_CR_M1).beta;
 8003102:	4809      	ldr	r0, [pc, #36]	@ (8003128 <RI_GetRegisterMotor1+0x61c>)
 8003104:	f004 f842 	bl	800718c <STO_CR_GetEstimatedCurrent>
 8003108:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800310c:	8023      	strh	r3, [r4, #0]
              break;
 800310e:	e706      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8003110:	4808      	ldr	r0, [pc, #32]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 8003112:	f7fe f8ab 	bl	800126c <MCI_GetIqdref>
 8003116:	8020      	strh	r0, [r4, #0]
              break;
 8003118:	e701      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800311a:	4806      	ldr	r0, [pc, #24]	@ (8003134 <RI_GetRegisterMotor1+0x628>)
 800311c:	f7fe f88a 	bl	8001234 <MCI_GetIalphabeta>
 8003120:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003124:	8023      	strh	r3, [r4, #0]
              break;
 8003126:	e6fa      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 8003128:	20000110 	.word	0x20000110
 800312c:	200003a4 	.word	0x200003a4
 8003130:	20000090 	.word	0x20000090
 8003134:	20000724 	.word	0x20000724
 8003138:	200003fc 	.word	0x200003fc
 800313c:	20000000 	.word	0x20000000
 8003140:	2000043c 	.word	0x2000043c
 8003144:	20000444 	.word	0x20000444
 8003148:	20000440 	.word	0x20000440
 800314c:	20000448 	.word	0x20000448
 8003150:	20000438 	.word	0x20000438
              STO_CR_GetObserverGains(&STO_CR_M1, &hC1, &hC2);
 8003154:	481b      	ldr	r0, [pc, #108]	@ (80031c4 <RI_GetRegisterMotor1+0x6b8>)
 8003156:	aa13      	add	r2, sp, #76	@ 0x4c
 8003158:	a912      	add	r1, sp, #72	@ 0x48
 800315a:	f004 f829 	bl	80071b0 <STO_CR_GetObserverGains>
              *regdata16 = hC2;
 800315e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8003162:	8023      	strh	r3, [r4, #0]
              break;
 8003164:	e6db      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003166:	4818      	ldr	r0, [pc, #96]	@ (80031c8 <RI_GetRegisterMotor1+0x6bc>)
 8003168:	f7fe f88e 	bl	8001288 <MCI_GetVqd>
 800316c:	8020      	strh	r0, [r4, #0]
              break;
 800316e:	e6d6      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_CR_M1);
 8003170:	4814      	ldr	r0, [pc, #80]	@ (80031c4 <RI_GetRegisterMotor1+0x6b8>)
 8003172:	f003 fbf7 	bl	8006964 <SPD_GetElAngle>
 8003176:	8020      	strh	r0, [r4, #0]
              break;
 8003178:	e6d1      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 800317a:	4814      	ldr	r0, [pc, #80]	@ (80031cc <RI_GetRegisterMotor1+0x6c0>)
 800317c:	f002 fd56 	bl	8005c2c <PID_GetKPDivisorPOW2>
 8003180:	8020      	strh	r0, [r4, #0]
              break;
 8003182:	e6cc      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8003184:	4811      	ldr	r0, [pc, #68]	@ (80031cc <RI_GetRegisterMotor1+0x6c0>)
 8003186:	f002 fd75 	bl	8005c74 <PID_GetKD>
 800318a:	8020      	strh	r0, [r4, #0]
              break;
 800318c:	e6c7      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 800318e:	4810      	ldr	r0, [pc, #64]	@ (80031d0 <RI_GetRegisterMotor1+0x6c4>)
 8003190:	f002 fd70 	bl	8005c74 <PID_GetKD>
 8003194:	8020      	strh	r0, [r4, #0]
              break;
 8003196:	e6c2      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8003198:	480e      	ldr	r0, [pc, #56]	@ (80031d4 <RI_GetRegisterMotor1+0x6c8>)
 800319a:	f002 fd6b 	bl	8005c74 <PID_GetKD>
 800319e:	8020      	strh	r0, [r4, #0]
              break;
 80031a0:	e6bd      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 80031a2:	480c      	ldr	r0, [pc, #48]	@ (80031d4 <RI_GetRegisterMotor1+0x6c8>)
 80031a4:	f002 fd42 	bl	8005c2c <PID_GetKPDivisorPOW2>
 80031a8:	8020      	strh	r0, [r4, #0]
              break;
 80031aa:	e6b8      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 80031ac:	4808      	ldr	r0, [pc, #32]	@ (80031d0 <RI_GetRegisterMotor1+0x6c4>)
 80031ae:	f002 fd3d 	bl	8005c2c <PID_GetKPDivisorPOW2>
 80031b2:	8020      	strh	r0, [r4, #0]
              break;
 80031b4:	e6b3      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
              *regdata16 = STO_CR_GetEstimatedBemf(&STO_CR_M1).beta;
 80031b6:	4803      	ldr	r0, [pc, #12]	@ (80031c4 <RI_GetRegisterMotor1+0x6b8>)
 80031b8:	f003 ffdc 	bl	8007174 <STO_CR_GetEstimatedBemf>
 80031bc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80031c0:	8023      	strh	r3, [r4, #0]
              break;
 80031c2:	e6ac      	b.n	8002f1e <RI_GetRegisterMotor1+0x412>
 80031c4:	20000110 	.word	0x20000110
 80031c8:	20000724 	.word	0x20000724
 80031cc:	200003fc 	.word	0x200003fc
 80031d0:	200003a4 	.word	0x200003a4
 80031d4:	200003d0 	.word	0x200003d0

080031d8 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 80031d8:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80031dc:	3808      	subs	r0, #8
 80031de:	b2c0      	uxtb	r0, r0
 80031e0:	2810      	cmp	r0, #16
 80031e2:	bf9a      	itte	ls
 80031e4:	4b01      	ldrls	r3, [pc, #4]	@ (80031ec <RI_GetIDSize+0x14>)
 80031e6:	5c18      	ldrbls	r0, [r3, r0]
 80031e8:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 80031ea:	4770      	bx	lr
 80031ec:	08007768 	.word	0x08007768

080031f0 <RI_GetPtrReg>:
  else
  {
#endif

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
 80031f0:	f020 0307 	bic.w	r3, r0, #7
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 80031f4:	f000 0038 	and.w	r0, r0, #56	@ 0x38

    switch (typeID)
 80031f8:	2810      	cmp	r0, #16
    uint16_t regID = dataID & REG_MASK;
 80031fa:	b29b      	uxth	r3, r3
    switch (typeID)
 80031fc:	d010      	beq.n	8003220 <RI_GetPtrReg+0x30>
 80031fe:	2818      	cmp	r0, #24
 8003200:	d10a      	bne.n	8003218 <RI_GetPtrReg+0x28>
    {
      case TYPE_DATA_32BIT:
	  {
		switch (regID)
 8003202:	4851      	ldr	r0, [pc, #324]	@ (8003348 <RI_GetPtrReg+0x158>)
 8003204:	4a51      	ldr	r2, [pc, #324]	@ (800334c <RI_GetPtrReg+0x15c>)
 8003206:	f640 2c58 	movw	ip, #2648	@ 0xa58
 800320a:	4563      	cmp	r3, ip
 800320c:	bf16      	itet	ne
 800320e:	4602      	movne	r2, r0
 8003210:	2000      	moveq	r0, #0
 8003212:	2005      	movne	r0, #5
			*dataPtr = *dataPtr = &((&ENCODER_M1)->_Super.wMecAngle);
			 break;
		  }
		  default:
		  {
			*dataPtr = &nullData16;
 8003214:	600a      	str	r2, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003216:	4770      	bx	lr
    switch (typeID)
 8003218:	4a4b      	ldr	r2, [pc, #300]	@ (8003348 <RI_GetPtrReg+0x158>)
			*dataPtr = &nullData16;
 800321a:	600a      	str	r2, [r1, #0]
			retVal = MCP_ERROR_UNKNOWN_REG;
 800321c:	2005      	movs	r0, #5
}
 800321e:	4770      	bx	lr
        switch (regID)
 8003220:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8003224:	d07b      	beq.n	800331e <RI_GetPtrReg+0x12e>
 8003226:	d811      	bhi.n	800324c <RI_GetPtrReg+0x5c>
 8003228:	f5b3 6f0d 	cmp.w	r3, #2256	@ 0x8d0
 800322c:	f000 8081 	beq.w	8003332 <RI_GetPtrReg+0x142>
 8003230:	d928      	bls.n	8003284 <RI_GetPtrReg+0x94>
 8003232:	f5b3 6f19 	cmp.w	r3, #2448	@ 0x990
 8003236:	f000 8081 	beq.w	800333c <RI_GetPtrReg+0x14c>
 800323a:	d943      	bls.n	80032c4 <RI_GetPtrReg+0xd4>
 800323c:	f5b3 6f1d 	cmp.w	r3, #2512	@ 0x9d0
 8003240:	d1ea      	bne.n	8003218 <RI_GetPtrReg+0x28>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003242:	4b43      	ldr	r3, [pc, #268]	@ (8003350 <RI_GetPtrReg+0x160>)
 8003244:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003246:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003248:	3216      	adds	r2, #22
            break;
 800324a:	e7e3      	b.n	8003214 <RI_GetPtrReg+0x24>
 800324c:	f5b3 6f4d 	cmp.w	r3, #3280	@ 0xcd0
 8003250:	d062      	beq.n	8003318 <RI_GetPtrReg+0x128>
 8003252:	d909      	bls.n	8003268 <RI_GetPtrReg+0x78>
 8003254:	f5b3 6f5d 	cmp.w	r3, #3536	@ 0xdd0
 8003258:	d04a      	beq.n	80032f0 <RI_GetPtrReg+0x100>
 800325a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800325e:	d11d      	bne.n	800329c <RI_GetPtrReg+0xac>
 8003260:	4a3c      	ldr	r2, [pc, #240]	@ (8003354 <RI_GetPtrReg+0x164>)
			*dataPtr = &nullData16;
 8003262:	600a      	str	r2, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003264:	2000      	movs	r0, #0
}
 8003266:	4770      	bx	lr
 8003268:	f5b3 6f2d 	cmp.w	r3, #2768	@ 0xad0
 800326c:	d043      	beq.n	80032f6 <RI_GetPtrReg+0x106>
 800326e:	d934      	bls.n	80032da <RI_GetPtrReg+0xea>
 8003270:	4835      	ldr	r0, [pc, #212]	@ (8003348 <RI_GetPtrReg+0x158>)
 8003272:	4a39      	ldr	r2, [pc, #228]	@ (8003358 <RI_GetPtrReg+0x168>)
 8003274:	f5b3 6f31 	cmp.w	r3, #2832	@ 0xb10
 8003278:	bf16      	itet	ne
 800327a:	4602      	movne	r2, r0
 800327c:	2000      	moveq	r0, #0
 800327e:	2005      	movne	r0, #5
			*dataPtr = &nullData16;
 8003280:	600a      	str	r2, [r1, #0]
}
 8003282:	4770      	bx	lr
 8003284:	f5b3 6f05 	cmp.w	r3, #2128	@ 0x850
 8003288:	d04e      	beq.n	8003328 <RI_GetPtrReg+0x138>
 800328a:	d910      	bls.n	80032ae <RI_GetPtrReg+0xbe>
 800328c:	f5b3 6f09 	cmp.w	r3, #2192	@ 0x890
 8003290:	d1c2      	bne.n	8003218 <RI_GetPtrReg+0x28>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003292:	4b2f      	ldr	r3, [pc, #188]	@ (8003350 <RI_GetPtrReg+0x160>)
 8003294:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003296:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003298:	3206      	adds	r2, #6
            break;
 800329a:	e7bb      	b.n	8003214 <RI_GetPtrReg+0x24>
 800329c:	482a      	ldr	r0, [pc, #168]	@ (8003348 <RI_GetPtrReg+0x158>)
 800329e:	4a2f      	ldr	r2, [pc, #188]	@ (800335c <RI_GetPtrReg+0x16c>)
 80032a0:	f5b3 6f51 	cmp.w	r3, #3344	@ 0xd10
 80032a4:	bf16      	itet	ne
 80032a6:	4602      	movne	r2, r0
 80032a8:	2000      	moveq	r0, #0
 80032aa:	2005      	movne	r0, #5
 80032ac:	e7b2      	b.n	8003214 <RI_GetPtrReg+0x24>
 80032ae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80032b2:	d028      	beq.n	8003306 <RI_GetPtrReg+0x116>
 80032b4:	f5b3 6f01 	cmp.w	r3, #2064	@ 0x810
 80032b8:	d1ae      	bne.n	8003218 <RI_GetPtrReg+0x28>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80032ba:	4b25      	ldr	r3, [pc, #148]	@ (8003350 <RI_GetPtrReg+0x160>)
 80032bc:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80032be:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80032c0:	3202      	adds	r2, #2
            break;
 80032c2:	e7a7      	b.n	8003214 <RI_GetPtrReg+0x24>
 80032c4:	f5b3 6f11 	cmp.w	r3, #2320	@ 0x910
 80032c8:	d021      	beq.n	800330e <RI_GetPtrReg+0x11e>
 80032ca:	f5b3 6f15 	cmp.w	r3, #2384	@ 0x950
 80032ce:	d1a3      	bne.n	8003218 <RI_GetPtrReg+0x28>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80032d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003350 <RI_GetPtrReg+0x160>)
 80032d2:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80032d4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80032d6:	3210      	adds	r2, #16
            break;
 80032d8:	e79c      	b.n	8003214 <RI_GetPtrReg+0x24>
 80032da:	f5b3 6f25 	cmp.w	r3, #2640	@ 0xa50
 80032de:	d00d      	beq.n	80032fc <RI_GetPtrReg+0x10c>
 80032e0:	f5b3 6f29 	cmp.w	r3, #2704	@ 0xa90
 80032e4:	d198      	bne.n	8003218 <RI_GetPtrReg+0x28>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80032e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003350 <RI_GetPtrReg+0x160>)
 80032e8:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80032ea:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80032ec:	321c      	adds	r2, #28
            break;
 80032ee:	e791      	b.n	8003214 <RI_GetPtrReg+0x24>
 80032f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003360 <RI_GetPtrReg+0x170>)
  uint8_t retVal = MCP_CMD_OK;
 80032f2:	2000      	movs	r0, #0
 80032f4:	e78e      	b.n	8003214 <RI_GetPtrReg+0x24>
 80032f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003364 <RI_GetPtrReg+0x174>)
 80032f8:	2000      	movs	r0, #0
 80032fa:	e78b      	b.n	8003214 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80032fc:	4b14      	ldr	r3, [pc, #80]	@ (8003350 <RI_GetPtrReg+0x160>)
 80032fe:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003300:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003302:	321a      	adds	r2, #26
            break;
 8003304:	e786      	b.n	8003214 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <RI_GetPtrReg+0x160>)
  uint8_t retVal = MCP_CMD_OK;
 8003308:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800330a:	685a      	ldr	r2, [r3, #4]
             break;
 800330c:	e782      	b.n	8003214 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <RI_GetPtrReg+0x160>)
 8003310:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003312:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003314:	320e      	adds	r2, #14
            break;
 8003316:	e77d      	b.n	8003214 <RI_GetPtrReg+0x24>
 8003318:	4a13      	ldr	r2, [pc, #76]	@ (8003368 <RI_GetPtrReg+0x178>)
  uint8_t retVal = MCP_CMD_OK;
 800331a:	2000      	movs	r0, #0
 800331c:	e77a      	b.n	8003214 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800331e:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <RI_GetPtrReg+0x160>)
 8003320:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003322:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003324:	3218      	adds	r2, #24
            break;
 8003326:	e775      	b.n	8003214 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003328:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <RI_GetPtrReg+0x160>)
 800332a:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800332c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 800332e:	3204      	adds	r2, #4
            break;
 8003330:	e770      	b.n	8003214 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003332:	4b07      	ldr	r3, [pc, #28]	@ (8003350 <RI_GetPtrReg+0x160>)
 8003334:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003336:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003338:	320c      	adds	r2, #12
            break;
 800333a:	e76b      	b.n	8003214 <RI_GetPtrReg+0x24>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800333c:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <RI_GetPtrReg+0x160>)
 800333e:	685a      	ldr	r2, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8003340:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003342:	3212      	adds	r2, #18
            break;
 8003344:	e766      	b.n	8003214 <RI_GetPtrReg+0x24>
 8003346:	bf00      	nop
 8003348:	20001928 	.word	0x20001928
 800334c:	20000098 	.word	0x20000098
 8003350:	20000724 	.word	0x20000724
 8003354:	20000156 	.word	0x20000156
 8003358:	2000009c 	.word	0x2000009c
 800335c:	2000011c 	.word	0x2000011c
 8003360:	20000154 	.word	0x20000154
 8003364:	20000094 	.word	0x20000094
 8003368:	20000114 	.word	0x20000114

0800336c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800336c:	4a6e      	ldr	r2, [pc, #440]	@ (8003528 <RCM_RegisterRegConv+0x1bc>)
 800336e:	6813      	ldr	r3, [r2, #0]
{
 8003370:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003372:	2b00      	cmp	r3, #0
 8003374:	d036      	beq.n	80033e4 <RCM_RegisterRegConv+0x78>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003376:	7919      	ldrb	r1, [r3, #4]
 8003378:	f890 c004 	ldrb.w	ip, [r0, #4]
 800337c:	4561      	cmp	r1, ip
 800337e:	d01e      	beq.n	80033be <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003380:	6854      	ldr	r4, [r2, #4]
 8003382:	2c00      	cmp	r4, #0
 8003384:	f000 80af 	beq.w	80034e6 <RCM_RegisterRegConv+0x17a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003388:	7921      	ldrb	r1, [r4, #4]
 800338a:	4561      	cmp	r1, ip
  uint8_t handle = 255U;
 800338c:	f04f 03ff 	mov.w	r3, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003390:	d031      	beq.n	80033f6 <RCM_RegisterRegConv+0x8a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003392:	6895      	ldr	r5, [r2, #8]
 8003394:	2d00      	cmp	r5, #0
 8003396:	f000 8093 	beq.w	80034c0 <RCM_RegisterRegConv+0x154>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800339a:	7929      	ldrb	r1, [r5, #4]
 800339c:	4561      	cmp	r1, ip
 800339e:	d030      	beq.n	8003402 <RCM_RegisterRegConv+0x96>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033a0:	68d4      	ldr	r4, [r2, #12]
 80033a2:	2c00      	cmp	r4, #0
 80033a4:	f000 809a 	beq.w	80034dc <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80033a8:	7921      	ldrb	r1, [r4, #4]
 80033aa:	4561      	cmp	r1, ip
 80033ac:	f000 80a7 	beq.w	80034fe <RCM_RegisterRegConv+0x192>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	bf88      	it	hi
 80033b4:	23ff      	movhi	r3, #255	@ 0xff
 80033b6:	f240 80ae 	bls.w	8003516 <RCM_RegisterRegConv+0x1aa>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 80033ba:	7303      	strb	r3, [r0, #12]
}
 80033bc:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80033be:	6801      	ldr	r1, [r0, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4299      	cmp	r1, r3
 80033c4:	d023      	beq.n	800340e <RCM_RegisterRegConv+0xa2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033c6:	6854      	ldr	r4, [r2, #4]
 80033c8:	2c00      	cmp	r4, #0
 80033ca:	d1dd      	bne.n	8003388 <RCM_RegisterRegConv+0x1c>
 80033cc:	6895      	ldr	r5, [r2, #8]
      i++;
 80033ce:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	d1e2      	bne.n	800339a <RCM_RegisterRegConv+0x2e>
 80033d4:	68d4      	ldr	r4, [r2, #12]
 80033d6:	b1dc      	cbz	r4, 8003410 <RCM_RegisterRegConv+0xa4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80033d8:	f894 c004 	ldrb.w	ip, [r4, #4]
 80033dc:	7905      	ldrb	r5, [r0, #4]
 80033de:	45ac      	cmp	ip, r5
 80033e0:	d116      	bne.n	8003410 <RCM_RegisterRegConv+0xa4>
 80033e2:	e08d      	b.n	8003500 <RCM_RegisterRegConv+0x194>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80033e4:	6854      	ldr	r4, [r2, #4]
 80033e6:	2c00      	cmp	r4, #0
 80033e8:	f000 808f 	beq.w	800350a <RCM_RegisterRegConv+0x19e>
 80033ec:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80033f0:	7921      	ldrb	r1, [r4, #4]
 80033f2:	4561      	cmp	r1, ip
 80033f4:	d1cd      	bne.n	8003392 <RCM_RegisterRegConv+0x26>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80033f6:	6824      	ldr	r4, [r4, #0]
 80033f8:	6801      	ldr	r1, [r0, #0]
 80033fa:	428c      	cmp	r4, r1
 80033fc:	d1c9      	bne.n	8003392 <RCM_RegisterRegConv+0x26>
      i++;
 80033fe:	2301      	movs	r3, #1
 8003400:	e006      	b.n	8003410 <RCM_RegisterRegConv+0xa4>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003402:	682c      	ldr	r4, [r5, #0]
 8003404:	6801      	ldr	r1, [r0, #0]
 8003406:	428c      	cmp	r4, r1
 8003408:	d1ca      	bne.n	80033a0 <RCM_RegisterRegConv+0x34>
      i++;
 800340a:	2302      	movs	r3, #2
 800340c:	e000      	b.n	8003410 <RCM_RegisterRegConv+0xa4>
    uint8_t i = 0;
 800340e:	2300      	movs	r3, #0
      RCM_handle_array [handle] = regConv;
 8003410:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003414:	688a      	ldr	r2, [r1, #8]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8003416:	4c45      	ldr	r4, [pc, #276]	@ (800352c <RCM_RegisterRegConv+0x1c0>)
 8003418:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 800341a:	07d2      	lsls	r2, r2, #31
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 800341c:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003420:	d411      	bmi.n	8003446 <RCM_RegisterRegConv+0xda>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003422:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003424:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003428:	f022 0220 	bic.w	r2, r2, #32
 800342c:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800342e:	600c      	str	r4, [r1, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003430:	684a      	ldr	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003432:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003436:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800343a:	604a      	str	r2, [r1, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800343c:	600c      	str	r4, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800343e:	688a      	ldr	r2, [r1, #8]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003446:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003448:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800344c:	62ca      	str	r2, [r1, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800344e:	7902      	ldrb	r2, [r0, #4]
 8003450:	2a09      	cmp	r2, #9
 8003452:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8003456:	d82d      	bhi.n	80034b4 <RCM_RegisterRegConv+0x148>
 8003458:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 800345c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003460:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 8003468:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800346c:	fab4 f484 	clz	r4, r4
 8003470:	fa2e fe04 	lsr.w	lr, lr, r4
 8003474:	310c      	adds	r1, #12
  MODIFY_REG(*preg,
 8003476:	f002 72f8 	and.w	r2, r2, #32505856	@ 0x1f00000
 800347a:	f851 402e 	ldr.w	r4, [r1, lr, lsl #2]
 800347e:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 8003482:	fa9c f5ac 	rbit	r5, ip
 8003486:	fab5 f585 	clz	r5, r5
 800348a:	fa9c fcac 	rbit	ip, ip
 800348e:	6886      	ldr	r6, [r0, #8]
 8003490:	fabc fc8c 	clz	ip, ip
 8003494:	fa22 f505 	lsr.w	r5, r2, r5
 8003498:	fa22 f20c 	lsr.w	r2, r2, ip
 800349c:	fa06 fc02 	lsl.w	ip, r6, r2
 80034a0:	2207      	movs	r2, #7
 80034a2:	40aa      	lsls	r2, r5
 80034a4:	ea24 0202 	bic.w	r2, r4, r2
 80034a8:	ea42 020c 	orr.w	r2, r2, ip
 80034ac:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
  regConv->convHandle = handle;
 80034b0:	7303      	strb	r3, [r0, #12]
}
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80034b4:	3c1e      	subs	r4, #30
 80034b6:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80034ba:	f002 7e00 	and.w	lr, r2, #33554432	@ 0x2000000
 80034be:	e7d1      	b.n	8003464 <RCM_RegisterRegConv+0xf8>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d92a      	bls.n	800351a <RCM_RegisterRegConv+0x1ae>
 80034c4:	68d3      	ldr	r3, [r2, #12]
 80034c6:	b353      	cbz	r3, 800351e <RCM_RegisterRegConv+0x1b2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80034c8:	7919      	ldrb	r1, [r3, #4]
 80034ca:	4561      	cmp	r1, ip
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80034cc:	6801      	ldr	r1, [r0, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80034ce:	d19c      	bne.n	800340a <RCM_RegisterRegConv+0x9e>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80034d0:	681b      	ldr	r3, [r3, #0]
      i++;
 80034d2:	4299      	cmp	r1, r3
 80034d4:	bf0c      	ite	eq
 80034d6:	2303      	moveq	r3, #3
 80034d8:	2302      	movne	r3, #2
 80034da:	e799      	b.n	8003410 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80034dc:	2b04      	cmp	r3, #4
 80034de:	6801      	ldr	r1, [r0, #0]
 80034e0:	d996      	bls.n	8003410 <RCM_RegisterRegConv+0xa4>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e794      	b.n	8003410 <RCM_RegisterRegConv+0xa4>
 80034e6:	6895      	ldr	r5, [r2, #8]
      i++;
 80034e8:	2301      	movs	r3, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80034ea:	2d00      	cmp	r5, #0
 80034ec:	f47f af55 	bne.w	800339a <RCM_RegisterRegConv+0x2e>
 80034f0:	68d4      	ldr	r4, [r2, #12]
 80034f2:	b184      	cbz	r4, 8003516 <RCM_RegisterRegConv+0x1aa>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80034f4:	7921      	ldrb	r1, [r4, #4]
 80034f6:	4561      	cmp	r1, ip
 80034f8:	6801      	ldr	r1, [r0, #0]
 80034fa:	d189      	bne.n	8003410 <RCM_RegisterRegConv+0xa4>
 80034fc:	e000      	b.n	8003500 <RCM_RegisterRegConv+0x194>
 80034fe:	6801      	ldr	r1, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003500:	6824      	ldr	r4, [r4, #0]
 8003502:	428c      	cmp	r4, r1
 8003504:	f47f af54 	bne.w	80033b0 <RCM_RegisterRegConv+0x44>
 8003508:	e7eb      	b.n	80034e2 <RCM_RegisterRegConv+0x176>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800350a:	6895      	ldr	r5, [r2, #8]
 800350c:	b14d      	cbz	r5, 8003522 <RCM_RegisterRegConv+0x1b6>
 800350e:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003512:	4623      	mov	r3, r4
 8003514:	e741      	b.n	800339a <RCM_RegisterRegConv+0x2e>
 8003516:	6801      	ldr	r1, [r0, #0]
 8003518:	e77a      	b.n	8003410 <RCM_RegisterRegConv+0xa4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800351a:	462b      	mov	r3, r5
 800351c:	e7e8      	b.n	80034f0 <RCM_RegisterRegConv+0x184>
 800351e:	6801      	ldr	r1, [r0, #0]
 8003520:	e773      	b.n	800340a <RCM_RegisterRegConv+0x9e>
 8003522:	6801      	ldr	r1, [r0, #0]
    uint8_t i = 0;
 8003524:	462b      	mov	r3, r5
 8003526:	e755      	b.n	80033d4 <RCM_RegisterRegConv+0x68>
 8003528:	20001954 	.word	0x20001954
 800352c:	20001934 	.word	0x20001934

08003530 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003530:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <RCM_ExecRegularConv+0x68>)
 8003532:	7b02      	ldrb	r2, [r0, #12]
 8003534:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003538:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800353a:	6812      	ldr	r2, [r2, #0]
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800353c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003540:	2b09      	cmp	r3, #9
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003542:	bf93      	iteet	ls
 8003544:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8003548:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800354a:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 800354e:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
 8003552:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003556:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800355a:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800355e:	fab1 f181 	clz	r1, r1
 8003562:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8003566:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8003572:	f021 011f 	bic.w	r1, r1, #31
 8003576:	4319      	orrs	r1, r3

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 8003578:	0153      	lsls	r3, r2, #5
 800357a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
 800357e:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8003582:	2101      	movs	r1, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003584:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8003586:	f8c3 1178 	str.w	r1, [r3, #376]	@ 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 800358a:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u)
 800358c:	079b      	lsls	r3, r3, #30
 800358e:	d5fc      	bpl.n	800358a <RCM_ExecRegularConv+0x5a>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003590:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  {
    /* Nothing to do */
  }
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return (retVal);
}
 8003592:	b280      	uxth	r0, r0
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20001954 	.word	0x20001954

0800359c <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 800359c:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <RCM_ExecUserConv+0x48>)
{
 800359e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 80035a2:	681c      	ldr	r4, [r3, #0]
 80035a4:	b124      	cbz	r4, 80035b0 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80035a6:	4d10      	ldr	r5, [pc, #64]	@ (80035e8 <RCM_ExecUserConv+0x4c>)
    handle = RCM_UserConvHandle->convHandle;
 80035a8:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80035aa:	782b      	ldrb	r3, [r5, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 80035b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7ff ffbb 	bl	8003530 <RCM_ExecRegularConv>
 80035ba:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <RCM_ExecUserConv+0x50>)
 80035bc:	8018      	strh	r0, [r3, #0]
      RCM_UserConvState = RCM_USERCONV_EOC;
 80035be:	2302      	movs	r3, #2
 80035c0:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 80035c2:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <RCM_ExecUserConv+0x54>)
 80035c4:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80035c8:	4601      	mov	r1, r0
      if (RCM_CB_array[handle].cb != NULL)
 80035ca:	2f00      	cmp	r7, #0
 80035cc:	d0f0      	beq.n	80035b0 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80035ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80035d2:	4620      	mov	r0, r4
 80035d4:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80035da:	463b      	mov	r3, r7
}
 80035dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80035e0:	4718      	bx	r3
 80035e2:	bf00      	nop
 80035e4:	2000192c 	.word	0x2000192c
 80035e8:	20001930 	.word	0x20001930
 80035ec:	20001932 	.word	0x20001932
 80035f0:	20001934 	.word	0x20001934

080035f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f6:	4b0d      	ldr	r3, [pc, #52]	@ (800362c <HAL_MspInit+0x38>)
 80035f8:	2100      	movs	r1, #0
 80035fa:	9100      	str	r1, [sp, #0]
 80035fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003602:	645a      	str	r2, [r3, #68]	@ 0x44
 8003604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003606:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800360a:	9200      	str	r2, [sp, #0]
 800360c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	9101      	str	r1, [sp, #4]
 8003610:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003612:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003616:	641a      	str	r2, [r3, #64]	@ 0x40
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003622:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003624:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003626:	f000 bdab 	b.w	8004180 <HAL_NVIC_SetPriorityGrouping>
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003630:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003632:	4b1f      	ldr	r3, [pc, #124]	@ (80036b0 <HAL_ADC_MspInit+0x80>)
 8003634:	6802      	ldr	r2, [r0, #0]
{
 8003636:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800363a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003640:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003644:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8003646:	d001      	beq.n	800364c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003648:	b00a      	add	sp, #40	@ 0x28
 800364a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800364c:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8003650:	9401      	str	r4, [sp, #4]
 8003652:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003654:	4817      	ldr	r0, [pc, #92]	@ (80036b4 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003656:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800365a:	645a      	str	r2, [r3, #68]	@ 0x44
 800365c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800365e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8003662:	9201      	str	r2, [sp, #4]
 8003664:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003666:	9402      	str	r4, [sp, #8]
 8003668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800366a:	f042 0204 	orr.w	r2, r2, #4
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003670:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003672:	f002 0204 	and.w	r2, r2, #4
 8003676:	9202      	str	r2, [sp, #8]
 8003678:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367a:	9403      	str	r4, [sp, #12]
 800367c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 800368c:	2603      	movs	r6, #3
 800368e:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003690:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8003694:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003698:	f000 fe84 	bl	80043a4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369c:	4806      	ldr	r0, [pc, #24]	@ (80036b8 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 80036a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a6:	f000 fe7d 	bl	80043a4 <HAL_GPIO_Init>
}
 80036aa:	b00a      	add	sp, #40	@ 0x28
 80036ac:	bdd0      	pop	{r4, r6, r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40012000 	.word	0x40012000
 80036b4:	40020800 	.word	0x40020800
 80036b8:	40020000 	.word	0x40020000

080036bc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80036bc:	4b0a      	ldr	r3, [pc, #40]	@ (80036e8 <HAL_TIM_Base_MspInit+0x2c>)
 80036be:	6802      	ldr	r2, [r0, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d000      	beq.n	80036c6 <HAL_TIM_Base_MspInit+0xa>
 80036c4:	4770      	bx	lr
{
 80036c6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036c8:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 80036cc:	2200      	movs	r2, #0
 80036ce:	9201      	str	r2, [sp, #4]
 80036d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80036d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80036e2:	b002      	add	sp, #8
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40010000 	.word	0x40010000
 80036ec:	00000000 	.word	0x00000000

080036f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036f0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM2)
 80036f2:	6802      	ldr	r2, [r0, #0]
{
 80036f4:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f6:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM2)
 80036f8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003700:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003704:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM2)
 8003706:	d002      	beq.n	800370e <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003708:	b009      	add	sp, #36	@ 0x24
 800370a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800370e:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8003716:	f040 0001 	orr.w	r0, r0, #1
 800371a:	6410      	str	r0, [r2, #64]	@ 0x40
 800371c:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 800371e:	f000 0001 	and.w	r0, r0, #1
 8003722:	9000      	str	r0, [sp, #0]
 8003724:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	480d      	ldr	r0, [pc, #52]	@ (8003760 <HAL_TIM_Encoder_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	6313      	str	r3, [r2, #48]	@ 0x30
 8003732:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8003734:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8003758 <HAL_TIM_Encoder_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003740:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8003742:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003746:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003748:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374a:	f000 fe2b 	bl	80043a4 <HAL_GPIO_Init>
}
 800374e:	b009      	add	sp, #36	@ 0x24
 8003750:	f85d fb04 	ldr.w	pc, [sp], #4
 8003754:	f3af 8000 	nop.w
 8003758:	00000300 	.word	0x00000300
 800375c:	00000002 	.word	0x00000002
 8003760:	40020400 	.word	0x40020400

08003764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003764:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003766:	4a1f      	ldr	r2, [pc, #124]	@ (80037e4 <HAL_TIM_MspPostInit+0x80>)
 8003768:	6801      	ldr	r1, [r0, #0]
{
 800376a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800376e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003774:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003778:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800377a:	d001      	beq.n	8003780 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800377c:	b008      	add	sp, #32
 800377e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003780:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003788:	4817      	ldr	r0, [pc, #92]	@ (80037e8 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378a:	f041 0102 	orr.w	r1, r1, #2
 800378e:	6311      	str	r1, [r2, #48]	@ 0x30
 8003790:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003792:	f001 0102 	and.w	r1, r1, #2
 8003796:	9100      	str	r1, [sp, #0]
 8003798:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800379e:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a0:	4323      	orrs	r3, r4
 80037a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037a6:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a8:	4023      	ands	r3, r4
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ae:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80037b0:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80037b4:	2302      	movs	r3, #2
 80037b6:	2602      	movs	r6, #2
 80037b8:	2702      	movs	r7, #2
 80037ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80037be:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c2:	f000 fdef 	bl	80043a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80037c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80037ca:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037cc:	4807      	ldr	r0, [pc, #28]	@ (80037ec <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037ce:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80037d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80037d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f000 fde3 	bl	80043a4 <HAL_GPIO_Init>
}
 80037de:	b008      	add	sp, #32
 80037e0:	bdd0      	pop	{r4, r6, r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40020400 	.word	0x40020400
 80037ec:	40020000 	.word	0x40020000

080037f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037f0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80037f2:	4b32      	ldr	r3, [pc, #200]	@ (80038bc <HAL_UART_MspInit+0xcc>)
 80037f4:	6802      	ldr	r2, [r0, #0]
{
 80037f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 80037fa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003800:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003804:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8003806:	d001      	beq.n	800380c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003808:	b008      	add	sp, #32
 800380a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800380c:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8003810:	9400      	str	r4, [sp, #0]
 8003812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003814:	4e2a      	ldr	r6, [pc, #168]	@ (80038c0 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003816:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40
 800381c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800381e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003822:	9200      	str	r2, [sp, #0]
 8003824:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003826:	9401      	str	r4, [sp, #4]
 8003828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003838:	220c      	movs	r2, #12
 800383a:	2302      	movs	r3, #2
 800383c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003840:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003842:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003844:	481f      	ldr	r0, [pc, #124]	@ (80038c4 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003846:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003848:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384c:	f000 fdaa 	bl	80043a4 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003850:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <HAL_UART_MspInit+0xd8>)
 8003852:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003856:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800385a:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800385c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003860:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003864:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003868:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800386c:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003870:	f000 fd02 	bl	8004278 <HAL_DMA_Init>
 8003874:	b9d8      	cbnz	r0, 80038ae <HAL_UART_MspInit+0xbe>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003876:	4c15      	ldr	r4, [pc, #84]	@ (80038cc <HAL_UART_MspInit+0xdc>)
 8003878:	4915      	ldr	r1, [pc, #84]	@ (80038d0 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800387a:	63ae      	str	r6, [r5, #56]	@ 0x38
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800387c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003880:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003882:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003886:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003888:	2140      	movs	r1, #64	@ 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800388a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800388e:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003892:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003896:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800389a:	63b5      	str	r5, [r6, #56]	@ 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800389c:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800389e:	6263      	str	r3, [r4, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038a0:	f000 fcea 	bl	8004278 <HAL_DMA_Init>
 80038a4:	b930      	cbnz	r0, 80038b4 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80038a6:	636c      	str	r4, [r5, #52]	@ 0x34
 80038a8:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80038aa:	b008      	add	sp, #32
 80038ac:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80038ae:	f7fd fbc3 	bl	8001038 <Error_Handler>
 80038b2:	e7e0      	b.n	8003876 <HAL_UART_MspInit+0x86>
      Error_Handler();
 80038b4:	f7fd fbc0 	bl	8001038 <Error_Handler>
 80038b8:	e7f5      	b.n	80038a6 <HAL_UART_MspInit+0xb6>
 80038ba:	bf00      	nop
 80038bc:	40004400 	.word	0x40004400
 80038c0:	200005a8 	.word	0x200005a8
 80038c4:	40020000 	.word	0x40020000
 80038c8:	40026088 	.word	0x40026088
 80038cc:	20000548 	.word	0x20000548
 80038d0:	400260a0 	.word	0x400260a0

080038d4 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <ADC_IRQHandler+0x18>)
 80038d6:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80038d8:	0752      	lsls	r2, r2, #29
 80038da:	d400      	bmi.n	80038de <ADC_IRQHandler+0xa>
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
  }
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80038dc:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	f022 020c 	bic.w	r2, r2, #12
 80038e4:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80038e6:	f7fe b8bb 	b.w	8001a60 <TSK_HighFrequencyTask>
 80038ea:	bf00      	nop
 80038ec:	40012000 	.word	0x40012000

080038f0 <TIM1_UP_TIM10_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80038f0:	4b03      	ldr	r3, [pc, #12]	@ (8003900 <TIM1_UP_TIM10_IRQHandler+0x10>)
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80038f2:	4804      	ldr	r0, [pc, #16]	@ (8003904 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80038f4:	f06f 0201 	mvn.w	r2, #1
 80038f8:	611a      	str	r2, [r3, #16]
 80038fa:	f002 be3d 	b.w	8006578 <R3_1_TIMx_UP_IRQHandler>
 80038fe:	bf00      	nop
 8003900:	40010000 	.word	0x40010000
 8003904:	200002cc 	.word	0x200002cc

08003908 <TIM1_BRK_TIM9_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003908:	4907      	ldr	r1, [pc, #28]	@ (8003928 <TIM1_BRK_TIM9_IRQHandler+0x20>)
/**
  * @brief  This function handles first motor BRK interrupt.
  * @param  None
  */
void TIMx_BRK_M1_IRQHandler(void)
{
 800390a:	b508      	push	{r3, lr}
 800390c:	690b      	ldr	r3, [r1, #16]
 800390e:	061b      	lsls	r3, r3, #24
 8003910:	d505      	bpl.n	800391e <TIM1_BRK_TIM9_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003912:	f06f 0380 	mvn.w	r3, #128	@ 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8003916:	4805      	ldr	r0, [pc, #20]	@ (800392c <TIM1_BRK_TIM9_IRQHandler+0x24>)
 8003918:	610b      	str	r3, [r1, #16]
 800391a:	f7fe fd53 	bl	80023c4 <PWMC_OVP_Handler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800391e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003922:	f7fe b857 	b.w	80019d4 <MC_Scheduler>
 8003926:	bf00      	nop
 8003928:	40010000 	.word	0x40010000
 800392c:	200002cc 	.word	0x200002cc

08003930 <TIM2_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8003930:	4806      	ldr	r0, [pc, #24]	@ (800394c <TIM2_IRQHandler+0x1c>)
 8003932:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	07d1      	lsls	r1, r2, #31
 8003938:	d507      	bpl.n	800394a <TIM2_IRQHandler+0x1a>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	07d2      	lsls	r2, r2, #31
 800393e:	d504      	bpl.n	800394a <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003940:	f06f 0201 	mvn.w	r2, #1
 8003944:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
    ENC_IRQHandler(&ENCODER_M1);
 8003946:	f001 bfc7 	b.w	80058d8 <ENC_IRQHandler>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 800394a:	4770      	bx	lr
 800394c:	20000090 	.word	0x20000090

08003950 <DMA1_Stream5_IRQHandler>:
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream)) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 8003950:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <DMA1_Stream5_IRQHandler+0x18>)
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	0512      	lsls	r2, r2, #20
 8003956:	d400      	bmi.n	800395a <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Stream5_IRQHandler 1 */

}
 8003958:	4770      	bx	lr
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 800395a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 800395e:	4803      	ldr	r0, [pc, #12]	@ (800396c <DMA1_Stream5_IRQHandler+0x1c>)
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	f7fd b8fb 	b.w	8000b5c <ASPEP_HWDataReceivedIT>
 8003966:	bf00      	nop
 8003968:	40026000 	.word	0x40026000
 800396c:	20000494 	.word	0x20000494

08003970 <USART2_IRQHandler>:
/**
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
void USART2_IRQHandler(void)
{
 8003970:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003972:	4b51      	ldr	r3, [pc, #324]	@ (8003ab8 <USART2_IRQHandler+0x148>)
 8003974:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART2_IRQHandler 0 */

  /* USER CODE END UUSART2_IRQHandler 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003976:	0651      	lsls	r1, r2, #25
{
 8003978:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 800397a:	f100 808e 	bmi.w	8003a9a <USART2_IRQHandler+0x12a>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800397e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab8 <USART2_IRQHandler+0x148>)
 8003980:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003982:	0712      	lsls	r2, r2, #28
 8003984:	d402      	bmi.n	800398c <USART2_IRQHandler+0x1c>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	0794      	lsls	r4, r2, #30
 800398a:	d57e      	bpl.n	8003a8a <USART2_IRQHandler+0x11a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 800398c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab8 <USART2_IRQHandler+0x148>)
 800398e:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003990:	07d1      	lsls	r1, r2, #31
 8003992:	d52d      	bpl.n	80039f0 <USART2_IRQHandler+0x80>
  tmpreg = USARTx->SR;
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003998:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 800399e:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 80039a4:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 80039aa:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80039b0:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80039b6:	9b01      	ldr	r3, [sp, #4]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80039bc:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 80039c0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 80039cc:	e840 3100 	strex	r1, r3, [r0]
 80039d0:	2900      	cmp	r1, #0
 80039d2:	d1f3      	bne.n	80039bc <USART2_IRQHandler+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80039d8:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 80039dc:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80039e0:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 80039e8:	e840 3100 	strex	r1, r3, [r0]
 80039ec:	2900      	cmp	r1, #0
 80039ee:	d1f3      	bne.n	80039d8 <USART2_IRQHandler+0x68>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 80039f0:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <USART2_IRQHandler+0x148>)
 80039f2:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 80039f4:	06d2      	lsls	r2, r2, #27
 80039f6:	d546      	bpl.n	8003a86 <USART2_IRQHandler+0x116>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	06db      	lsls	r3, r3, #27
 80039fc:	d543      	bpl.n	8003a86 <USART2_IRQHandler+0x116>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a02:	f202 430c 	addw	r3, r2, #1036	@ 0x40c
 8003a06:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003a0a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	f202 400c 	addw	r0, r2, #1036	@ 0x40c
 8003a12:	e840 3100 	strex	r1, r3, [r0]
 8003a16:	2900      	cmp	r1, #0
 8003a18:	d1f3      	bne.n	8003a02 <USART2_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a1e:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003a22:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003a26:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003a2e:	e840 3100 	strex	r1, r3, [r0]
 8003a32:	2900      	cmp	r1, #0
 8003a34:	d1f3      	bne.n	8003a1e <USART2_IRQHandler+0xae>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a3a:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003a4a:	e840 3100 	strex	r1, r3, [r0]
 8003a4e:	2900      	cmp	r1, #0
 8003a50:	d1f3      	bne.n	8003a3a <USART2_IRQHandler+0xca>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003a52:	4b19      	ldr	r3, [pc, #100]	@ (8003ab8 <USART2_IRQHandler+0x148>)
 8003a54:	685b      	ldr	r3, [r3, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003a5a:	f202 4314 	addw	r3, r2, #1044	@ 0x414
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	f202 4014 	addw	r0, r2, #1044	@ 0x414
 8003a6a:	e840 3100 	strex	r1, r3, [r0]
 8003a6e:	2900      	cmp	r1, #0
 8003a70:	d1f3      	bne.n	8003a5a <USART2_IRQHandler+0xea>
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream));
 8003a72:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <USART2_IRQHandler+0x14c>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003a74:	4812      	ldr	r0, [pc, #72]	@ (8003ac0 <USART2_IRQHandler+0x150>)
 8003a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a7a:	60da      	str	r2, [r3, #12]
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003a7c:	b004      	add	sp, #16
 8003a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003a82:	f7fd b8b9 	b.w	8000bf8 <ASPEP_HWDMAReset>
}
 8003a86:	b004      	add	sp, #16
 8003a88:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8003a8a:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003a8c:	0758      	lsls	r0, r3, #29
 8003a8e:	d5af      	bpl.n	80039f0 <USART2_IRQHandler+0x80>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003a90:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <USART2_IRQHandler+0x148>)
 8003a92:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003a94:	07d1      	lsls	r1, r2, #31
 8003a96:	d5ab      	bpl.n	80039f0 <USART2_IRQHandler+0x80>
 8003a98:	e77c      	b.n	8003994 <USART2_IRQHandler+0x24>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003a9a:	4908      	ldr	r1, [pc, #32]	@ (8003abc <USART2_IRQHandler+0x14c>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003a9c:	4808      	ldr	r0, [pc, #32]	@ (8003ac0 <USART2_IRQHandler+0x150>)
 8003a9e:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003aa2:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
 8003aae:	601c      	str	r4, [r3, #0]
 8003ab0:	f7fc fea8 	bl	8000804 <ASPEP_HWDataTransmittedIT>
 8003ab4:	e763      	b.n	800397e <USART2_IRQHandler+0xe>
 8003ab6:	bf00      	nop
 8003ab8:	40004400 	.word	0x40004400
 8003abc:	40026000 	.word	0x40026000
 8003ac0:	20000494 	.word	0x20000494

08003ac4 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003ac4:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003ac6:	f7fe f8cd 	bl	8001c64 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003aca:	e7fe      	b.n	8003aca <HardFault_Handler+0x6>

08003acc <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003acc:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003ace:	4c0a      	ldr	r4, [pc, #40]	@ (8003af8 <SysTick_Handler+0x2c>)
 8003ad0:	7823      	ldrb	r3, [r4, #0]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d006      	beq.n	8003ae4 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003ae0:	f7fe b8b4 	b.w	8001c4c <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003ae4:	f000 f904 	bl	8003cf0 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003ae8:	f000 fbc2 	bl	8004270 <HAL_SYSTICK_IRQHandler>
 8003aec:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003aee:	7023      	strb	r3, [r4, #0]
}
 8003af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003af4:	f7fe b8aa 	b.w	8001c4c <MC_RunMotorControlTasks>
 8003af8:	2000051c 	.word	0x2000051c

08003afc <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003afc:	6802      	ldr	r2, [r0, #0]
 8003afe:	4611      	mov	r1, r2
 8003b00:	f06f 0340 	mvn.w	r3, #64	@ 0x40
{
 8003b04:	b470      	push	{r4, r5, r6}
 8003b06:	f841 3b0c 	str.w	r3, [r1], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	e841 3400 	strex	r4, r3, [r1]
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d1f7      	bne.n	8003b0a <UASPEP_INIT+0xe>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003b1a:	f102 0114 	add.w	r1, r2, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	e851 3f00 	ldrex	r3, [r1]
 8003b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	e841 3400 	strex	r4, r3, [r1]
 8003b2a:	2c00      	cmp	r4, #0
 8003b2c:	d1f7      	bne.n	8003b1e <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003b2e:	6901      	ldr	r1, [r0, #16]
 8003b30:	4e16      	ldr	r6, [pc, #88]	@ (8003b8c <UASPEP_INIT+0x90>)
 8003b32:	6883      	ldr	r3, [r0, #8]
 8003b34:	5c74      	ldrb	r4, [r6, r1]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003b36:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003b38:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8003b3a:	1d11      	adds	r1, r2, #4
 8003b3c:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003b3e:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003b40:	4611      	mov	r1, r2
 8003b42:	f06f 0440 	mvn.w	r4, #64	@ 0x40
 8003b46:	f841 4b14 	str.w	r4, [r1], #20
 8003b4a:	5cf4      	ldrb	r4, [r6, r3]
 8003b4c:	592b      	ldr	r3, [r5, r4]
 8003b4e:	f043 0310 	orr.w	r3, r3, #16
 8003b52:	512b      	str	r3, [r5, r4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003b58:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	e841 3400 	strex	r4, r3, [r1]
 8003b60:	2c00      	cmp	r4, #0
 8003b62:	d1f7      	bne.n	8003b54 <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003b64:	68c3      	ldr	r3, [r0, #12]
 8003b66:	5cf3      	ldrb	r3, [r6, r3]
 8003b68:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8003b6a:	1d11      	adds	r1, r2, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003b6c:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8003b70:	60a9      	str	r1, [r5, #8]
 8003b72:	f842 3b14 	str.w	r3, [r2], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	e842 3100 	strex	r1, r3, [r2]
 8003b82:	2900      	cmp	r1, #0
 8003b84:	d1f7      	bne.n	8003b76 <UASPEP_INIT+0x7a>
}
 8003b86:	bc70      	pop	{r4, r5, r6}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	0800777c 	.word	0x0800777c

08003b90 <UASPEP_SEND_PACKET>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003b90:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 8003b92:	6905      	ldr	r5, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8003b94:	4e1b      	ldr	r6, [pc, #108]	@ (8003c04 <UASPEP_SEND_PACKET+0x74>)
 8003b96:	6884      	ldr	r4, [r0, #8]
 8003b98:	5d73      	ldrb	r3, [r6, r5]
 8003b9a:	58e7      	ldr	r7, [r4, r3]
 8003b9c:	07ff      	lsls	r7, r7, #31
 8003b9e:	4423      	add	r3, r4
 8003ba0:	d422      	bmi.n	8003be8 <UASPEP_SEND_PACKET+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003ba2:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	0c09      	lsrs	r1, r1, #16
 8003ba8:	0409      	lsls	r1, r1, #16
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
  if (NULL == DMAx)
 8003bae:	b1ac      	cbz	r4, 8003bdc <UASPEP_SEND_PACKET+0x4c>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003bb0:	2d03      	cmp	r5, #3
 8003bb2:	bf94      	ite	ls
 8003bb4:	2200      	movls	r2, #0
 8003bb6:	2201      	movhi	r2, #1
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003bb8:	f015 0503 	ands.w	r5, r5, #3
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003bbc:	f104 0308 	add.w	r3, r4, #8
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream));
 8003bc0:	d015      	beq.n	8003bee <UASPEP_SEND_PACKET+0x5e>
 8003bc2:	2d01      	cmp	r5, #1
 8003bc4:	d01a      	beq.n	8003bfc <UASPEP_SEND_PACKET+0x6c>
 8003bc6:	2d02      	cmp	r5, #2
 8003bc8:	bf14      	ite	ne
 8003bca:	f04f 6100 	movne.w	r1, #134217728	@ 0x8000000
 8003bce:	f44f 1100 	moveq.w	r1, #2097152	@ 0x200000
 8003bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003bd6:	6903      	ldr	r3, [r0, #16]
 8003bd8:	5cf3      	ldrb	r3, [r6, r3]
 8003bda:	4423      	add	r3, r4
 8003bdc:	681a      	ldr	r2, [r3, #0]
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8003bde:	2001      	movs	r0, #1
 8003be0:	4302      	orrs	r2, r0
  else
  {
    result = false;
  }
  return (result);
}
 8003be2:	bcf0      	pop	{r4, r5, r6, r7}
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	4770      	bx	lr
    result = false;
 8003be8:	2000      	movs	r0, #0
}
 8003bea:	bcf0      	pop	{r4, r5, r6, r7}
 8003bec:	4770      	bx	lr
 8003bee:	2120      	movs	r1, #32
 8003bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003bf4:	6903      	ldr	r3, [r0, #16]
 8003bf6:	5cf3      	ldrb	r3, [r6, r3]
 8003bf8:	4423      	add	r3, r4
 8003bfa:	e7ef      	b.n	8003bdc <UASPEP_SEND_PACKET+0x4c>
 8003bfc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003c00:	e7f6      	b.n	8003bf0 <UASPEP_SEND_PACKET+0x60>
 8003c02:	bf00      	nop
 8003c04:	0800777c 	.word	0x0800777c

08003c08 <UASPEP_RECEIVE_BUFFER>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003c08:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003c0a:	68c3      	ldr	r3, [r0, #12]
 8003c0c:	4d09      	ldr	r5, [pc, #36]	@ (8003c34 <UASPEP_RECEIVE_BUFFER+0x2c>)
 8003c0e:	6844      	ldr	r4, [r0, #4]
 8003c10:	5ce8      	ldrb	r0, [r5, r3]
 8003c12:	eb04 0c00 	add.w	ip, r4, r0
 8003c16:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003c1a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8cc 3004 	str.w	r3, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003c28:	5823      	ldr	r3, [r4, r0]
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	5023      	str	r3, [r4, r0]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8003c30:	bc30      	pop	{r4, r5}
 8003c32:	4770      	bx	lr
 8003c34:	0800777c 	.word	0x0800777c

08003c38 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003c38:	6802      	ldr	r2, [r0, #0]
{
 8003c3a:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003c40:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8003c42:	6853      	ldr	r3, [r2, #4]
 8003c44:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003c46:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003c48:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	e852 3f00 	ldrex	r3, [r2]
 8003c4e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	e842 3100 	strex	r1, r3, [r2]
 8003c56:	2900      	cmp	r1, #0
 8003c58:	d1f7      	bne.n	8003c4a <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003c5a:	b002      	add	sp, #8
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop

08003c60 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c60:	4a03      	ldr	r2, [pc, #12]	@ (8003c70 <SystemInit+0x10>)
 8003c62:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003c66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c74:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c76:	4a0e      	ldr	r2, [pc, #56]	@ (8003cb0 <HAL_InitTick+0x3c>)
 8003c78:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb4 <HAL_InitTick+0x40>)
 8003c7a:	7812      	ldrb	r2, [r2, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
{
 8003c7e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c84:	fbb0 f0f2 	udiv	r0, r0, r2
 8003c88:	fbb3 f0f0 	udiv	r0, r3, r0
 8003c8c:	f000 fad4 	bl	8004238 <HAL_SYSTICK_Config>
 8003c90:	b908      	cbnz	r0, 8003c96 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c92:	2d0f      	cmp	r5, #15
 8003c94:	d901      	bls.n	8003c9a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003c96:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003c98:	bd38      	pop	{r3, r4, r5, pc}
 8003c9a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	f000 fa7e 	bl	80041a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ca8:	4b03      	ldr	r3, [pc, #12]	@ (8003cb8 <HAL_InitTick+0x44>)
 8003caa:	4620      	mov	r0, r4
 8003cac:	601d      	str	r5, [r3, #0]
}
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	20000524 	.word	0x20000524
 8003cb4:	20000520 	.word	0x20000520
 8003cb8:	20000528 	.word	0x20000528

08003cbc <HAL_Init>:
{
 8003cbc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_Init+0x30>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cd8:	2003      	movs	r0, #3
 8003cda:	f000 fa51 	bl	8004180 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cde:	2004      	movs	r0, #4
 8003ce0:	f7ff ffc8 	bl	8003c74 <HAL_InitTick>
  HAL_MspInit();
 8003ce4:	f7ff fc86 	bl	80035f4 <HAL_MspInit>
}
 8003ce8:	2000      	movs	r0, #0
 8003cea:	bd08      	pop	{r3, pc}
 8003cec:	40023c00 	.word	0x40023c00

08003cf0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003cf0:	4a03      	ldr	r2, [pc, #12]	@ (8003d00 <HAL_IncTick+0x10>)
 8003cf2:	4b04      	ldr	r3, [pc, #16]	@ (8003d04 <HAL_IncTick+0x14>)
 8003cf4:	6811      	ldr	r1, [r2, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	440b      	add	r3, r1
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20001964 	.word	0x20001964
 8003d04:	20000524 	.word	0x20000524

08003d08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d08:	4b01      	ldr	r3, [pc, #4]	@ (8003d10 <HAL_GetTick+0x8>)
 8003d0a:	6818      	ldr	r0, [r3, #0]
}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20001964 	.word	0x20001964

08003d14 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f000 809e 	beq.w	8003e56 <HAL_ADC_Init+0x142>
{
 8003d1a:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d1c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003d1e:	4604      	mov	r4, r0
 8003d20:	b13d      	cbz	r5, 8003d32 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d24:	06db      	lsls	r3, r3, #27
 8003d26:	d50c      	bpl.n	8003d42 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8003d2e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003d30:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003d32:	f7ff fc7d 	bl	8003630 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003d36:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003d3a:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d3e:	06db      	lsls	r3, r3, #27
 8003d40:	d4f2      	bmi.n	8003d28 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003d42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d44:	4a47      	ldr	r2, [pc, #284]	@ (8003e64 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8003d46:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d4a:	f023 0302 	bic.w	r3, r3, #2
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d54:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d56:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d58:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8003d5c:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d5e:	6851      	ldr	r1, [r2, #4]
 8003d60:	6860      	ldr	r0, [r4, #4]
 8003d62:	4301      	orrs	r1, r0
 8003d64:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d66:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d68:	6920      	ldr	r0, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d6a:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d7a:	685a      	ldr	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d7c:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d7e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003d82:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d8a:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	4302      	orrs	r2, r0
 8003d98:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d9a:	4a33      	ldr	r2, [pc, #204]	@ (8003e68 <HAL_ADC_Init+0x154>)
 8003d9c:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d9e:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003da0:	d051      	beq.n	8003e46 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003da2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003da6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	4311      	orrs	r1, r2
 8003dae:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003db6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	4302      	orrs	r2, r0
 8003dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	f022 0202 	bic.w	r2, r2, #2
 8003dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	7e21      	ldrb	r1, [r4, #24]
 8003dca:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003dce:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dd0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d040      	beq.n	8003e5a <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dd8:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dda:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ddc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003de8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	3901      	subs	r1, #1
 8003dee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003df2:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003df6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003df8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e00:	3901      	subs	r1, #1
 8003e02:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e08:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e0a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8003e18:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8003e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e26:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003e28:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e2a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003e2e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003e30:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003e32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e34:	f023 0303 	bic.w	r3, r3, #3
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003e44:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	e7b3      	b.n	8003dbe <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8003e56:	2001      	movs	r0, #1
}
 8003e58:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	e7c7      	b.n	8003df4 <HAL_ADC_Init+0xe0>
 8003e64:	40012300 	.word	0x40012300
 8003e68:	0f000001 	.word	0x0f000001

08003e6c <HAL_ADC_ConfigChannel>:
{
 8003e6c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003e6e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003e72:	b082      	sub	sp, #8
 8003e74:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8003e76:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003e78:	f04f 0000 	mov.w	r0, #0
 8003e7c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003e7e:	f000 809e 	beq.w	8003fbe <HAL_ADC_ConfigChannel+0x152>
 8003e82:	2301      	movs	r3, #1
 8003e84:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e88:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e8a:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e8c:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e8e:	2d09      	cmp	r5, #9
 8003e90:	b2a8      	uxth	r0, r5
 8003e92:	d828      	bhi.n	8003ee6 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e94:	691e      	ldr	r6, [r3, #16]
 8003e96:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8003e9a:	f04f 0c07 	mov.w	ip, #7
 8003e9e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003ea2:	ea26 060c 	bic.w	r6, r6, ip
 8003ea6:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ea8:	691e      	ldr	r6, [r3, #16]
 8003eaa:	fa04 f40e 	lsl.w	r4, r4, lr
 8003eae:	4334      	orrs	r4, r6
 8003eb0:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 8003eb2:	684c      	ldr	r4, [r1, #4]
 8003eb4:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003eb6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8003eba:	d82a      	bhi.n	8003f12 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ebc:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003ebe:	3905      	subs	r1, #5
 8003ec0:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ec4:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ec6:	fa0c f101 	lsl.w	r1, ip, r1
 8003eca:	ea24 0101 	bic.w	r1, r4, r1
 8003ece:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ed0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ed2:	4308      	orrs	r0, r1
 8003ed4:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ed6:	493b      	ldr	r1, [pc, #236]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x158>)
 8003ed8:	428b      	cmp	r3, r1
 8003eda:	d02b      	beq.n	8003f34 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8003edc:	2000      	movs	r0, #0
 8003ede:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8003ee2:	b002      	add	sp, #8
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ee6:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8003eea:	68de      	ldr	r6, [r3, #12]
 8003eec:	f1ac 0c1e 	sub.w	ip, ip, #30
 8003ef0:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ef4:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ef8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003efc:	ea26 060c 	bic.w	r6, r6, ip
 8003f00:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f02:	68de      	ldr	r6, [r3, #12]
 8003f04:	4334      	orrs	r4, r6
 8003f06:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8003f08:	684c      	ldr	r4, [r1, #4]
 8003f0a:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f0c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8003f10:	d9d4      	bls.n	8003ebc <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8003f12:	2c0c      	cmp	r4, #12
 8003f14:	d81f      	bhi.n	8003f56 <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f16:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003f18:	3923      	subs	r1, #35	@ 0x23
 8003f1a:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f1c:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f1e:	fa06 f101 	lsl.w	r1, r6, r1
 8003f22:	ea24 0101 	bic.w	r1, r4, r1
 8003f26:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f2a:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f2c:	4925      	ldr	r1, [pc, #148]	@ (8003fc4 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f2e:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f30:	428b      	cmp	r3, r1
 8003f32:	d1d3      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x70>
 8003f34:	2d12      	cmp	r5, #18
 8003f36:	d01b      	beq.n	8003f70 <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f38:	4b23      	ldr	r3, [pc, #140]	@ (8003fc8 <HAL_ADC_ConfigChannel+0x15c>)
 8003f3a:	429d      	cmp	r5, r3
 8003f3c:	d022      	beq.n	8003f84 <HAL_ADC_ConfigChannel+0x118>
 8003f3e:	2d11      	cmp	r5, #17
 8003f40:	d1cc      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f42:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <HAL_ADC_ConfigChannel+0x160>)
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8003f4a:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8003f52:	6059      	str	r1, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f54:	e7c2      	b.n	8003edc <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f56:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8003f58:	3941      	subs	r1, #65	@ 0x41
 8003f5a:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f5c:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f5e:	fa06 f101 	lsl.w	r1, r6, r1
 8003f62:	ea24 0101 	bic.w	r1, r4, r1
 8003f66:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f6a:	4308      	orrs	r0, r1
 8003f6c:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8003f6e:	e7b2      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f70:	4b16      	ldr	r3, [pc, #88]	@ (8003fcc <HAL_ADC_ConfigChannel+0x160>)
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8003f78:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8003f80:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f82:	e7ab      	b.n	8003edc <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f84:	4b11      	ldr	r3, [pc, #68]	@ (8003fcc <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f86:	4c12      	ldr	r4, [pc, #72]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f88:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f8a:	4812      	ldr	r0, [pc, #72]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f8c:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8003f90:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8003f98:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	fba0 0303 	umull	r0, r3, r0, r3
 8003fa0:	0c9b      	lsrs	r3, r3, #18
 8003fa2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003faa:	9b01      	ldr	r3, [sp, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d095      	beq.n	8003edc <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003fb0:	9b01      	ldr	r3, [sp, #4]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003fb6:	9b01      	ldr	r3, [sp, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f9      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x144>
 8003fbc:	e78e      	b.n	8003edc <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003fbe:	2002      	movs	r0, #2
}
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	40012000 	.word	0x40012000
 8003fc8:	10000012 	.word	0x10000012
 8003fcc:	40012300 	.word	0x40012300
 8003fd0:	20000520 	.word	0x20000520
 8003fd4:	431bde83 	.word	0x431bde83

08003fd8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fda:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003fde:	698d      	ldr	r5, [r1, #24]
  __HAL_LOCK(hadc);
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	f000 80c2 	beq.w	800416a <HAL_ADCEx_InjectedConfigChannel+0x192>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003fec:	680c      	ldr	r4, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003fee:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003ff0:	688a      	ldr	r2, [r1, #8]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003ff2:	2c09      	cmp	r4, #9
 8003ff4:	4684      	mov	ip, r0
 8003ff6:	b2a0      	uxth	r0, r4
 8003ff8:	d861      	bhi.n	80040be <HAL_ADCEx_InjectedConfigChannel+0xe6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003ffa:	691e      	ldr	r6, [r3, #16]
 8003ffc:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8004000:	2707      	movs	r7, #7
 8004002:	fa07 f70e 	lsl.w	r7, r7, lr
 8004006:	ea26 0607 	bic.w	r6, r6, r7
 800400a:	611e      	str	r6, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800400c:	691e      	ldr	r6, [r3, #16]
 800400e:	fa02 f20e 	lsl.w	r2, r2, lr
 8004012:	4332      	orrs	r2, r6
 8004014:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004018:	690f      	ldr	r7, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800401a:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800401c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004020:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004022:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004024:	f107 3eff 	add.w	lr, r7, #4294967295
 8004028:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800402e:	1cf2      	adds	r2, r6, #3
 8004030:	1bd2      	subs	r2, r2, r7
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8004036:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800403a:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800403e:	4090      	lsls	r0, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004040:	fa0e f202 	lsl.w	r2, lr, r2
 8004044:	ea27 0202 	bic.w	r2, r7, r2
 8004048:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800404a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800404c:	4310      	orrs	r0, r2
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800404e:	4a48      	ldr	r2, [pc, #288]	@ (8004170 <HAL_ADCEx_InjectedConfigChannel+0x198>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004050:	6398      	str	r0, [r3, #56]	@ 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004052:	4295      	cmp	r5, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800405a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800405c:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800405e:	d065      	beq.n	800412c <HAL_ADCEx_InjectedConfigChannel+0x154>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004060:	4315      	orrs	r5, r2
 8004062:	609d      	str	r5, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004064:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004066:	69c8      	ldr	r0, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004068:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800406c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	4302      	orrs	r2, r0
 8004072:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004074:	7d4a      	ldrb	r2, [r1, #21]
 8004076:	2a00      	cmp	r2, #0
 8004078:	d031      	beq.n	80040de <HAL_ADCEx_InjectedConfigChannel+0x106>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004080:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004082:	7d0a      	ldrb	r2, [r1, #20]
 8004084:	2a00      	cmp	r2, #0
 8004086:	d031      	beq.n	80040ec <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800408e:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8004090:	2e02      	cmp	r6, #2
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004092:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 8004094:	d031      	beq.n	80040fa <HAL_ADCEx_InjectedConfigChannel+0x122>
 8004096:	2e03      	cmp	r6, #3
 8004098:	d056      	beq.n	8004148 <HAL_ADCEx_InjectedConfigChannel+0x170>
 800409a:	2e01      	cmp	r6, #1
 800409c:	d04a      	beq.n	8004134 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800409e:	6a19      	ldr	r1, [r3, #32]
 80040a0:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 80040a4:	f021 010f 	bic.w	r1, r1, #15
 80040a8:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80040aa:	6a19      	ldr	r1, [r3, #32]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80040b0:	4a30      	ldr	r2, [pc, #192]	@ (8004174 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d02d      	beq.n	8004112 <HAL_ADCEx_InjectedConfigChannel+0x13a>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b6:	2000      	movs	r0, #0
 80040b8:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
}
 80040bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80040be:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 80040c2:	68df      	ldr	r7, [r3, #12]
 80040c4:	3e1e      	subs	r6, #30
 80040c6:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80040ca:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80040cc:	fa0e f606 	lsl.w	r6, lr, r6
 80040d0:	ea27 0606 	bic.w	r6, r7, r6
 80040d4:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80040d6:	68de      	ldr	r6, [r3, #12]
 80040d8:	4332      	orrs	r2, r6
 80040da:	60da      	str	r2, [r3, #12]
 80040dc:	e79b      	b.n	8004016 <HAL_ADCEx_InjectedConfigChannel+0x3e>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e4:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80040e6:	7d0a      	ldrb	r2, [r1, #20]
 80040e8:	2a00      	cmp	r2, #0
 80040ea:	d1cd      	bne.n	8004088 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040f2:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80040f4:	2e02      	cmp	r6, #2
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80040f6:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 80040f8:	d1cd      	bne.n	8004096 <HAL_ADCEx_InjectedConfigChannel+0xbe>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80040fa:	6999      	ldr	r1, [r3, #24]
 80040fc:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8004100:	f021 010f 	bic.w	r1, r1, #15
 8004104:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004106:	6999      	ldr	r1, [r3, #24]
 8004108:	430a      	orrs	r2, r1
 800410a:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800410c:	4a19      	ldr	r2, [pc, #100]	@ (8004174 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d1d1      	bne.n	80040b6 <HAL_ADCEx_InjectedConfigChannel+0xde>
 8004112:	2c12      	cmp	r4, #18
 8004114:	d022      	beq.n	800415c <HAL_ADCEx_InjectedConfigChannel+0x184>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004116:	4b18      	ldr	r3, [pc, #96]	@ (8004178 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 8004118:	429c      	cmp	r4, r3
 800411a:	d001      	beq.n	8004120 <HAL_ADCEx_InjectedConfigChannel+0x148>
 800411c:	2c11      	cmp	r4, #17
 800411e:	d1ca      	bne.n	80040b6 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004120:	4a16      	ldr	r2, [pc, #88]	@ (800417c <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8004122:	6853      	ldr	r3, [r2, #4]
 8004124:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004128:	6053      	str	r3, [r2, #4]
 800412a:	e7c4      	b.n	80040b6 <HAL_ADCEx_InjectedConfigChannel+0xde>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800412c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	e79f      	b.n	8004074 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004134:	6959      	ldr	r1, [r3, #20]
 8004136:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800413a:	f021 010f 	bic.w	r1, r1, #15
 800413e:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004140:	6959      	ldr	r1, [r3, #20]
 8004142:	430a      	orrs	r2, r1
 8004144:	615a      	str	r2, [r3, #20]
      break;
 8004146:	e7b3      	b.n	80040b0 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004148:	69d9      	ldr	r1, [r3, #28]
 800414a:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800414e:	f021 010f 	bic.w	r1, r1, #15
 8004152:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004154:	69d9      	ldr	r1, [r3, #28]
 8004156:	430a      	orrs	r2, r1
 8004158:	61da      	str	r2, [r3, #28]
      break;
 800415a:	e7a9      	b.n	80040b0 <HAL_ADCEx_InjectedConfigChannel+0xd8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800415c:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8004160:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004164:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004168:	e7a5      	b.n	80040b6 <HAL_ADCEx_InjectedConfigChannel+0xde>
  __HAL_LOCK(hadc);
 800416a:	2002      	movs	r0, #2
}
 800416c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800416e:	bf00      	nop
 8004170:	000f0001 	.word	0x000f0001
 8004174:	40012000 	.word	0x40012000
 8004178:	10000012 	.word	0x10000012
 800417c:	40012300 	.word	0x40012300

08004180 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004180:	4907      	ldr	r1, [pc, #28]	@ (80041a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004182:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004184:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004186:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800418a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800418e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004190:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004192:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800419a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004214 <HAL_NVIC_SetPriority+0x70>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041ac:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ae:	f1c3 0e07 	rsb	lr, r3, #7
 80041b2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041b6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ba:	bf28      	it	cs
 80041bc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c0:	f1bc 0f06 	cmp.w	ip, #6
 80041c4:	d91c      	bls.n	8004200 <HAL_NVIC_SetPriority+0x5c>
 80041c6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	fa03 f30c 	lsl.w	r3, r3, ip
 80041d2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	fa03 f30e 	lsl.w	r3, r3, lr
 80041de:	ea21 0303 	bic.w	r3, r1, r3
 80041e2:	fa03 f30c 	lsl.w	r3, r3, ip
 80041e6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80041ea:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ec:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80041ee:	db0a      	blt.n	8004206 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80041f4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80041f8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80041fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004200:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004202:	4694      	mov	ip, r2
 8004204:	e7e7      	b.n	80041d6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004206:	4a04      	ldr	r2, [pc, #16]	@ (8004218 <HAL_NVIC_SetPriority+0x74>)
 8004208:	f000 000f 	and.w	r0, r0, #15
 800420c:	4402      	add	r2, r0
 800420e:	7613      	strb	r3, [r2, #24]
 8004210:	f85d fb04 	ldr.w	pc, [sp], #4
 8004214:	e000ed00 	.word	0xe000ed00
 8004218:	e000ecfc 	.word	0xe000ecfc

0800421c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800421c:	2800      	cmp	r0, #0
 800421e:	db07      	blt.n	8004230 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004220:	0941      	lsrs	r1, r0, #5
 8004222:	4a04      	ldr	r2, [pc, #16]	@ (8004234 <HAL_NVIC_EnableIRQ+0x18>)
 8004224:	f000 001f 	and.w	r0, r0, #31
 8004228:	2301      	movs	r3, #1
 800422a:	4083      	lsls	r3, r0
 800422c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	e000e100 	.word	0xe000e100

08004238 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004238:	3801      	subs	r0, #1
 800423a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800423e:	d301      	bcc.n	8004244 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004240:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004242:	4770      	bx	lr
{
 8004244:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004246:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424a:	4c07      	ldr	r4, [pc, #28]	@ (8004268 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800424c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8004252:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004256:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004258:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800425a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800425c:	619a      	str	r2, [r3, #24]
}
 800425e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004262:	6119      	str	r1, [r3, #16]
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <HAL_SYSTICK_IRQHandler>:
{
 8004270:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004272:	f7ff fffb 	bl	800426c <HAL_SYSTICK_Callback>
}
 8004276:	bd08      	pop	{r3, pc}

08004278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800427c:	f7ff fd44 	bl	8003d08 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004280:	2c00      	cmp	r4, #0
 8004282:	d06f      	beq.n	8004364 <HAL_DMA_Init+0xec>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004284:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8004286:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004288:	2102      	movs	r1, #2
 800428a:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800428e:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	4605      	mov	r5, r0
 800429a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800429c:	e005      	b.n	80042aa <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800429e:	f7ff fd33 	bl	8003d08 <HAL_GetTick>
 80042a2:	1b43      	subs	r3, r0, r5
 80042a4:	2b05      	cmp	r3, #5
 80042a6:	d839      	bhi.n	800431c <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	07d1      	lsls	r1, r2, #31
 80042ae:	d4f6      	bmi.n	800429e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042b0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80042b4:	68e1      	ldr	r1, [r4, #12]
 80042b6:	4302      	orrs	r2, r0
 80042b8:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ba:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042be:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c0:	432a      	orrs	r2, r5
 80042c2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c4:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80042c6:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c8:	4302      	orrs	r2, r0
 80042ca:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042cc:	4932      	ldr	r1, [pc, #200]	@ (8004398 <HAL_DMA_Init+0x120>)
 80042ce:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80042d0:	6a25      	ldr	r5, [r4, #32]
 80042d2:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042d4:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80042d8:	2904      	cmp	r1, #4
 80042da:	d026      	beq.n	800432a <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042dc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042de:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042e0:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042e4:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042e6:	b2d8      	uxtb	r0, r3
 80042e8:	4a2c      	ldr	r2, [pc, #176]	@ (800439c <HAL_DMA_Init+0x124>)
  hdma->Instance->FCR = tmp;
 80042ea:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042ec:	3810      	subs	r0, #16
 80042ee:	fba2 5200 	umull	r5, r2, r2, r0
 80042f2:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042f4:	492a      	ldr	r1, [pc, #168]	@ (80043a0 <HAL_DMA_Init+0x128>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042fa:	5c89      	ldrb	r1, [r1, r2]
 80042fc:	65e1      	str	r1, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042fe:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8004302:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004304:	bf88      	it	hi
 8004306:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004308:	223f      	movs	r2, #63	@ 0x3f
 800430a:	408a      	lsls	r2, r1
 800430c:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800430e:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004310:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8004312:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004314:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004316:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 800431a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800431c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800431e:	2220      	movs	r2, #32
 8004320:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004322:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8004326:	4618      	mov	r0, r3
}
 8004328:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800432a:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 800432e:	4329      	orrs	r1, r5
 8004330:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8004332:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004334:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8004336:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004338:	f021 0107 	bic.w	r1, r1, #7
 800433c:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800433e:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004342:	2d00      	cmp	r5, #0
 8004344:	d0cf      	beq.n	80042e6 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004346:	b178      	cbz	r0, 8004368 <HAL_DMA_Init+0xf0>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004348:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800434c:	d016      	beq.n	800437c <HAL_DMA_Init+0x104>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800434e:	2a02      	cmp	r2, #2
 8004350:	d903      	bls.n	800435a <HAL_DMA_Init+0xe2>
 8004352:	2a03      	cmp	r2, #3
 8004354:	d1c7      	bne.n	80042e6 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004356:	01ea      	lsls	r2, r5, #7
 8004358:	d5c5      	bpl.n	80042e6 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800435a:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800435c:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800435e:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004360:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8004364:	2001      	movs	r0, #1
}
 8004366:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8004368:	2a01      	cmp	r2, #1
 800436a:	d003      	beq.n	8004374 <HAL_DMA_Init+0xfc>
 800436c:	f032 0202 	bics.w	r2, r2, #2
 8004370:	d1b9      	bne.n	80042e6 <HAL_DMA_Init+0x6e>
 8004372:	e7f0      	b.n	8004356 <HAL_DMA_Init+0xde>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004374:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8004378:	d1b5      	bne.n	80042e6 <HAL_DMA_Init+0x6e>
 800437a:	e7ee      	b.n	800435a <HAL_DMA_Init+0xe2>
    switch (tmp)
 800437c:	2a03      	cmp	r2, #3
 800437e:	d8b2      	bhi.n	80042e6 <HAL_DMA_Init+0x6e>
 8004380:	a001      	add	r0, pc, #4	@ (adr r0, 8004388 <HAL_DMA_Init+0x110>)
 8004382:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004386:	bf00      	nop
 8004388:	0800435b 	.word	0x0800435b
 800438c:	08004357 	.word	0x08004357
 8004390:	0800435b 	.word	0x0800435b
 8004394:	08004375 	.word	0x08004375
 8004398:	f010803f 	.word	0xf010803f
 800439c:	aaaaaaab 	.word	0xaaaaaaab
 80043a0:	0800779c 	.word	0x0800779c

080043a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043a8:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043aa:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ac:	f8df a200 	ldr.w	sl, [pc, #512]	@ 80045b0 <HAL_GPIO_Init+0x20c>
{
 80043b0:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 80043b2:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043b6:	4689      	mov	r9, r1
 80043b8:	e003      	b.n	80043c2 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ba:	3301      	adds	r3, #1
 80043bc:	2b10      	cmp	r3, #16
 80043be:	f000 808c 	beq.w	80044da <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 80043c2:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043c6:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 80043ca:	43a2      	bics	r2, r4
 80043cc:	d1f5      	bne.n	80043ba <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80043d2:	f001 0203 	and.w	r2, r1, #3
 80043d6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043da:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043dc:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043de:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043e2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043e4:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043e8:	d97a      	bls.n	80044e0 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ea:	2a03      	cmp	r2, #3
 80043ec:	f040 80b1 	bne.w	8004552 <HAL_GPIO_Init+0x1ae>
      temp = GPIOx->MODER;
 80043f0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043f2:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043f6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043f8:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043fa:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80043fe:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004400:	d0db      	beq.n	80043ba <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004402:	2200      	movs	r2, #0
 8004404:	9203      	str	r2, [sp, #12]
 8004406:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800440a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800440e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8004412:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8004416:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800441a:	9203      	str	r2, [sp, #12]
 800441c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004426:	f003 0703 	and.w	r7, r3, #3
 800442a:	260f      	movs	r6, #15
 800442c:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8004430:	00bf      	lsls	r7, r7, #2
 8004432:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004436:	4e5b      	ldr	r6, [pc, #364]	@ (80045a4 <HAL_GPIO_Init+0x200>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8004438:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800443a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800443c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004440:	d022      	beq.n	8004488 <HAL_GPIO_Init+0xe4>
 8004442:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004446:	42b0      	cmp	r0, r6
 8004448:	f000 808e 	beq.w	8004568 <HAL_GPIO_Init+0x1c4>
 800444c:	4e56      	ldr	r6, [pc, #344]	@ (80045a8 <HAL_GPIO_Init+0x204>)
 800444e:	42b0      	cmp	r0, r6
 8004450:	f000 8090 	beq.w	8004574 <HAL_GPIO_Init+0x1d0>
 8004454:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 80045b4 <HAL_GPIO_Init+0x210>
 8004458:	4560      	cmp	r0, ip
 800445a:	f000 8091 	beq.w	8004580 <HAL_GPIO_Init+0x1dc>
 800445e:	f8df c158 	ldr.w	ip, [pc, #344]	@ 80045b8 <HAL_GPIO_Init+0x214>
 8004462:	4560      	cmp	r0, ip
 8004464:	f000 8092 	beq.w	800458c <HAL_GPIO_Init+0x1e8>
 8004468:	f8df c150 	ldr.w	ip, [pc, #336]	@ 80045bc <HAL_GPIO_Init+0x218>
 800446c:	4560      	cmp	r0, ip
 800446e:	f000 8093 	beq.w	8004598 <HAL_GPIO_Init+0x1f4>
 8004472:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 80045c0 <HAL_GPIO_Init+0x21c>
 8004476:	4560      	cmp	r0, ip
 8004478:	bf0c      	ite	eq
 800447a:	f04f 0c06 	moveq.w	ip, #6
 800447e:	f04f 0c07 	movne.w	ip, #7
 8004482:	fa0c f707 	lsl.w	r7, ip, r7
 8004486:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004488:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4a48      	ldr	r2, [pc, #288]	@ (80045ac <HAL_GPIO_Init+0x208>)
 800448c:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800448e:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8004490:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004494:	4e45      	ldr	r6, [pc, #276]	@ (80045ac <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8004496:	bf54      	ite	pl
 8004498:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800449a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 800449e:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80044a0:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80044a2:	4e42      	ldr	r6, [pc, #264]	@ (80045ac <HAL_GPIO_Init+0x208>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a4:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80044a6:	bf54      	ite	pl
 80044a8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80044aa:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 80044ae:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 80044b0:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044b2:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80044b4:	4e3d      	ldr	r6, [pc, #244]	@ (80045ac <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80044b6:	bf54      	ite	pl
 80044b8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80044ba:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 80044be:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044c0:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044c2:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044c4:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80044c8:	4938      	ldr	r1, [pc, #224]	@ (80045ac <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80044ca:	bf54      	ite	pl
 80044cc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80044ce:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d2:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 80044d4:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d6:	f47f af74 	bne.w	80043c2 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80044da:	b005      	add	sp, #20
 80044dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80044e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044e2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044e6:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80044ea:	fa07 f70c 	lsl.w	r7, r7, ip
 80044ee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80044f2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80044f4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044f6:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044fa:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80044fe:	409f      	lsls	r7, r3
 8004500:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004504:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004506:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004508:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800450c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004510:	fa07 f70c 	lsl.w	r7, r7, ip
 8004514:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004518:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800451a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800451c:	f47f af68 	bne.w	80043f0 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8004520:	08df      	lsrs	r7, r3, #3
 8004522:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004526:	9701      	str	r7, [sp, #4]
 8004528:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800452a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 800452e:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004530:	f003 0e07 	and.w	lr, r3, #7
 8004534:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004538:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800453a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800453e:	fa06 fe0e 	lsl.w	lr, r6, lr
 8004542:	9e00      	ldr	r6, [sp, #0]
 8004544:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004548:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800454a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800454e:	6237      	str	r7, [r6, #32]
 8004550:	e74e      	b.n	80043f0 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8004552:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004554:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004558:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800455c:	fa07 f70c 	lsl.w	r7, r7, ip
 8004560:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004564:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004566:	e743      	b.n	80043f0 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004568:	f04f 0c01 	mov.w	ip, #1
 800456c:	fa0c f707 	lsl.w	r7, ip, r7
 8004570:	433d      	orrs	r5, r7
 8004572:	e789      	b.n	8004488 <HAL_GPIO_Init+0xe4>
 8004574:	f04f 0c02 	mov.w	ip, #2
 8004578:	fa0c f707 	lsl.w	r7, ip, r7
 800457c:	433d      	orrs	r5, r7
 800457e:	e783      	b.n	8004488 <HAL_GPIO_Init+0xe4>
 8004580:	f04f 0c03 	mov.w	ip, #3
 8004584:	fa0c f707 	lsl.w	r7, ip, r7
 8004588:	433d      	orrs	r5, r7
 800458a:	e77d      	b.n	8004488 <HAL_GPIO_Init+0xe4>
 800458c:	f04f 0c04 	mov.w	ip, #4
 8004590:	fa0c f707 	lsl.w	r7, ip, r7
 8004594:	433d      	orrs	r5, r7
 8004596:	e777      	b.n	8004488 <HAL_GPIO_Init+0xe4>
 8004598:	f04f 0c05 	mov.w	ip, #5
 800459c:	fa0c f707 	lsl.w	r7, ip, r7
 80045a0:	433d      	orrs	r5, r7
 80045a2:	e771      	b.n	8004488 <HAL_GPIO_Init+0xe4>
 80045a4:	40020000 	.word	0x40020000
 80045a8:	40020800 	.word	0x40020800
 80045ac:	40013c00 	.word	0x40013c00
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40020c00 	.word	0x40020c00
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40021400 	.word	0x40021400
 80045c0:	40021800 	.word	0x40021800

080045c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045c4:	b902      	cbnz	r2, 80045c8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045c6:	0409      	lsls	r1, r1, #16
 80045c8:	6181      	str	r1, [r0, #24]
  }
}
 80045ca:	4770      	bx	lr

080045cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80045cc:	b530      	push	{r4, r5, lr}
 80045ce:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045d2:	491a      	ldr	r1, [pc, #104]	@ (800463c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045d4:	4d1a      	ldr	r5, [pc, #104]	@ (8004640 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	2200      	movs	r2, #0
 80045d8:	9201      	str	r2, [sp, #4]
 80045da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045dc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80045e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045ea:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ec:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045ee:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 80045f0:	f7ff fb8a 	bl	8003d08 <HAL_GetTick>
 80045f4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045f6:	e005      	b.n	8004604 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045f8:	f7ff fb86 	bl	8003d08 <HAL_GetTick>
 80045fc:	1b00      	subs	r0, r0, r4
 80045fe:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004602:	d816      	bhi.n	8004632 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004604:	686b      	ldr	r3, [r5, #4]
 8004606:	03da      	lsls	r2, r3, #15
 8004608:	d5f6      	bpl.n	80045f8 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800460a:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800460c:	4d0c      	ldr	r5, [pc, #48]	@ (8004640 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800460e:	2201      	movs	r2, #1
 8004610:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8004612:	f7ff fb79 	bl	8003d08 <HAL_GetTick>
 8004616:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004618:	e005      	b.n	8004626 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800461a:	f7ff fb75 	bl	8003d08 <HAL_GetTick>
 800461e:	1b00      	subs	r0, r0, r4
 8004620:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004624:	d805      	bhi.n	8004632 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004626:	686b      	ldr	r3, [r5, #4]
 8004628:	039b      	lsls	r3, r3, #14
 800462a:	d5f6      	bpl.n	800461a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800462c:	2000      	movs	r0, #0
}
 800462e:	b003      	add	sp, #12
 8004630:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8004632:	2003      	movs	r0, #3
}
 8004634:	b003      	add	sp, #12
 8004636:	bd30      	pop	{r4, r5, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	420e0000 	.word	0x420e0000
 8004640:	40007000 	.word	0x40007000

08004644 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004644:	2800      	cmp	r0, #0
 8004646:	f000 8087 	beq.w	8004758 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800464a:	4a48      	ldr	r2, [pc, #288]	@ (800476c <HAL_RCC_ClockConfig+0x128>)
 800464c:	6813      	ldr	r3, [r2, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	428b      	cmp	r3, r1
{
 8004654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004658:	460d      	mov	r5, r1
 800465a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	d209      	bcs.n	8004672 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	b2cb      	uxtb	r3, r1
 8004660:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	428b      	cmp	r3, r1
 800466a:	d002      	beq.n	8004672 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800466c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 800466e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	0798      	lsls	r0, r3, #30
 8004676:	d514      	bpl.n	80046a2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	0759      	lsls	r1, r3, #29
 800467a:	d504      	bpl.n	8004686 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800467c:	493c      	ldr	r1, [pc, #240]	@ (8004770 <HAL_RCC_ClockConfig+0x12c>)
 800467e:	688a      	ldr	r2, [r1, #8]
 8004680:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004684:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004686:	071a      	lsls	r2, r3, #28
 8004688:	d504      	bpl.n	8004694 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800468a:	4939      	ldr	r1, [pc, #228]	@ (8004770 <HAL_RCC_ClockConfig+0x12c>)
 800468c:	688a      	ldr	r2, [r1, #8]
 800468e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8004692:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004694:	4936      	ldr	r1, [pc, #216]	@ (8004770 <HAL_RCC_ClockConfig+0x12c>)
 8004696:	68a0      	ldr	r0, [r4, #8]
 8004698:	688a      	ldr	r2, [r1, #8]
 800469a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800469e:	4302      	orrs	r2, r0
 80046a0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a2:	07df      	lsls	r7, r3, #31
 80046a4:	d521      	bpl.n	80046ea <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	2a01      	cmp	r2, #1
 80046aa:	d057      	beq.n	800475c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ac:	1e93      	subs	r3, r2, #2
 80046ae:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004770 <HAL_RCC_ClockConfig+0x12c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b4:	d94d      	bls.n	8004752 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b6:	0799      	lsls	r1, r3, #30
 80046b8:	d5d8      	bpl.n	800466c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ba:	4e2d      	ldr	r6, [pc, #180]	@ (8004770 <HAL_RCC_ClockConfig+0x12c>)
 80046bc:	68b3      	ldr	r3, [r6, #8]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80046c6:	f7ff fb1f 	bl	8003d08 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ca:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80046ce:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d0:	e004      	b.n	80046dc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d2:	f7ff fb19 	bl	8003d08 <HAL_GetTick>
 80046d6:	1bc0      	subs	r0, r0, r7
 80046d8:	4540      	cmp	r0, r8
 80046da:	d844      	bhi.n	8004766 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046dc:	68b3      	ldr	r3, [r6, #8]
 80046de:	6862      	ldr	r2, [r4, #4]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80046e8:	d1f3      	bne.n	80046d2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ea:	4a20      	ldr	r2, [pc, #128]	@ (800476c <HAL_RCC_ClockConfig+0x128>)
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	42ab      	cmp	r3, r5
 80046f4:	d906      	bls.n	8004704 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	b2eb      	uxtb	r3, r5
 80046f8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	6813      	ldr	r3, [r2, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	42ab      	cmp	r3, r5
 8004702:	d1b3      	bne.n	800466c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	075a      	lsls	r2, r3, #29
 8004708:	d506      	bpl.n	8004718 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470a:	4919      	ldr	r1, [pc, #100]	@ (8004770 <HAL_RCC_ClockConfig+0x12c>)
 800470c:	68e0      	ldr	r0, [r4, #12]
 800470e:	688a      	ldr	r2, [r1, #8]
 8004710:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004714:	4302      	orrs	r2, r0
 8004716:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004718:	071b      	lsls	r3, r3, #28
 800471a:	d507      	bpl.n	800472c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800471c:	4a14      	ldr	r2, [pc, #80]	@ (8004770 <HAL_RCC_ClockConfig+0x12c>)
 800471e:	6921      	ldr	r1, [r4, #16]
 8004720:	6893      	ldr	r3, [r2, #8]
 8004722:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004726:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800472a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800472c:	f000 f84e 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8004730:	4a0f      	ldr	r2, [pc, #60]	@ (8004770 <HAL_RCC_ClockConfig+0x12c>)
 8004732:	4c10      	ldr	r4, [pc, #64]	@ (8004774 <HAL_RCC_ClockConfig+0x130>)
 8004734:	6892      	ldr	r2, [r2, #8]
 8004736:	4910      	ldr	r1, [pc, #64]	@ (8004778 <HAL_RCC_ClockConfig+0x134>)
 8004738:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800473c:	4603      	mov	r3, r0
 800473e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004740:	480e      	ldr	r0, [pc, #56]	@ (800477c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004742:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004744:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004746:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004748:	f7ff fa94 	bl	8003c74 <HAL_InitTick>
  return HAL_OK;
 800474c:	2000      	movs	r0, #0
}
 800474e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004752:	0198      	lsls	r0, r3, #6
 8004754:	d4b1      	bmi.n	80046ba <HAL_RCC_ClockConfig+0x76>
 8004756:	e789      	b.n	800466c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004758:	2001      	movs	r0, #1
}
 800475a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475c:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <HAL_RCC_ClockConfig+0x12c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	039e      	lsls	r6, r3, #14
 8004762:	d4aa      	bmi.n	80046ba <HAL_RCC_ClockConfig+0x76>
 8004764:	e782      	b.n	800466c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004766:	2003      	movs	r0, #3
 8004768:	e781      	b.n	800466e <HAL_RCC_ClockConfig+0x2a>
 800476a:	bf00      	nop
 800476c:	40023c00 	.word	0x40023c00
 8004770:	40023800 	.word	0x40023800
 8004774:	0800778c 	.word	0x0800778c
 8004778:	20000520 	.word	0x20000520
 800477c:	20000528 	.word	0x20000528

08004780 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004780:	4b01      	ldr	r3, [pc, #4]	@ (8004788 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000520 	.word	0x20000520

0800478c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800478e:	4905      	ldr	r1, [pc, #20]	@ (80047a4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4a05      	ldr	r2, [pc, #20]	@ (80047a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004794:	6808      	ldr	r0, [r1, #0]
 8004796:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800479a:	5cd3      	ldrb	r3, [r2, r3]
}
 800479c:	40d8      	lsrs	r0, r3
 800479e:	4770      	bx	lr
 80047a0:	40023800 	.word	0x40023800
 80047a4:	20000520 	.word	0x20000520
 80047a8:	08007784 	.word	0x08007784

080047ac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047ac:	4b04      	ldr	r3, [pc, #16]	@ (80047c0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80047ae:	4905      	ldr	r1, [pc, #20]	@ (80047c4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	4a05      	ldr	r2, [pc, #20]	@ (80047c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80047b4:	6808      	ldr	r0, [r1, #0]
 80047b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80047ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80047bc:	40d8      	lsrs	r0, r3
 80047be:	4770      	bx	lr
 80047c0:	40023800 	.word	0x40023800
 80047c4:	20000520 	.word	0x20000520
 80047c8:	08007784 	.word	0x08007784

080047cc <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047cc:	4927      	ldr	r1, [pc, #156]	@ (800486c <HAL_RCC_GetSysClockFreq+0xa0>)
{
 80047ce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d0:	688b      	ldr	r3, [r1, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d007      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x1e>
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d01d      	beq.n	800481a <HAL_RCC_GetSysClockFreq+0x4e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047de:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047e0:	4824      	ldr	r0, [pc, #144]	@ (8004874 <HAL_RCC_GetSysClockFreq+0xa8>)
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	bf18      	it	ne
 80047e6:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80047e8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047ea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f8:	d12e      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fa:	481d      	ldr	r0, [pc, #116]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047fc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004800:	fba1 0100 	umull	r0, r1, r1, r0
 8004804:	f7fb fd00 	bl	8000208 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004808:	4b18      	ldr	r3, [pc, #96]	@ (800486c <HAL_RCC_GetSysClockFreq+0xa0>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004810:	3301      	adds	r3, #1
 8004812:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004814:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004818:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800481a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004820:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004824:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004828:	d10d      	bne.n	8004846 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4811      	ldr	r0, [pc, #68]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xa4>)
 800482c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004830:	fba1 0100 	umull	r0, r1, r1, r0
 8004834:	f7fb fce8 	bl	8000208 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004838:	4b0c      	ldr	r3, [pc, #48]	@ (800486c <HAL_RCC_GetSysClockFreq+0xa0>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8004840:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004844:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	480b      	ldr	r0, [pc, #44]	@ (8004874 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004848:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800484c:	2300      	movs	r3, #0
 800484e:	fba1 0100 	umull	r0, r1, r1, r0
 8004852:	f7fb fcd9 	bl	8000208 <__aeabi_uldivmod>
 8004856:	e7ef      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004858:	4806      	ldr	r0, [pc, #24]	@ (8004874 <HAL_RCC_GetSysClockFreq+0xa8>)
 800485a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800485e:	2300      	movs	r3, #0
 8004860:	fba1 0100 	umull	r0, r1, r1, r0
 8004864:	f7fb fcd0 	bl	8000208 <__aeabi_uldivmod>
 8004868:	e7ce      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x3c>
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	00f42400 	.word	0x00f42400
 8004874:	007a1200 	.word	0x007a1200

08004878 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004878:	2800      	cmp	r0, #0
 800487a:	f000 81fb 	beq.w	8004c74 <HAL_RCC_OscConfig+0x3fc>
{
 800487e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004882:	6803      	ldr	r3, [r0, #0]
 8004884:	07de      	lsls	r6, r3, #31
{
 8004886:	b082      	sub	sp, #8
 8004888:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488a:	d536      	bpl.n	80048fa <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800488c:	49a1      	ldr	r1, [pc, #644]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 800488e:	688a      	ldr	r2, [r1, #8]
 8004890:	f002 020c 	and.w	r2, r2, #12
 8004894:	2a04      	cmp	r2, #4
 8004896:	f000 80de 	beq.w	8004a56 <HAL_RCC_OscConfig+0x1de>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800489a:	688a      	ldr	r2, [r1, #8]
 800489c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048a0:	2a08      	cmp	r2, #8
 80048a2:	f000 80d4 	beq.w	8004a4e <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a6:	499b      	ldr	r1, [pc, #620]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 80048a8:	688a      	ldr	r2, [r1, #8]
 80048aa:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048ae:	2a0c      	cmp	r2, #12
 80048b0:	f000 8104 	beq.w	8004abc <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ba:	f000 8118 	beq.w	8004aee <HAL_RCC_OscConfig+0x276>
 80048be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048c2:	f000 8192 	beq.w	8004bea <HAL_RCC_OscConfig+0x372>
 80048c6:	4d93      	ldr	r5, [pc, #588]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 80048c8:	682a      	ldr	r2, [r5, #0]
 80048ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80048ce:	602a      	str	r2, [r5, #0]
 80048d0:	682a      	ldr	r2, [r5, #0]
 80048d2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048d6:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f040 810d 	bne.w	8004af8 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048de:	f7ff fa13 	bl	8003d08 <HAL_GetTick>
 80048e2:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e4:	e005      	b.n	80048f2 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e6:	f7ff fa0f 	bl	8003d08 <HAL_GetTick>
 80048ea:	1b80      	subs	r0, r0, r6
 80048ec:	2864      	cmp	r0, #100	@ 0x64
 80048ee:	f200 80fa 	bhi.w	8004ae6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	682b      	ldr	r3, [r5, #0]
 80048f4:	039f      	lsls	r7, r3, #14
 80048f6:	d4f6      	bmi.n	80048e6 <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	079d      	lsls	r5, r3, #30
 80048fc:	d52f      	bpl.n	800495e <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048fe:	4a85      	ldr	r2, [pc, #532]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 8004900:	6891      	ldr	r1, [r2, #8]
 8004902:	f011 0f0c 	tst.w	r1, #12
 8004906:	f000 8099 	beq.w	8004a3c <HAL_RCC_OscConfig+0x1c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800490a:	6891      	ldr	r1, [r2, #8]
 800490c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004910:	2908      	cmp	r1, #8
 8004912:	f000 808f 	beq.w	8004a34 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004916:	497f      	ldr	r1, [pc, #508]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 8004918:	688a      	ldr	r2, [r1, #8]
 800491a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800491e:	2a0c      	cmp	r2, #12
 8004920:	f000 815e 	beq.w	8004be0 <HAL_RCC_OscConfig+0x368>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004924:	68e3      	ldr	r3, [r4, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8112 	beq.w	8004b50 <HAL_RCC_OscConfig+0x2d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800492c:	4b7a      	ldr	r3, [pc, #488]	@ (8004b18 <HAL_RCC_OscConfig+0x2a0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492e:	4e79      	ldr	r6, [pc, #484]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
        __HAL_RCC_HSI_ENABLE();
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004934:	f7ff f9e8 	bl	8003d08 <HAL_GetTick>
 8004938:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493a:	e005      	b.n	8004948 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800493c:	f7ff f9e4 	bl	8003d08 <HAL_GetTick>
 8004940:	1b40      	subs	r0, r0, r5
 8004942:	2802      	cmp	r0, #2
 8004944:	f200 80cf 	bhi.w	8004ae6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004948:	6833      	ldr	r3, [r6, #0]
 800494a:	079f      	lsls	r7, r3, #30
 800494c:	d5f6      	bpl.n	800493c <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494e:	6833      	ldr	r3, [r6, #0]
 8004950:	6922      	ldr	r2, [r4, #16]
 8004952:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004956:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800495a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	071a      	lsls	r2, r3, #28
 8004960:	d452      	bmi.n	8004a08 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004962:	075d      	lsls	r5, r3, #29
 8004964:	d530      	bpl.n	80049c8 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004966:	4a6b      	ldr	r2, [pc, #428]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 8004968:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800496a:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 800496e:	f000 8099 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8004972:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	4e69      	ldr	r6, [pc, #420]	@ (8004b1c <HAL_RCC_OscConfig+0x2a4>)
 8004976:	6833      	ldr	r3, [r6, #0]
 8004978:	05d8      	lsls	r0, r3, #23
 800497a:	f140 80a4 	bpl.w	8004ac6 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	2b01      	cmp	r3, #1
 8004982:	f000 80cd 	beq.w	8004b20 <HAL_RCC_OscConfig+0x2a8>
 8004986:	2b05      	cmp	r3, #5
 8004988:	f000 8139 	beq.w	8004bfe <HAL_RCC_OscConfig+0x386>
 800498c:	4e61      	ldr	r6, [pc, #388]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 800498e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	6732      	str	r2, [r6, #112]	@ 0x70
 8004996:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004998:	f022 0204 	bic.w	r2, r2, #4
 800499c:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f040 80c3 	bne.w	8004b2a <HAL_RCC_OscConfig+0x2b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7ff f9b0 	bl	8003d08 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80049ac:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ae:	e005      	b.n	80049bc <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b0:	f7ff f9aa 	bl	8003d08 <HAL_GetTick>
 80049b4:	1bc0      	subs	r0, r0, r7
 80049b6:	4540      	cmp	r0, r8
 80049b8:	f200 8095 	bhi.w	8004ae6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049bc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80049be:	079b      	lsls	r3, r3, #30
 80049c0:	d4f6      	bmi.n	80049b0 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	f040 8106 	bne.w	8004bd4 <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c8:	69a3      	ldr	r3, [r4, #24]
 80049ca:	b1cb      	cbz	r3, 8004a00 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049cc:	4d51      	ldr	r5, [pc, #324]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 80049ce:	68aa      	ldr	r2, [r5, #8]
 80049d0:	f002 020c 	and.w	r2, r2, #12
 80049d4:	2a08      	cmp	r2, #8
 80049d6:	f000 80cc 	beq.w	8004b72 <HAL_RCC_OscConfig+0x2fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049da:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049dc:	4b4e      	ldr	r3, [pc, #312]	@ (8004b18 <HAL_RCC_OscConfig+0x2a0>)
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e4:	f000 8115 	beq.w	8004c12 <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7ff f98e 	bl	8003d08 <HAL_GetTick>
 80049ec:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	e004      	b.n	80049fa <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f0:	f7ff f98a 	bl	8003d08 <HAL_GetTick>
 80049f4:	1b00      	subs	r0, r0, r4
 80049f6:	2802      	cmp	r0, #2
 80049f8:	d875      	bhi.n	8004ae6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fa:	682b      	ldr	r3, [r5, #0]
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	d4f7      	bmi.n	80049f0 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004a00:	2000      	movs	r0, #0
}
 8004a02:	b002      	add	sp, #8
 8004a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a08:	6963      	ldr	r3, [r4, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d02d      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	4b42      	ldr	r3, [pc, #264]	@ (8004b18 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a10:	4e40      	ldr	r6, [pc, #256]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_ENABLE();
 8004a12:	2201      	movs	r2, #1
 8004a14:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004a18:	f7ff f976 	bl	8003d08 <HAL_GetTick>
 8004a1c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	e004      	b.n	8004a2a <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a20:	f7ff f972 	bl	8003d08 <HAL_GetTick>
 8004a24:	1b40      	subs	r0, r0, r5
 8004a26:	2802      	cmp	r0, #2
 8004a28:	d85d      	bhi.n	8004ae6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004a2c:	079b      	lsls	r3, r3, #30
 8004a2e:	d5f7      	bpl.n	8004a20 <HAL_RCC_OscConfig+0x1a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	e796      	b.n	8004962 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a34:	6852      	ldr	r2, [r2, #4]
 8004a36:	0250      	lsls	r0, r2, #9
 8004a38:	f53f af6d 	bmi.w	8004916 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3c:	4a35      	ldr	r2, [pc, #212]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	0792      	lsls	r2, r2, #30
 8004a42:	d523      	bpl.n	8004a8c <HAL_RCC_OscConfig+0x214>
 8004a44:	68e2      	ldr	r2, [r4, #12]
 8004a46:	2a01      	cmp	r2, #1
 8004a48:	d020      	beq.n	8004a8c <HAL_RCC_OscConfig+0x214>
    return HAL_ERROR;
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	e7d9      	b.n	8004a02 <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a4e:	684a      	ldr	r2, [r1, #4]
 8004a50:	0255      	lsls	r5, r2, #9
 8004a52:	f57f af28 	bpl.w	80048a6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a56:	4a2f      	ldr	r2, [pc, #188]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	0392      	lsls	r2, r2, #14
 8004a5c:	f57f af4d 	bpl.w	80048fa <HAL_RCC_OscConfig+0x82>
 8004a60:	6862      	ldr	r2, [r4, #4]
 8004a62:	2a00      	cmp	r2, #0
 8004a64:	f47f af49 	bne.w	80048fa <HAL_RCC_OscConfig+0x82>
 8004a68:	e7ef      	b.n	8004a4a <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_DISABLE();
 8004a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8004b18 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a6c:	4e29      	ldr	r6, [pc, #164]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_DISABLE();
 8004a6e:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004a72:	f7ff f949 	bl	8003d08 <HAL_GetTick>
 8004a76:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a78:	e004      	b.n	8004a84 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7a:	f7ff f945 	bl	8003d08 <HAL_GetTick>
 8004a7e:	1b40      	subs	r0, r0, r5
 8004a80:	2802      	cmp	r0, #2
 8004a82:	d830      	bhi.n	8004ae6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a84:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004a86:	079f      	lsls	r7, r3, #30
 8004a88:	d4f7      	bmi.n	8004a7a <HAL_RCC_OscConfig+0x202>
 8004a8a:	e7d1      	b.n	8004a30 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8c:	4921      	ldr	r1, [pc, #132]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 8004a8e:	6920      	ldr	r0, [r4, #16]
 8004a90:	680a      	ldr	r2, [r1, #0]
 8004a92:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8004a96:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004a9a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9c:	071a      	lsls	r2, r3, #28
 8004a9e:	f57f af60 	bpl.w	8004962 <HAL_RCC_OscConfig+0xea>
 8004aa2:	e7b1      	b.n	8004a08 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ab8:	2501      	movs	r5, #1
 8004aba:	e75b      	b.n	8004974 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004abc:	684a      	ldr	r2, [r1, #4]
 8004abe:	0251      	lsls	r1, r2, #9
 8004ac0:	f57f aef8 	bpl.w	80048b4 <HAL_RCC_OscConfig+0x3c>
 8004ac4:	e7c7      	b.n	8004a56 <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac6:	6833      	ldr	r3, [r6, #0]
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004acc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004ace:	f7ff f91b 	bl	8003d08 <HAL_GetTick>
 8004ad2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	05d9      	lsls	r1, r3, #23
 8004ad8:	f53f af51 	bmi.w	800497e <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004adc:	f7ff f914 	bl	8003d08 <HAL_GetTick>
 8004ae0:	1bc0      	subs	r0, r0, r7
 8004ae2:	2802      	cmp	r0, #2
 8004ae4:	d9f6      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8004ae6:	2003      	movs	r0, #3
}
 8004ae8:	b002      	add	sp, #8
 8004aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aee:	4a09      	ldr	r2, [pc, #36]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
 8004af0:	6813      	ldr	r3, [r2, #0]
 8004af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004af8:	f7ff f906 	bl	8003d08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afc:	4e05      	ldr	r6, [pc, #20]	@ (8004b14 <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8004afe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b00:	e004      	b.n	8004b0c <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b02:	f7ff f901 	bl	8003d08 <HAL_GetTick>
 8004b06:	1b40      	subs	r0, r0, r5
 8004b08:	2864      	cmp	r0, #100	@ 0x64
 8004b0a:	d8ec      	bhi.n	8004ae6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0c:	6833      	ldr	r3, [r6, #0]
 8004b0e:	039b      	lsls	r3, r3, #14
 8004b10:	d5f7      	bpl.n	8004b02 <HAL_RCC_OscConfig+0x28a>
 8004b12:	e6f1      	b.n	80048f8 <HAL_RCC_OscConfig+0x80>
 8004b14:	40023800 	.word	0x40023800
 8004b18:	42470000 	.word	0x42470000
 8004b1c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b20:	4a55      	ldr	r2, [pc, #340]	@ (8004c78 <HAL_RCC_OscConfig+0x400>)
 8004b22:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004b2a:	f7ff f8ed 	bl	8003d08 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2e:	4f52      	ldr	r7, [pc, #328]	@ (8004c78 <HAL_RCC_OscConfig+0x400>)
      tickstart = HAL_GetTick();
 8004b30:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b36:	e004      	b.n	8004b42 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b38:	f7ff f8e6 	bl	8003d08 <HAL_GetTick>
 8004b3c:	1b80      	subs	r0, r0, r6
 8004b3e:	4540      	cmp	r0, r8
 8004b40:	d8d1      	bhi.n	8004ae6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b44:	079a      	lsls	r2, r3, #30
 8004b46:	d5f7      	bpl.n	8004b38 <HAL_RCC_OscConfig+0x2c0>
    if(pwrclkchanged == SET)
 8004b48:	2d00      	cmp	r5, #0
 8004b4a:	f43f af3d 	beq.w	80049c8 <HAL_RCC_OscConfig+0x150>
 8004b4e:	e041      	b.n	8004bd4 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_DISABLE();
 8004b50:	4a4a      	ldr	r2, [pc, #296]	@ (8004c7c <HAL_RCC_OscConfig+0x404>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b52:	4e49      	ldr	r6, [pc, #292]	@ (8004c78 <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_HSI_DISABLE();
 8004b54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b56:	f7ff f8d7 	bl	8003d08 <HAL_GetTick>
 8004b5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5c:	e004      	b.n	8004b68 <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7ff f8d3 	bl	8003d08 <HAL_GetTick>
 8004b62:	1b40      	subs	r0, r0, r5
 8004b64:	2802      	cmp	r0, #2
 8004b66:	d8be      	bhi.n	8004ae6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b68:	6833      	ldr	r3, [r6, #0]
 8004b6a:	0799      	lsls	r1, r3, #30
 8004b6c:	d4f7      	bmi.n	8004b5e <HAL_RCC_OscConfig+0x2e6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	e6f5      	b.n	800495e <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	f43f af69 	beq.w	8004a4a <HAL_RCC_OscConfig+0x1d2>
        pll_config = RCC->PLLCFGR;
 8004b78:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b80:	4291      	cmp	r1, r2
 8004b82:	f47f af62 	bne.w	8004a4a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b86:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b88:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8c:	4291      	cmp	r1, r2
 8004b8e:	f47f af5c 	bne.w	8004a4a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b92:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004b94:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8004b98:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b9a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004b9e:	f47f af54 	bne.w	8004a4a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004ba4:	0852      	lsrs	r2, r2, #1
 8004ba6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8004baa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bac:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004bb0:	f47f af4b 	bne.w	8004a4a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bb4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004bb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bba:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8004bbe:	f47f af44 	bne.w	8004a4a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bc2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004bc4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bc8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8004bcc:	bf14      	ite	ne
 8004bce:	2001      	movne	r0, #1
 8004bd0:	2000      	moveq	r0, #0
 8004bd2:	e716      	b.n	8004a02 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd4:	4a28      	ldr	r2, [pc, #160]	@ (8004c78 <HAL_RCC_OscConfig+0x400>)
 8004bd6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bde:	e6f3      	b.n	80049c8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be0:	684a      	ldr	r2, [r1, #4]
 8004be2:	0251      	lsls	r1, r2, #9
 8004be4:	f53f ae9e 	bmi.w	8004924 <HAL_RCC_OscConfig+0xac>
 8004be8:	e728      	b.n	8004a3c <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bea:	4b23      	ldr	r3, [pc, #140]	@ (8004c78 <HAL_RCC_OscConfig+0x400>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004bfa:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bfc:	e77c      	b.n	8004af8 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8004c78 <HAL_RCC_OscConfig+0x400>)
 8004c00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c02:	f042 0204 	orr.w	r2, r2, #4
 8004c06:	671a      	str	r2, [r3, #112]	@ 0x70
 8004c08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c10:	e78b      	b.n	8004b2a <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 8004c12:	f7ff f879 	bl	8003d08 <HAL_GetTick>
 8004c16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c18:	e005      	b.n	8004c26 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1a:	f7ff f875 	bl	8003d08 <HAL_GetTick>
 8004c1e:	1b80      	subs	r0, r0, r6
 8004c20:	2802      	cmp	r0, #2
 8004c22:	f63f af60 	bhi.w	8004ae6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	0199      	lsls	r1, r3, #6
 8004c2a:	d4f6      	bmi.n	8004c1a <HAL_RCC_OscConfig+0x3a2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c2c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004c30:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004c32:	430b      	orrs	r3, r1
 8004c34:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004c38:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8004c3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c3e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004c42:	0852      	lsrs	r2, r2, #1
 8004c44:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004c48:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004c4a:	490c      	ldr	r1, [pc, #48]	@ (8004c7c <HAL_RCC_OscConfig+0x404>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004c50:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c52:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004c54:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004c56:	f7ff f857 	bl	8003d08 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5a:	4d07      	ldr	r5, [pc, #28]	@ (8004c78 <HAL_RCC_OscConfig+0x400>)
        tickstart = HAL_GetTick();
 8004c5c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5e:	e005      	b.n	8004c6c <HAL_RCC_OscConfig+0x3f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c60:	f7ff f852 	bl	8003d08 <HAL_GetTick>
 8004c64:	1b00      	subs	r0, r0, r4
 8004c66:	2802      	cmp	r0, #2
 8004c68:	f63f af3d 	bhi.w	8004ae6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	019a      	lsls	r2, r3, #6
 8004c70:	d5f6      	bpl.n	8004c60 <HAL_RCC_OscConfig+0x3e8>
 8004c72:	e6c5      	b.n	8004a00 <HAL_RCC_OscConfig+0x188>
    return HAL_ERROR;
 8004c74:	2001      	movs	r0, #1
}
 8004c76:	4770      	bx	lr
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	42470000 	.word	0x42470000

08004c80 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f000 8086 	beq.w	8004d92 <HAL_TIM_Base_Init+0x112>
{
 8004c86:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c88:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d078      	beq.n	8004d88 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c96:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c98:	493f      	ldr	r1, [pc, #252]	@ (8004d98 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004ca2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca4:	d05c      	beq.n	8004d60 <HAL_TIM_Base_Init+0xe0>
 8004ca6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004caa:	d030      	beq.n	8004d0e <HAL_TIM_Base_Init+0x8e>
 8004cac:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8004cb0:	428a      	cmp	r2, r1
 8004cb2:	d02c      	beq.n	8004d0e <HAL_TIM_Base_Init+0x8e>
 8004cb4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004cb8:	428a      	cmp	r2, r1
 8004cba:	d028      	beq.n	8004d0e <HAL_TIM_Base_Init+0x8e>
 8004cbc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004cc0:	428a      	cmp	r2, r1
 8004cc2:	d024      	beq.n	8004d0e <HAL_TIM_Base_Init+0x8e>
 8004cc4:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8004cc8:	428a      	cmp	r2, r1
 8004cca:	d049      	beq.n	8004d60 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ccc:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8004cd0:	428a      	cmp	r2, r1
 8004cd2:	d020      	beq.n	8004d16 <HAL_TIM_Base_Init+0x96>
 8004cd4:	4931      	ldr	r1, [pc, #196]	@ (8004d9c <HAL_TIM_Base_Init+0x11c>)
 8004cd6:	428a      	cmp	r2, r1
 8004cd8:	d01d      	beq.n	8004d16 <HAL_TIM_Base_Init+0x96>
 8004cda:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004cde:	428a      	cmp	r2, r1
 8004ce0:	d019      	beq.n	8004d16 <HAL_TIM_Base_Init+0x96>
 8004ce2:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8004ce6:	428a      	cmp	r2, r1
 8004ce8:	d015      	beq.n	8004d16 <HAL_TIM_Base_Init+0x96>
 8004cea:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004cee:	428a      	cmp	r2, r1
 8004cf0:	d011      	beq.n	8004d16 <HAL_TIM_Base_Init+0x96>
 8004cf2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004cf6:	428a      	cmp	r2, r1
 8004cf8:	d00d      	beq.n	8004d16 <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cfa:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cfc:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cfe:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d04:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004d06:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d08:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d0a:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d0c:	e010      	b.n	8004d30 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8004d0e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d14:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d16:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d18:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d24:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d26:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004d28:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004d2a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d2c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d2e:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d30:	2301      	movs	r3, #1
 8004d32:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d34:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004d3c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004d40:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004d44:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d50:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004d54:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004d5c:	2000      	movs	r0, #0
}
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004d60:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d62:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d68:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d70:	69a1      	ldr	r1, [r4, #24]
 8004d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d76:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004d78:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d7e:	6863      	ldr	r3, [r4, #4]
 8004d80:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004d82:	6963      	ldr	r3, [r4, #20]
 8004d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d86:	e7d3      	b.n	8004d30 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004d88:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d8c:	f7fe fc96 	bl	80036bc <HAL_TIM_Base_MspInit>
 8004d90:	e781      	b.n	8004c96 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8004d92:	2001      	movs	r0, #1
}
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40014400 	.word	0x40014400

08004da0 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop

08004da4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004da4:	2800      	cmp	r0, #0
 8004da6:	f000 8086 	beq.w	8004eb6 <HAL_TIM_PWM_Init+0x112>
{
 8004daa:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004dac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004db0:	4604      	mov	r4, r0
 8004db2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d078      	beq.n	8004eac <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dba:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	493f      	ldr	r1, [pc, #252]	@ (8004ebc <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004dc6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc8:	d05c      	beq.n	8004e84 <HAL_TIM_PWM_Init+0xe0>
 8004dca:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004dce:	d030      	beq.n	8004e32 <HAL_TIM_PWM_Init+0x8e>
 8004dd0:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8004dd4:	428a      	cmp	r2, r1
 8004dd6:	d02c      	beq.n	8004e32 <HAL_TIM_PWM_Init+0x8e>
 8004dd8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004ddc:	428a      	cmp	r2, r1
 8004dde:	d028      	beq.n	8004e32 <HAL_TIM_PWM_Init+0x8e>
 8004de0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004de4:	428a      	cmp	r2, r1
 8004de6:	d024      	beq.n	8004e32 <HAL_TIM_PWM_Init+0x8e>
 8004de8:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8004dec:	428a      	cmp	r2, r1
 8004dee:	d049      	beq.n	8004e84 <HAL_TIM_PWM_Init+0xe0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df0:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8004df4:	428a      	cmp	r2, r1
 8004df6:	d020      	beq.n	8004e3a <HAL_TIM_PWM_Init+0x96>
 8004df8:	4931      	ldr	r1, [pc, #196]	@ (8004ec0 <HAL_TIM_PWM_Init+0x11c>)
 8004dfa:	428a      	cmp	r2, r1
 8004dfc:	d01d      	beq.n	8004e3a <HAL_TIM_PWM_Init+0x96>
 8004dfe:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004e02:	428a      	cmp	r2, r1
 8004e04:	d019      	beq.n	8004e3a <HAL_TIM_PWM_Init+0x96>
 8004e06:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8004e0a:	428a      	cmp	r2, r1
 8004e0c:	d015      	beq.n	8004e3a <HAL_TIM_PWM_Init+0x96>
 8004e0e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004e12:	428a      	cmp	r2, r1
 8004e14:	d011      	beq.n	8004e3a <HAL_TIM_PWM_Init+0x96>
 8004e16:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004e1a:	428a      	cmp	r2, r1
 8004e1c:	d00d      	beq.n	8004e3a <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e1e:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8004e20:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e22:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e28:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004e2a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e2c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e2e:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e30:	e010      	b.n	8004e54 <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8004e32:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e38:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e3c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e42:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e48:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e4a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004e4c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004e4e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e50:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e52:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004e54:	2301      	movs	r3, #1
 8004e56:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e58:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004e60:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004e64:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004e68:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e74:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004e78:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004e80:	2000      	movs	r0, #0
}
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004e84:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e86:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e8c:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e92:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e94:	69a1      	ldr	r1, [r4, #24]
 8004e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e9a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004e9c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9e:	68e3      	ldr	r3, [r4, #12]
 8004ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ea2:	6863      	ldr	r3, [r4, #4]
 8004ea4:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea6:	6963      	ldr	r3, [r4, #20]
 8004ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eaa:	e7d3      	b.n	8004e54 <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004eac:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004eb0:	f7ff ff76 	bl	8004da0 <HAL_TIM_PWM_MspInit>
 8004eb4:	e781      	b.n	8004dba <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8004eb6:	2001      	movs	r0, #1
}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40014400 	.word	0x40014400

08004ec4 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	f000 80af 	beq.w	8005028 <HAL_TIM_Encoder_Init+0x164>
{
 8004eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ecc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ed0:	460d      	mov	r5, r1
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80a0 	beq.w	800501e <HAL_TIM_Encoder_Init+0x15a>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ede:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee0:	4952      	ldr	r1, [pc, #328]	@ (800502c <HAL_TIM_Encoder_Init+0x168>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004eee:	f022 0207 	bic.w	r2, r2, #7
 8004ef2:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef4:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8004ef6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef8:	d07d      	beq.n	8004ff6 <HAL_TIM_Encoder_Init+0x132>
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004efe:	d030      	beq.n	8004f62 <HAL_TIM_Encoder_Init+0x9e>
 8004f00:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8004f04:	428b      	cmp	r3, r1
 8004f06:	d02c      	beq.n	8004f62 <HAL_TIM_Encoder_Init+0x9e>
 8004f08:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	d028      	beq.n	8004f62 <HAL_TIM_Encoder_Init+0x9e>
 8004f10:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f14:	428b      	cmp	r3, r1
 8004f16:	d024      	beq.n	8004f62 <HAL_TIM_Encoder_Init+0x9e>
 8004f18:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	d06a      	beq.n	8004ff6 <HAL_TIM_Encoder_Init+0x132>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f20:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8004f24:	428b      	cmp	r3, r1
 8004f26:	d020      	beq.n	8004f6a <HAL_TIM_Encoder_Init+0xa6>
 8004f28:	4941      	ldr	r1, [pc, #260]	@ (8005030 <HAL_TIM_Encoder_Init+0x16c>)
 8004f2a:	428b      	cmp	r3, r1
 8004f2c:	d01d      	beq.n	8004f6a <HAL_TIM_Encoder_Init+0xa6>
 8004f2e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f32:	428b      	cmp	r3, r1
 8004f34:	d019      	beq.n	8004f6a <HAL_TIM_Encoder_Init+0xa6>
 8004f36:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8004f3a:	428b      	cmp	r3, r1
 8004f3c:	d015      	beq.n	8004f6a <HAL_TIM_Encoder_Init+0xa6>
 8004f3e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f42:	428b      	cmp	r3, r1
 8004f44:	d011      	beq.n	8004f6a <HAL_TIM_Encoder_Init+0xa6>
 8004f46:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f4a:	428b      	cmp	r3, r1
 8004f4c:	d00d      	beq.n	8004f6a <HAL_TIM_Encoder_Init+0xa6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4e:	69a0      	ldr	r0, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8004f50:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f56:	4302      	orrs	r2, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f58:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8004f5a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f5c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f5e:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f60:	e010      	b.n	8004f84 <HAL_TIM_Encoder_Init+0xc0>
    tmpcr1 |= Structure->CounterMode;
 8004f62:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f64:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f68:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f70:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f72:	69a1      	ldr	r1, [r4, #24]
 8004f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f78:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f7a:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8004f7c:	601a      	str	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8004f7e:	6862      	ldr	r2, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f80:	62d9      	str	r1, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f82:	629a      	str	r2, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004f84:	2601      	movs	r6, #1
 8004f86:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8004f88:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8004f8a:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f8c:	69af      	ldr	r7, [r5, #24]
 8004f8e:	68aa      	ldr	r2, [r5, #8]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f90:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8004f94:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f98:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004f9c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f9e:	f422 4e7c 	bic.w	lr, r2, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fa2:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fa4:	69e9      	ldr	r1, [r5, #28]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fa6:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fa8:	0112      	lsls	r2, r2, #4
 8004faa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004fae:	68e9      	ldr	r1, [r5, #12]
 8004fb0:	430a      	orrs	r2, r1
  tmpccer = htim->Instance->CCER;
 8004fb2:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fb4:	f021 0caa 	bic.w	ip, r1, #170	@ 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fb8:	6a29      	ldr	r1, [r5, #32]
 8004fba:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fbe:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 8004fc0:	682d      	ldr	r5, [r5, #0]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fc2:	f02e 0efc 	bic.w	lr, lr, #252	@ 0xfc
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fc6:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8004fca:	4328      	orrs	r0, r5
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fcc:	ea42 020e 	orr.w	r2, r2, lr
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fd0:	ea41 010c 	orr.w	r1, r1, ip
  htim->Instance->SMCR = tmpsmcr;
 8004fd4:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8004fd6:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8004fd8:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fda:	f884 6046 	strb.w	r6, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fde:	f884 603e 	strb.w	r6, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	f884 603f 	strb.w	r6, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	f884 6042 	strb.w	r6, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	f884 6043 	strb.w	r6, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8004fee:	f884 603d 	strb.w	r6, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004ff2:	2000      	movs	r0, #0
}
 8004ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8004ff6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ffc:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffe:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005000:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005004:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005006:	69a1      	ldr	r1, [r4, #24]
 8005008:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800500c:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800500e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005010:	68e2      	ldr	r2, [r4, #12]
 8005012:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005014:	6862      	ldr	r2, [r4, #4]
 8005016:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005018:	6962      	ldr	r2, [r4, #20]
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30
 800501c:	e7b2      	b.n	8004f84 <HAL_TIM_Encoder_Init+0xc0>
    htim->Lock = HAL_UNLOCKED;
 800501e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005022:	f7fe fb65 	bl	80036f0 <HAL_TIM_Encoder_MspInit>
 8005026:	e75a      	b.n	8004ede <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 8005028:	2001      	movs	r0, #1
}
 800502a:	4770      	bx	lr
 800502c:	40010000 	.word	0x40010000
 8005030:	40014400 	.word	0x40014400

08005034 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005034:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005038:	2b01      	cmp	r3, #1
 800503a:	f000 80c6 	beq.w	80051ca <HAL_TIM_PWM_ConfigChannel+0x196>
 800503e:	2301      	movs	r3, #1
{
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8005044:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005048:	2a0c      	cmp	r2, #12
 800504a:	d808      	bhi.n	800505e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800504c:	e8df f002 	tbb	[pc, r2]
 8005050:	0707073e 	.word	0x0707073e
 8005054:	07070767 	.word	0x07070767
 8005058:	07070793 	.word	0x07070793
 800505c:	0c          	.byte	0x0c
 800505d:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800505e:	2300      	movs	r3, #0
 8005060:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8005064:	2001      	movs	r0, #1
}
 8005066:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005068:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800506a:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800506c:	6a1a      	ldr	r2, [r3, #32]
 800506e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005072:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005074:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005076:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005078:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800507a:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800507e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005082:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005084:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005088:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508c:	4d6a      	ldr	r5, [pc, #424]	@ (8005238 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800508e:	42ab      	cmp	r3, r5
 8005090:	f000 80bc 	beq.w	800520c <HAL_TIM_PWM_ConfigChannel+0x1d8>
 8005094:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005098:	42ab      	cmp	r3, r5
 800509a:	f000 80b7 	beq.w	800520c <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509e:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a0:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050a2:	6848      	ldr	r0, [r1, #4]
 80050a4:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050a8:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80050c0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80050c2:	2300      	movs	r3, #0
 80050c4:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2000      	movs	r0, #0
}
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050cc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80050ce:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80050d8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050da:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80050dc:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050de:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80050e2:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80050e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80050e6:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80050ea:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ec:	4d52      	ldr	r5, [pc, #328]	@ (8005238 <HAL_TIM_PWM_ConfigChannel+0x204>)
 80050ee:	42ab      	cmp	r3, r5
 80050f0:	d06d      	beq.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x19a>
 80050f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80050f6:	42ab      	cmp	r3, r5
 80050f8:	d069      	beq.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 80050fa:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80050fc:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80050fe:	6848      	ldr	r0, [r1, #4]
 8005100:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8005102:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005104:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005106:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005108:	f042 0208 	orr.w	r2, r2, #8
 800510c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	f022 0204 	bic.w	r2, r2, #4
 8005114:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005116:	699a      	ldr	r2, [r3, #24]
 8005118:	430a      	orrs	r2, r1
 800511a:	619a      	str	r2, [r3, #24]
      break;
 800511c:	e7d1      	b.n	80050c2 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800511e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005120:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	f022 0210 	bic.w	r2, r2, #16
 8005128:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800512a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800512c:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800512e:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005130:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005138:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800513a:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800513e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005142:	4d3d      	ldr	r5, [pc, #244]	@ (8005238 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8005144:	42ab      	cmp	r3, r5
 8005146:	d051      	beq.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x1b8>
 8005148:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800514c:	42ab      	cmp	r3, r5
 800514e:	d04d      	beq.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 8005150:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005152:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005154:	6848      	ldr	r0, [r1, #4]
 8005156:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005158:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800515a:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800515c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800515e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800516a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005172:	619a      	str	r2, [r3, #24]
      break;
 8005174:	e7a5      	b.n	80050c2 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005176:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005178:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800517a:	6a1a      	ldr	r2, [r3, #32]
 800517c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005180:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005182:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005184:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005186:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005188:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800518c:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800518e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005190:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005194:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005198:	4d27      	ldr	r5, [pc, #156]	@ (8005238 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800519a:	42ab      	cmp	r3, r5
 800519c:	d03c      	beq.n	8005218 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 800519e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80051a2:	42ab      	cmp	r3, r5
 80051a4:	d038      	beq.n	8005218 <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 80051a6:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80051a8:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80051aa:	6848      	ldr	r0, [r1, #4]
 80051ac:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80051ae:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051b0:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051b2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051b4:	f042 0208 	orr.w	r2, r2, #8
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	f022 0204 	bic.w	r2, r2, #4
 80051c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	61da      	str	r2, [r3, #28]
      break;
 80051c8:	e77b      	b.n	80050c2 <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 80051ca:	2002      	movs	r0, #2
}
 80051cc:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80051ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051d0:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80051d4:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051da:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80051de:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80051e2:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80051e6:	ea4e 0404 	orr.w	r4, lr, r4
 80051ea:	e786      	b.n	80050fa <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051ec:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80051ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051f6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051fa:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051fe:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005202:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005206:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 800520a:	e7a1      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800520c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800520e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005212:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005216:	e742      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005218:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800521a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800521e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005222:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005226:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800522a:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800522e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005232:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8005236:	e7b6      	b.n	80051a6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005238:	40010000 	.word	0x40010000

0800523c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800523c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005240:	2a01      	cmp	r2, #1
 8005242:	d050      	beq.n	80052e6 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8005244:	4603      	mov	r3, r0
{
 8005246:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800524a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8005250:	2001      	movs	r0, #1
 8005252:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005256:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005258:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800525a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 800525c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005260:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005262:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005266:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005268:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 800526a:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 800526c:	d060      	beq.n	8005330 <HAL_TIM_SlaveConfigSynchro+0xf4>
 800526e:	d90f      	bls.n	8005290 <HAL_TIM_SlaveConfigSynchro+0x54>
 8005270:	2860      	cmp	r0, #96	@ 0x60
 8005272:	d03a      	beq.n	80052ea <HAL_TIM_SlaveConfigSynchro+0xae>
 8005274:	2870      	cmp	r0, #112	@ 0x70
 8005276:	d10e      	bne.n	8005296 <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005278:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 800527c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800527e:	432a      	orrs	r2, r5
 8005280:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005282:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005286:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800528a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528c:	60a2      	str	r2, [r4, #8]
 800528e:	e00f      	b.n	80052b0 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8005290:	2840      	cmp	r0, #64	@ 0x40
 8005292:	d03d      	beq.n	8005310 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8005294:	d907      	bls.n	80052a6 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 8005296:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005298:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800529a:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80052a2:	bc30      	pop	{r4, r5}
 80052a4:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80052a6:	2820      	cmp	r0, #32
 80052a8:	d002      	beq.n	80052b0 <HAL_TIM_SlaveConfigSynchro+0x74>
 80052aa:	d912      	bls.n	80052d2 <HAL_TIM_SlaveConfigSynchro+0x96>
 80052ac:	2830      	cmp	r0, #48	@ 0x30
 80052ae:	d1f2      	bne.n	8005296 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80052b0:	68e2      	ldr	r2, [r4, #12]
 80052b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052b6:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80052b8:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 80052ba:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80052be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052c2:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80052c8:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 80052cc:	4608      	mov	r0, r1
}
 80052ce:	bc30      	pop	{r4, r5}
 80052d0:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80052d2:	f030 0210 	bics.w	r2, r0, #16
 80052d6:	d0eb      	beq.n	80052b0 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 80052d8:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80052da:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80052dc:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80052e4:	e7dd      	b.n	80052a2 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80052e6:	2002      	movs	r0, #2
}
 80052e8:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ea:	6a22      	ldr	r2, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ec:	6888      	ldr	r0, [r1, #8]
 80052ee:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f0:	f022 0210 	bic.w	r2, r2, #16
 80052f4:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f6:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 80052f8:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052fa:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052fe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005302:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005306:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800530a:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800530c:	6222      	str	r2, [r4, #32]
 800530e:	e7cf      	b.n	80052b0 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005310:	2d05      	cmp	r5, #5
 8005312:	d0c0      	beq.n	8005296 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8005314:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005316:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005318:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005320:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005322:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005326:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800532a:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 800532c:	6220      	str	r0, [r4, #32]
      break;
 800532e:	e7bf      	b.n	80052b0 <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005330:	688a      	ldr	r2, [r1, #8]
 8005332:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 8005334:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005336:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800533a:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533c:	6a22      	ldr	r2, [r4, #32]
 800533e:	f022 0201 	bic.w	r2, r2, #1
 8005342:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005344:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005346:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800534a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800534e:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8005350:	6221      	str	r1, [r4, #32]
 8005352:	e7ad      	b.n	80052b0 <HAL_TIM_SlaveConfigSynchro+0x74>

08005354 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005354:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005358:	2a01      	cmp	r2, #1
 800535a:	d037      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800535c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800535e:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	2002      	movs	r0, #2
{
 8005362:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005368:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800536a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800536c:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800536e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005372:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005374:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005376:	4816      	ldr	r0, [pc, #88]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8005378:	4282      	cmp	r2, r0
 800537a:	d01a      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800537c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005380:	d017      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005382:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8005386:	4282      	cmp	r2, r0
 8005388:	d013      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800538a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800538e:	4282      	cmp	r2, r0
 8005390:	d00f      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005392:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005396:	4282      	cmp	r2, r0
 8005398:	d00b      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800539a:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 800539e:	4282      	cmp	r2, r0
 80053a0:	d007      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80053a2:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80053a6:	4282      	cmp	r2, r0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80053aa:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80053ae:	4282      	cmp	r2, r0
 80053b0:	d104      	bne.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053b4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b8:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ba:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80053bc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80053c4:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80053c8:	bc30      	pop	{r4, r5}
 80053ca:	4770      	bx	lr
  __HAL_LOCK(htim);
 80053cc:	2002      	movs	r0, #2
}
 80053ce:	4770      	bx	lr
 80053d0:	40010000 	.word	0x40010000

080053d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d023      	beq.n	8005424 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80053dc:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053de:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80053e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e6:	4602      	mov	r2, r0
 80053e8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053ea:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053ec:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053f2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053f8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053fa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005400:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005402:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005404:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005406:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800540a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800540c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005410:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8005412:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005414:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8005416:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005418:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 800541c:	4608      	mov	r0, r1
}
 800541e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005422:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005424:	2002      	movs	r0, #2
}
 8005426:	4770      	bx	lr

08005428 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005428:	2800      	cmp	r0, #0
 800542a:	f000 8086 	beq.w	800553a <HAL_UART_Init+0x112>
{
 800542e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005430:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005434:	4604      	mov	r4, r0
 8005436:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800543a:	2b00      	cmp	r3, #0
 800543c:	d078      	beq.n	8005530 <HAL_UART_Init+0x108>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800543e:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005440:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8005442:	2224      	movs	r2, #36	@ 0x24
 8005444:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800544e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005450:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005452:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005454:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005458:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800545a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800545c:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800545e:	4302      	orrs	r2, r0
 8005460:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005462:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005464:	4302      	orrs	r2, r0
 8005466:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005468:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 800546c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005470:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005472:	430a      	orrs	r2, r1
 8005474:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800547a:	4931      	ldr	r1, [pc, #196]	@ (8005540 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800547c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005480:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005482:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005484:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005486:	d035      	beq.n	80054f4 <HAL_UART_Init+0xcc>
 8005488:	4a2e      	ldr	r2, [pc, #184]	@ (8005544 <HAL_UART_Init+0x11c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d032      	beq.n	80054f4 <HAL_UART_Init+0xcc>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800548e:	f7ff f97d 	bl	800478c <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005492:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005494:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005496:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800549a:	e9d4 5300 	ldrd	r5, r3, [r4]
 800549e:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a2:	d02a      	beq.n	80054fa <HAL_UART_Init+0xd2>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054a4:	009a      	lsls	r2, r3, #2
 80054a6:	0f9b      	lsrs	r3, r3, #30
 80054a8:	f7fa feae 	bl	8000208 <__aeabi_uldivmod>
 80054ac:	4a26      	ldr	r2, [pc, #152]	@ (8005548 <HAL_UART_Init+0x120>)
 80054ae:	fba2 1300 	umull	r1, r3, r2, r0
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2164      	movs	r1, #100	@ 0x64
 80054b6:	fb01 0013 	mls	r0, r1, r3, r0
 80054ba:	0100      	lsls	r0, r0, #4
 80054bc:	3032      	adds	r0, #50	@ 0x32
 80054be:	fba2 2000 	umull	r2, r0, r2, r0
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80054c8:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ca:	692b      	ldr	r3, [r5, #16]
 80054cc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80054d0:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054d2:	696b      	ldr	r3, [r5, #20]
 80054d4:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80054d8:	616b      	str	r3, [r5, #20]
  __HAL_UART_ENABLE(huart);
 80054da:	68eb      	ldr	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054dc:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80054de:	2220      	movs	r2, #32
  __HAL_UART_ENABLE(huart);
 80054e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80054e4:	60eb      	str	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	6421      	str	r1, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  return HAL_OK;
 80054f0:	4608      	mov	r0, r1
}
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80054f4:	f7ff f95a 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 80054f8:	e7cb      	b.n	8005492 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054fa:	18da      	adds	r2, r3, r3
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	415b      	adcs	r3, r3
 8005502:	f7fa fe81 	bl	8000208 <__aeabi_uldivmod>
 8005506:	4a10      	ldr	r2, [pc, #64]	@ (8005548 <HAL_UART_Init+0x120>)
 8005508:	fba2 3100 	umull	r3, r1, r2, r0
 800550c:	0949      	lsrs	r1, r1, #5
 800550e:	2364      	movs	r3, #100	@ 0x64
 8005510:	fb03 0311 	mls	r3, r3, r1, r0
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	3332      	adds	r3, #50	@ 0x32
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005526:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800552a:	4413      	add	r3, r2
 800552c:	60ab      	str	r3, [r5, #8]
 800552e:	e7cc      	b.n	80054ca <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8005530:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 8005534:	f7fe f95c 	bl	80037f0 <HAL_UART_MspInit>
 8005538:	e781      	b.n	800543e <HAL_UART_Init+0x16>
    return HAL_ERROR;
 800553a:	2001      	movs	r0, #1
}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40011000 	.word	0x40011000
 8005544:	40011400 	.word	0x40011400
 8005548:	51eb851f 	.word	0x51eb851f

0800554c <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 800554c:	88c0      	ldrh	r0, [r0, #6]
 800554e:	4770      	bx	lr

08005550 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005550:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005552:	8840      	ldrh	r0, [r0, #2]
 8005554:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8005558:	0c00      	lsrs	r0, r0, #16
 800555a:	4770      	bx	lr

0800555c <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 800555c:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800555e:	8803      	ldrh	r3, [r0, #0]
 8005560:	140d      	asrs	r5, r1, #16
 8005562:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005564:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8005568:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 800556c:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8005570:	428b      	cmp	r3, r1
{
 8005572:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8005574:	da0f      	bge.n	8005596 <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005576:	8846      	ldrh	r6, [r0, #2]
 8005578:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 800557c:	4282      	cmp	r2, r0
 800557e:	dd13      	ble.n	80055a8 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8005580:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8005582:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8005586:	bfb8      	it	lt
 8005588:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 800558a:	f7fb ff7d 	bl	8001488 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 800558e:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8005590:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8005592:	db0e      	blt.n	80055b2 <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8005594:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8005596:	b2a4      	uxth	r4, r4
 8005598:	2000      	movs	r0, #0
 800559a:	f364 000f 	bfi	r0, r4, #0, #16
 800559e:	b2ad      	uxth	r5, r5
 80055a0:	f365 401f 	bfi	r0, r5, #16, #16
}
 80055a4:	b004      	add	sp, #16
 80055a6:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 80055a8:	1a98      	subs	r0, r3, r2
 80055aa:	f7fb ff6d 	bl	8001488 <MCM_Sqrt>
        if (Vqd.q < 0)
 80055ae:	2c00      	cmp	r4, #0
 80055b0:	daf0      	bge.n	8005594 <Circle_Limitation+0x38>
          new_q = - new_q;
 80055b2:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 80055b4:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 80055b6:	e7ee      	b.n	8005596 <Circle_Limitation+0x3a>

080055b8 <EAC_Init>:
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 80055b8:	f04f 0c00 	mov.w	ip, #0
    pHandle->pVSS = pVSS;
 80055bc:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 80055c0:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 80055c2:	f8a0 c00e 	strh.w	ip, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80055c6:	4770      	bx	lr

080055c8 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 80055c8:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80055ca:	2200      	movs	r2, #0
{
 80055cc:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80055ce:	4611      	mov	r1, r2
 80055d0:	6840      	ldr	r0, [r0, #4]
 80055d2:	f001 fe59 	bl	8007288 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 80055d6:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80055da:	6860      	ldr	r0, [r4, #4]
 80055dc:	f001 fe4c 	bl	8007278 <VSS_SetMecAngle>

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80055e0:	6820      	ldr	r0, [r4, #0]
 80055e2:	2104      	movs	r1, #4
 80055e4:	f001 fa34 	bl	8006a50 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 80055e8:	2200      	movs	r2, #0
 80055ea:	4611      	mov	r1, r2
 80055ec:	6820      	ldr	r0, [r4, #0]
 80055ee:	f001 fa33 	bl	8006a58 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 80055f2:	8ae2      	ldrh	r2, [r4, #22]
 80055f4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80055f8:	6820      	ldr	r0, [r4, #0]
 80055fa:	f001 fa2d 	bl	8006a58 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 80055fe:	8ae3      	ldrh	r3, [r4, #22]
 8005600:	8a21      	ldrh	r1, [r4, #16]
    wAux /= 1000U;
 8005602:	4a04      	ldr	r2, [pc, #16]	@ (8005614 <EAC_StartAlignment+0x4c>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8005604:	fb01 f303 	mul.w	r3, r1, r3
    wAux /= 1000U;
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 800560e:	3301      	adds	r3, #1
 8005610:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8005612:	bd10      	pop	{r4, pc}
 8005614:	10624dd3 	.word	0x10624dd3

08005618 <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8005618:	8983      	ldrh	r3, [r0, #12]
 800561a:	b90b      	cbnz	r3, 8005620 <EAC_Exec+0x8>
  bool retVal = true;
 800561c:	2001      	movs	r0, #1
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 800561e:	4770      	bx	lr
      pHandle->hRemainingTicks--;
 8005620:	3b01      	subs	r3, #1
 8005622:	b29b      	uxth	r3, r3
{
 8005624:	b510      	push	{r4, lr}
 8005626:	4604      	mov	r4, r0
      pHandle->hRemainingTicks--;
 8005628:	8183      	strh	r3, [r0, #12]
      if (0U == pHandle->hRemainingTicks)
 800562a:	b10b      	cbz	r3, 8005630 <EAC_Exec+0x18>
        retVal = false;
 800562c:	2000      	movs	r0, #0
}
 800562e:	bd10      	pop	{r4, pc}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8005630:	7e03      	ldrb	r3, [r0, #24]
 8005632:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8005636:	6880      	ldr	r0, [r0, #8]
 8005638:	fb91 f1f3 	sdiv	r1, r1, r3
 800563c:	f000 f930 	bl	80058a0 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8005640:	2301      	movs	r3, #1
 8005642:	73a3      	strb	r3, [r4, #14]
  bool retVal = true;
 8005644:	2001      	movs	r0, #1
}
 8005646:	bd10      	pop	{r4, pc}

08005648 <EAC_IsAligned>:
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
#endif
}
 8005648:	7b80      	ldrb	r0, [r0, #14]
 800564a:	4770      	bx	lr

0800564c <EAC_SetRestartState>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 800564c:	73c1      	strb	r1, [r0, #15]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 800564e:	4770      	bx	lr

08005650 <ENC_Init>:
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005650:	f8b0 206c 	ldrh.w	r2, [r0, #108]	@ 0x6c
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005654:	6a03      	ldr	r3, [r0, #32]
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005656:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800565a:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 800565c:	2100      	movs	r1, #0
{
 800565e:	b410      	push	{r4}
 8005660:	6259      	str	r1, [r3, #36]	@ 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8005662:	f8b0 406e 	ldrh.w	r4, [r0, #110]	@ 0x6e
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8005666:	6242      	str	r2, [r0, #36]	@ 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8005668:	f04f 32ff 	mov.w	r2, #4294967295
 800566c:	fbb2 f2f4 	udiv	r2, r2, r4
 8005670:	6682      	str	r2, [r0, #104]	@ 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005672:	699c      	ldr	r4, [r3, #24]
 8005674:	f8b0 207a 	ldrh.w	r2, [r0, #122]	@ 0x7a
 8005678:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
 800567c:	ea42 020c 	orr.w	r2, r2, ip
 8005680:	619a      	str	r2, [r3, #24]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	f8b0 407a 	ldrh.w	r4, [r0, #122]	@ 0x7a
 8005688:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800568c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005690:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005694:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005696:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 80056a8:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74

    for (index = 0U; index < bufferSize; index++)
 80056ac:	b12a      	cbz	r2, 80056ba <ENC_Init+0x6a>
      pHandle->DeltaCapturesBuffer[index] = 0;
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80056ae:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->DeltaCapturesBuffer[index] = 0;
 80056b2:	0092      	lsls	r2, r2, #2
 80056b4:	3028      	adds	r0, #40	@ 0x28
 80056b6:	f001 be23 	b.w	8007300 <memset>
}
 80056ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 80056c0:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 80056c2:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74
{
 80056c6:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 80056c8:	b122      	cbz	r2, 80056d4 <ENC_Clear+0x14>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 80056ca:	0092      	lsls	r2, r2, #2
 80056cc:	2100      	movs	r1, #0
 80056ce:	3028      	adds	r0, #40	@ 0x28
 80056d0:	f001 fe16 	bl	8007300 <memset>
    }
    pHandle->SensorIsReliable = true;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80056da:	bd10      	pop	{r4, pc}

080056dc <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 80056dc:	b410      	push	{r4}
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 80056de:	6a02      	ldr	r2, [r0, #32]
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 80056e0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80056e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
{
 80056e6:	4603      	mov	r3, r0
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 80056e8:	b292      	uxth	r2, r2
 80056ea:	6e9c      	ldr	r4, [r3, #104]	@ 0x68

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80056ec:	7840      	ldrb	r0, [r0, #1]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 80056ee:	fb04 f202 	mul.w	r2, r4, r2
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80056f2:	1412      	asrs	r2, r2, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80056f4:	fb02 f000 	mul.w	r0, r2, r0

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 80056f8:	1a51      	subs	r1, r2, r1
    mecAngle = (int16_t)wtemp1;
 80056fa:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80056fc:	689a      	ldr	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 80056fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8005702:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8005704:	fa02 f281 	sxtah	r2, r2, r1
    pHandle->_Super.hElAngle = elAngle;
 8005708:	8098      	strh	r0, [r3, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop

08005710 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8005710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005712:	4603      	mov	r3, r0
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8005714:	6a02      	ldr	r2, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8005716:	f890 0074 	ldrb.w	r0, [r0, #116]	@ 0x74
 800571a:	6a55      	ldr	r5, [r2, #36]	@ 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 800571c:	f8b3 4070 	ldrh.w	r4, [r3, #112]	@ 0x70
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
    {
      /* Encoder timer down-counting */
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
 8005720:	f8b3 e072 	ldrh.w	lr, [r3, #114]	@ 0x72
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005724:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	@ 0x6e
    pHandle->TimerOverflowNb = 0;
 8005728:	2600      	movs	r6, #0
 800572a:	f8a3 6070 	strh.w	r6, [r3, #112]	@ 0x70
    OverflowCntSample = pHandle->TimerOverflowNb;
 800572e:	b2a4      	uxth	r4, r4
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8005730:	6812      	ldr	r2, [r2, #0]
    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8005732:	2c01      	cmp	r4, #1
      pHandle->TimerOverflowError = true;
 8005734:	bf88      	it	hi
 8005736:	2401      	movhi	r4, #1
 8005738:	f002 0210 	and.w	r2, r2, #16
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 800573c:	bf94      	ite	ls
 800573e:	f893 407d 	ldrbls.w	r4, [r3, #125]	@ 0x7d
      pHandle->TimerOverflowError = true;
 8005742:	f883 407d 	strbhi.w	r4, [r3, #125]	@ 0x7d
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8005746:	eba5 060e 	sub.w	r6, r5, lr
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 800574a:	2a00      	cmp	r2, #0
 800574c:	f000 8092 	beq.w	8005874 <ENC_CalcAvrgMecSpeedUnit+0x164>
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005750:	4575      	cmp	r5, lr
 8005752:	bf8c      	ite	hi
 8005754:	4662      	movhi	r2, ip
 8005756:	2200      	movls	r2, #0
 8005758:	1ab6      	subs	r6, r6, r2
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800575a:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800575e:	320a      	adds	r2, #10
 8005760:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005764:	2800      	cmp	r0, #0
 8005766:	f000 8092 	beq.w	800588e <ENC_CalcAvrgMecSpeedUnit+0x17e>
 800576a:	2801      	cmp	r0, #1
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800576c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800576e:	d039      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005770:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005772:	2802      	cmp	r0, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005774:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005776:	d035      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005778:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800577a:	2803      	cmp	r0, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800577c:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800577e:	d031      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005780:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005782:	2804      	cmp	r0, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005784:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005786:	d02d      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005788:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800578a:	2805      	cmp	r0, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800578c:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800578e:	d029      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005790:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005792:	2806      	cmp	r0, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005794:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005796:	d025      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8005798:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800579a:	2807      	cmp	r0, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800579c:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800579e:	d021      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057a0:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057a2:	2808      	cmp	r0, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057a4:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057a6:	d01d      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057a8:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057aa:	2809      	cmp	r0, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057ac:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057ae:	d019      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057b0:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057b2:	280a      	cmp	r0, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057b4:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057b6:	d015      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057b8:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057ba:	280b      	cmp	r0, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057bc:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057be:	d011      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057c0:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057c2:	280c      	cmp	r0, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057c4:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057c6:	d00d      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057c8:	6d9e      	ldr	r6, [r3, #88]	@ 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057ca:	280d      	cmp	r0, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057cc:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057ce:	d009      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057d0:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057d2:	280e      	cmp	r0, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057d4:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057d6:	d005      	beq.n	80057e4 <ENC_CalcAvrgMecSpeedUnit+0xd4>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057d8:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80057da:	280f      	cmp	r0, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80057dc:	4432      	add	r2, r6
 80057de:	bf1c      	itt	ne
 80057e0:	6e5e      	ldrne	r6, [r3, #100]	@ 0x64
 80057e2:	1992      	addne	r2, r2, r6
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80057e4:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 80057e6:	fb0c f600 	mul.w	r6, ip, r0
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80057ea:	fb07 f202 	mul.w	r2, r7, r2
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 80057ee:	b10e      	cbz	r6, 80057f4 <ENC_CalcAvrgMecSpeedUnit+0xe4>
 80057f0:	fb92 f2f6 	sdiv	r2, r2, r6
    *pMecSpeedUnit = (int16_t)wtemp1;
 80057f4:	fa0f fe82 	sxth.w	lr, r2
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 80057f8:	b292      	uxth	r2, r2
    *pMecSpeedUnit = (int16_t)wtemp1;
 80057fa:	f8a1 e000 	strh.w	lr, [r1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 80057fe:	f893 607c 	ldrb.w	r6, [r3, #124]	@ 0x7c
    pHandle->DeltaCapturesIndex++;
 8005802:	f893 c07c 	ldrb.w	ip, [r3, #124]	@ 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005806:	360a      	adds	r6, #10
    pHandle->DeltaCapturesIndex++;
 8005808:	f10c 0c01 	add.w	ip, ip, #1
 800580c:	fa5f fc8c 	uxtb.w	ip, ip
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005810:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
    pHandle->DeltaCapturesIndex++;
 8005814:	f883 c07c 	strb.w	ip, [r3, #124]	@ 0x7c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005818:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 800581c:	f8a3 e00c 	strh.w	lr, [r3, #12]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8005820:	eba2 020c 	sub.w	r2, r2, ip
 8005824:	825a      	strh	r2, [r3, #18]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8005826:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 800582a:	f893 e07c 	ldrb.w	lr, [r3, #124]	@ 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800582e:	fb06 f202 	mul.w	r2, r6, r2
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8005832:	785e      	ldrb	r6, [r3, #1]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005834:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8005838:	4565      	cmp	r5, ip
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 800583a:	fb06 f202 	mul.w	r2, r6, r2
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 800583e:	69de      	ldr	r6, [r3, #28]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005840:	bf28      	it	cs
 8005842:	4665      	movcs	r5, ip
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8005844:	4586      	cmp	lr, r0
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8005846:	f8a3 5072 	strh.w	r5, [r3, #114]	@ 0x72
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 800584a:	f8b3 506e 	ldrh.w	r5, [r3, #110]	@ 0x6e
 800584e:	fb92 f2f5 	sdiv	r2, r2, r5
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8005852:	8b5d      	ldrh	r5, [r3, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8005854:	fb06 f202 	mul.w	r2, r6, r2
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8005858:	fb92 f2f5 	sdiv	r2, r2, r5
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 800585c:	81da      	strh	r2, [r3, #14]
      pHandle->DeltaCapturesIndex = 0U;
 800585e:	bf24      	itt	cs
 8005860:	2200      	movcs	r2, #0
 8005862:	f883 207c 	strbcs.w	r2, [r3, #124]	@ 0x7c
    if (pHandle->TimerOverflowError)
 8005866:	b1ac      	cbz	r4, 8005894 <ENC_CalcAvrgMecSpeedUnit+0x184>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005868:	78da      	ldrb	r2, [r3, #3]
 800586a:	701a      	strb	r2, [r3, #0]
      pHandle->SensorIsReliable = false;
 800586c:	2000      	movs	r0, #0
 800586e:	f883 0075 	strb.w	r0, [r3, #117]	@ 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8005872:	bdf0      	pop	{r4, r5, r6, r7, pc}
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8005874:	4575      	cmp	r5, lr
 8005876:	bf34      	ite	cc
 8005878:	4662      	movcc	r2, ip
 800587a:	2200      	movcs	r2, #0
 800587c:	4416      	add	r6, r2
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800587e:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 8005882:	320a      	adds	r2, #10
 8005884:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8005888:	2800      	cmp	r0, #0
 800588a:	f47f af6e 	bne.w	800576a <ENC_CalcAvrgMecSpeedUnit+0x5a>
 800588e:	4602      	mov	r2, r0
 8005890:	4686      	mov	lr, r0
 8005892:	e7b2      	b.n	80057fa <ENC_CalcAvrgMecSpeedUnit+0xea>
}
 8005894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8005898:	4618      	mov	r0, r3
 800589a:	f001 b86f 	b.w	800697c <SPD_IsMecSpeedReliable>
 800589e:	bf00      	nop

080058a0 <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80058a0:	7843      	ldrb	r3, [r0, #1]
    pHandle->_Super.hMecAngle = localhMecAngle;
 80058a2:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80058a4:	b28a      	uxth	r2, r1
 80058a6:	fb01 f303 	mul.w	r3, r1, r3
    if (localhMecAngle < 0)
 80058aa:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 80058ac:	8083      	strh	r3, [r0, #4]
 80058ae:	bfb8      	it	lt
 80058b0:	f102 32ff 	addlt.w	r2, r2, #4294967295
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 80058b4:	f8b0 306e 	ldrh.w	r3, [r0, #110]	@ 0x6e
 80058b8:	4906      	ldr	r1, [pc, #24]	@ (80058d4 <ENC_SetMecAngle+0x34>)
 80058ba:	bfb8      	it	lt
 80058bc:	b292      	uxthlt	r2, r2
 80058be:	fb02 f303 	mul.w	r3, r2, r3
{
 80058c2:	b410      	push	{r4}
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 80058c4:	fba1 1303 	umull	r1, r3, r1, r3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80058c8:	6a04      	ldr	r4, [r0, #32]
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 80058ca:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 80058cc:	6263      	str	r3, [r4, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80058ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	80008001 	.word	0x80008001

080058d8 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 80058d8:	4602      	mov	r2, r0
  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 80058da:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 80058dc:	f8b2 3070 	ldrh.w	r3, [r2, #112]	@ 0x70
 80058e0:	3301      	adds	r3, #1
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f8a2 3070 	strh.w	r3, [r2, #112]	@ 0x70
}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop

080058ec <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80058ee:	7fc3      	ldrb	r3, [r0, #31]
 80058f0:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 80058f4:	429a      	cmp	r2, r3
{
 80058f6:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80058f8:	d002      	beq.n	8005900 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 80058fa:	3301      	adds	r3, #1
 80058fc:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 80058fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8005900:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8005906:	b1a5      	cbz	r5, 8005932 <MCPA_dataLog+0x46>
 8005908:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800590a:	8ba2      	ldrh	r2, [r4, #28]
 800590c:	42aa      	cmp	r2, r5
 800590e:	d24e      	bcs.n	80059ae <MCPA_dataLog+0xc2>
 8005910:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8005914:	2bfe      	cmp	r3, #254	@ 0xfe
 8005916:	d066      	beq.n	80059e6 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005918:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800591c:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 800591e:	8b22      	ldrh	r2, [r4, #24]
 8005920:	6820      	ldr	r0, [r4, #0]
 8005922:	3202      	adds	r2, #2
 8005924:	2309      	movs	r3, #9
 8005926:	6845      	ldr	r5, [r0, #4]
 8005928:	b292      	uxth	r2, r2
 800592a:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	8323      	strh	r3, [r4, #24]
}
 8005930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8005932:	4601      	mov	r1, r0
 8005934:	2209      	movs	r2, #9
 8005936:	f851 0b14 	ldr.w	r0, [r1], #20
 800593a:	6803      	ldr	r3, [r0, #0]
 800593c:	4798      	blx	r3
 800593e:	b390      	cbz	r0, 80059a6 <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8005940:	4b49      	ldr	r3, [pc, #292]	@ (8005a68 <MCPA_dataLog+0x17c>)
 8005942:	6961      	ldr	r1, [r4, #20]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005948:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 800594c:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8005950:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8005954:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8005956:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8005958:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 800595a:	d101      	bne.n	8005960 <MCPA_dataLog+0x74>
 800595c:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800595e:	e7d4      	b.n	800590a <MCPA_dataLog+0x1e>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005960:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005964:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005968:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 800596c:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8005970:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8005974:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8005978:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800597a:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 800597c:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005980:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff          = pHandle->MFRate;
 8005982:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005986:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005988:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
            pHandle->HFRateBuff          = pHandle->HFRate;
 800598c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8005990:	f001 fce2 	bl	8007358 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8005994:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8005998:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 800599c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 80059a0:	441a      	add	r2, r3
 80059a2:	f001 fcd9 	bl	8007358 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80059a6:	8b25      	ldrh	r5, [r4, #24]
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	d1ad      	bne.n	8005908 <MCPA_dataLog+0x1c>
}
 80059ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80059ae:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80059b2:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80059b4:	b36e      	cbz	r6, 8005a12 <MCPA_dataLog+0x126>
 80059b6:	68a2      	ldr	r2, [r4, #8]
 80059b8:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 80059bc:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 80059be:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80059c2:	8800      	ldrh	r0, [r0, #0]
 80059c4:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80059c8:	8b25      	ldrh	r5, [r4, #24]
 80059ca:	3502      	adds	r5, #2
 80059cc:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80059ce:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80059d0:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80059d2:	d1f4      	bne.n	80059be <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 80059d4:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80059d8:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 80059da:	2bfd      	cmp	r3, #253	@ 0xfd
 80059dc:	4618      	mov	r0, r3
 80059de:	d91d      	bls.n	8005a1c <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80059e0:	4295      	cmp	r5, r2
 80059e2:	d897      	bhi.n	8005914 <MCPA_dataLog+0x28>
}
 80059e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80059e6:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80059ea:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 80059ee:	4418      	add	r0, r3
 80059f0:	4298      	cmp	r0, r3
 80059f2:	dd91      	ble.n	8005918 <MCPA_dataLog+0x2c>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80059f4:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80059f6:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80059f8:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80059fc:	6812      	ldr	r2, [r2, #0]
 80059fe:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a00:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005a02:	5cf3      	ldrb	r3, [r6, r3]
 8005a04:	442b      	add	r3, r5
 8005a06:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a08:	b2d3      	uxtb	r3, r2
 8005a0a:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005a0c:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a0e:	dbf3      	blt.n	80059f8 <MCPA_dataLog+0x10c>
 8005a10:	e782      	b.n	8005918 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8005a12:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 8005a16:	28fd      	cmp	r0, #253	@ 0xfd
 8005a18:	f63f af71 	bhi.w	80058fe <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8005a1c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005a20:	4283      	cmp	r3, r0
 8005a22:	d006      	beq.n	8005a32 <MCPA_dataLog+0x146>
            pHandle->MFIndex ++;
 8005a24:	3301      	adds	r3, #1
 8005a26:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005a2a:	4295      	cmp	r5, r2
 8005a2c:	f63f af74 	bhi.w	8005918 <MCPA_dataLog+0x2c>
}
 8005a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a32:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8005a36:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8005a38:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a3a:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8005a3c:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a40:	ddf3      	ble.n	8005a2a <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005a42:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005a46:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005a4a:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005a52:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a56:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005a58:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a5a:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005a5c:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a5e:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005a60:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a62:	dbf2      	blt.n	8005a4a <MCPA_dataLog+0x15e>
 8005a64:	e7e1      	b.n	8005a2a <MCPA_dataLog+0x13e>
 8005a66:	bf00      	nop
 8005a68:	20001968 	.word	0x20001968

08005a6c <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8005a6c:	8b03      	ldrh	r3, [r0, #24]
 8005a6e:	b19b      	cbz	r3, 8005a98 <MCPA_flushDataLog+0x2c>
{
 8005a70:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8005a72:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005a76:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8005a78:	2afe      	cmp	r2, #254	@ 0xfe
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	d00d      	beq.n	8005a9a <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005a7e:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8005a82:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8005a84:	8b22      	ldrh	r2, [r4, #24]
 8005a86:	6820      	ldr	r0, [r4, #0]
 8005a88:	3202      	adds	r2, #2
 8005a8a:	2309      	movs	r3, #9
 8005a8c:	6845      	ldr	r5, [r0, #4]
 8005a8e:	b292      	uxth	r2, r2
 8005a90:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005a96:	bd70      	pop	{r4, r5, r6, pc}
 8005a98:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005a9a:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8005a9e:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8005aa2:	4494      	add	ip, r2
 8005aa4:	4562      	cmp	r2, ip
 8005aa6:	daea      	bge.n	8005a7e <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005aa8:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005aaa:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005aac:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8005ab0:	6800      	ldr	r0, [r0, #0]
 8005ab2:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ab4:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ab6:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ab8:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005aba:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005abc:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005abe:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ac0:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8005ac2:	dbf3      	blt.n	8005aac <MCPA_flushDataLog+0x40>
 8005ac4:	e7db      	b.n	8005a7e <MCPA_flushDataLog+0x12>
 8005ac6:	bf00      	nop

08005ac8 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8005ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8005acc:	880f      	ldrh	r7, [r1, #0]
{
 8005ace:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8005ad0:	2f00      	cmp	r7, #0
 8005ad2:	d046      	beq.n	8005b62 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	89db      	ldrh	r3, [r3, #14]
 8005ad8:	42bb      	cmp	r3, r7
 8005ada:	d33f      	bcc.n	8005b5c <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8005adc:	788b      	ldrb	r3, [r1, #2]
 8005ade:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8005ae2:	f891 8003 	ldrb.w	r8, [r1, #3]
 8005ae6:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8005aea:	790b      	ldrb	r3, [r1, #4]
 8005aec:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8005af0:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8005af2:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8005af4:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8005af8:	4443      	add	r3, r8
 8005afa:	4293      	cmp	r3, r2
 8005afc:	dc57      	bgt.n	8005bae <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8005afe:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d057      	beq.n	8005bb4 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8005b04:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005b08:	4645      	mov	r5, r8
 8005b0a:	e011      	b.n	8005b30 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8005b0c:	68e3      	ldr	r3, [r4, #12]
 8005b0e:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8005b10:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005b12:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8005b16:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8005b1a:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005b1c:	f105 0c01 	add.w	ip, r5, #1
 8005b20:	fa5f f58c 	uxtb.w	r5, ip
 8005b24:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8005b26:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005b28:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 8005b2a:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005b2e:	da11      	bge.n	8005b54 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8005b30:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8005b34:	6861      	ldr	r1, [r4, #4]
 8005b36:	4648      	mov	r0, r9
 8005b38:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8005b3c:	f7fd fb58 	bl	80031f0 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8005b40:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8005b44:	42ab      	cmp	r3, r5
 8005b46:	f04f 0002 	mov.w	r0, #2
 8005b4a:	d8df      	bhi.n	8005b0c <MCPA_cfgLog+0x44>
 8005b4c:	4648      	mov	r0, r9
 8005b4e:	f7fd fb43 	bl	80031d8 <RI_GetIDSize>
 8005b52:	e7db      	b.n	8005b0c <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8005b54:	f108 0206 	add.w	r2, r8, #6
 8005b58:	4297      	cmp	r7, r2
 8005b5a:	d210      	bcs.n	8005b7e <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8005b5c:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8005b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8005b62:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8005b64:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 8005b68:	b9ab      	cbnz	r3, 8005b96 <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8005b6e:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8005b72:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8005b74:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8005b78:	2000      	movs	r0, #0
}
 8005b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8005b7e:	3f02      	subs	r7, #2
 8005b80:	eba7 0708 	sub.w	r7, r7, r8
 8005b84:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8005b86:	7833      	ldrb	r3, [r6, #0]
 8005b88:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f3      	bne.n	8005b78 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8005b90:	8b23      	ldrh	r3, [r4, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0e9      	beq.n	8005b6a <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005b96:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8005b98:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8005b9c:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8005b9e:	8b22      	ldrh	r2, [r4, #24]
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	3202      	adds	r2, #2
 8005ba4:	6845      	ldr	r5, [r0, #4]
 8005ba6:	b292      	uxth	r2, r2
 8005ba8:	2309      	movs	r3, #9
 8005baa:	47a8      	blx	r5
 8005bac:	e7dd      	b.n	8005b6a <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8005bae:	200a      	movs	r0, #10
}
 8005bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8005bb4:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8005bb6:	4698      	mov	r8, r3
 8005bb8:	e7ce      	b.n	8005b58 <MCPA_cfgLog+0x90>
 8005bba:	bf00      	nop

08005bbc <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	8043      	strh	r3, [r0, #2]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop

08005bc4 <NTC_Init>:
    if (REAL_SENSOR == pHandle->bSensorType)
 8005bc4:	7802      	ldrb	r2, [r0, #0]
{
 8005bc6:	b508      	push	{r3, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8005bc8:	b122      	cbz	r2, 8005bd4 <NTC_Init+0x10>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005bca:	8882      	ldrh	r2, [r0, #4]
 8005bcc:	8042      	strh	r2, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8005bce:	2100      	movs	r1, #0
 8005bd0:	8101      	strh	r1, [r0, #8]
}
 8005bd2:	bd08      	pop	{r3, pc}
      NTC_Clear(pHandle);
 8005bd4:	f7ff fff2 	bl	8005bbc <NTC_Clear>
}
 8005bd8:	bd08      	pop	{r3, pc}
 8005bda:	bf00      	nop

08005bdc <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8005bdc:	7803      	ldrb	r3, [r0, #0]
 8005bde:	b95b      	cbnz	r3, 8005bf8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8005be0:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8005be2:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8005be4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005be8:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 8005bea:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005bf0:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8005bf4:	b200      	sxth	r0, r0
 8005bf6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8005bf8:	88c0      	ldrh	r0, [r0, #6]
}
 8005bfa:	b200      	sxth	r0, r0
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop

08005c00 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8005c00:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005c02:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8005c04:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005c06:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8005c08:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8005c0a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8005c0c:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c0e:	4770      	bx	lr

08005c10 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8005c10:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c12:	4770      	bx	lr

08005c14 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8005c14:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c16:	4770      	bx	lr

08005c18 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8005c18:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop

08005c20 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8005c20:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop

08005c28 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8005c28:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8005c2a:	4770      	bx	lr

08005c2c <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8005c2c:	8b80      	ldrh	r0, [r0, #28]
 8005c2e:	4770      	bx	lr

08005c30 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8005c30:	2301      	movs	r3, #1
 8005c32:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8005c34:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8005c36:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop

08005c3c <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8005c3c:	8bc0      	ldrh	r0, [r0, #30]
 8005c3e:	4770      	bx	lr

08005c40 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8005c40:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c42:	4770      	bx	lr

08005c44 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8005c44:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c46:	4770      	bx	lr

08005c48 <PID_SetKIDivisorPOW2>:
{
 8005c48:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8005c4a:	2301      	movs	r3, #1
{
 8005c4c:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8005c4e:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8005c50:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005c54:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8005c56:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8005c58:	8343      	strh	r3, [r0, #26]
{
 8005c5a:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8005c5c:	f7ff fff2 	bl	8005c44 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8005c60:	4902      	ldr	r1, [pc, #8]	@ (8005c6c <PID_SetKIDivisorPOW2+0x24>)
 8005c62:	4628      	mov	r0, r5
 8005c64:	40a1      	lsls	r1, r4
 8005c66:	f7ff ffeb 	bl	8005c40 <PID_SetLowerIntegralTermLimit>
}
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	ffff8001 	.word	0xffff8001

08005c70 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8005c70:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c72:	4770      	bx	lr

08005c74 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8005c74:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8005c7c:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8005c7e:	4770      	bx	lr

08005c80 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8005c80:	2301      	movs	r3, #1
 8005c82:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8005c84:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8005c86:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop

08005c8c <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005c8c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8005c90:	4603      	mov	r3, r0
 8005c92:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005c94:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005c98:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005c9c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005ca0:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8005ca4:	b17c      	cbz	r4, 8005cc6 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005ca6:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005caa:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8005cae:	eb15 0e01 	adds.w	lr, r5, r1
 8005cb2:	d41d      	bmi.n	8005cf0 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8005cb4:	420d      	tst	r5, r1
 8005cb6:	4914      	ldr	r1, [pc, #80]	@ (8005d08 <PI_Controller+0x7c>)
 8005cb8:	bf48      	it	mi
 8005cba:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005cbc:	45a6      	cmp	lr, r4
 8005cbe:	dc02      	bgt.n	8005cc6 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8005cc0:	691c      	ldr	r4, [r3, #16]
 8005cc2:	4574      	cmp	r4, lr
 8005cc4:	dd1d      	ble.n	8005d02 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8005cc6:	8b99      	ldrh	r1, [r3, #28]
 8005cc8:	410a      	asrs	r2, r1
 8005cca:	8bd9      	ldrh	r1, [r3, #30]
 8005ccc:	fa44 f101 	asr.w	r1, r4, r1
 8005cd0:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8005cd2:	4290      	cmp	r0, r2
 8005cd4:	da03      	bge.n	8005cde <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8005cd6:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8005cd8:	4414      	add	r4, r2
 8005cda:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8005cdc:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8005cde:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8005ce0:	bfc5      	ittet	gt
 8005ce2:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8005ce6:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8005ce8:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8005cea:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8005cec:	609c      	str	r4, [r3, #8]
}
 8005cee:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8005cf0:	2d00      	cmp	r5, #0
 8005cf2:	dde3      	ble.n	8005cbc <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	dde1      	ble.n	8005cbc <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005cf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005cfc:	428c      	cmp	r4, r1
 8005cfe:	d1e2      	bne.n	8005cc6 <PI_Controller+0x3a>
 8005d00:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8005d02:	4674      	mov	r4, lr
 8005d04:	e7df      	b.n	8005cc6 <PI_Controller+0x3a>
 8005d06:	bf00      	nop
 8005d08:	80000001 	.word	0x80000001

08005d0c <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8005d0c:	6882      	ldr	r2, [r0, #8]
{
 8005d0e:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005d10:	89d1      	ldrh	r1, [r2, #14]
 8005d12:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8005d16:	8993      	ldrh	r3, [r2, #12]
 8005d18:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005d1c:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8005d20:	fb13 230c 	smlabb	r3, r3, ip, r2
 8005d24:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8005d26:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8005d2a:	bfbc      	itt	lt
 8005d2c:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8005d30:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8005d32:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8005d36:	bf48      	it	mi
 8005d38:	330f      	addmi	r3, #15
 8005d3a:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8005d3e:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8005d40:	f85d fb04 	ldr.w	pc, [sp], #4

08005d44 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop

08005d4c <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8005d4c:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8005d4e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8005d52:	ee07 3a90 	vmov	s15, r3
{
 8005d56:	ed2d 8b02 	vpush	{d8}
 8005d5a:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8005d5c:	68c0      	ldr	r0, [r0, #12]
 8005d5e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005d62:	f7ff fbf5 	bl	8005550 <VBS_GetAvBusVoltage_V>
 8005d66:	edd4 7a01 	vldr	s15, [r4, #4]
 8005d6a:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8005d6e:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8005d72:	ee00 0a10 	vmov	s0, r0
 8005d76:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8005d7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005d7e:	bd10      	pop	{r4, pc}

08005d80 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8005d80:	4b17      	ldr	r3, [pc, #92]	@ (8005de0 <startTimers+0x60>)
 8005d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 8005d84:	07d2      	lsls	r2, r2, #31
 8005d86:	d415      	bmi.n	8005db4 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8005d88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005d90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8005d92:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005d94:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005d98:	f002 0201 	and.w	r2, r2, #1
 8005d9c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005d9e:	9a01      	ldr	r2, [sp, #4]
 8005da0:	694a      	ldr	r2, [r1, #20]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005da8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	641a      	str	r2, [r3, #64]	@ 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8005db0:	b002      	add	sp, #8
 8005db2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8005db4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005db8:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005dba:	6859      	ldr	r1, [r3, #4]
 8005dbc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005dc0:	f041 0120 	orr.w	r1, r1, #32
 8005dc4:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005dc6:	6959      	ldr	r1, [r3, #20]
 8005dc8:	f041 0101 	orr.w	r1, r1, #1
 8005dcc:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005dce:	6859      	ldr	r1, [r3, #4]
 8005dd0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005dd4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800

08005de4 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005de4:	3201      	adds	r2, #1
{
 8005de6:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005de8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005dea:	f06f 0602 	mvn.w	r6, #2
 8005dee:	0155      	lsls	r5, r2, #5
 8005df0:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8005df2:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8005df4:	f893 c000 	ldrb.w	ip, [r3]
 8005df8:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8005dfc:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8005e00:	d80c      	bhi.n	8005e1c <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005e02:	6904      	ldr	r4, [r0, #16]
 8005e04:	07a4      	lsls	r4, r4, #30
 8005e06:	d5f5      	bpl.n	8005df4 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8005e08:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005e0c:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005e0e:	6106      	str	r6, [r0, #16]
 8005e10:	d8f0      	bhi.n	8005df4 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8005e12:	781c      	ldrb	r4, [r3, #0]
 8005e14:	2c0f      	cmp	r4, #15
 8005e16:	d8ed      	bhi.n	8005df4 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8005e1c:	bd70      	pop	{r4, r5, r6, pc}
 8005e1e:	bf00      	nop

08005e20 <R3_1_GetPhaseCurrents>:
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005e20:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 8005e24:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005e26:	e9d3 2400 	ldrd	r2, r4, [r3]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005e2a:	6a23      	ldr	r3, [r4, #32]
 8005e2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e30:	6223      	str	r3, [r4, #32]
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );

  hReg1 =  (ADCx->JDR1)*2;
 8005e32:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
  hReg2 =  (ADCx->JDR2)*2;
 8005e34:	6c12      	ldr	r2, [r2, #64]	@ 0x40

  switch ( bSector )
 8005e36:	f890 407c 	ldrb.w	r4, [r0, #124]	@ 0x7c
  hReg1 =  (ADCx->JDR1)*2;
 8005e3a:	005b      	lsls	r3, r3, #1
  hReg2 =  (ADCx->JDR2)*2;
 8005e3c:	0052      	lsls	r2, r2, #1
  hReg1 =  (ADCx->JDR1)*2;
 8005e3e:	b29b      	uxth	r3, r3
  hReg2 =  (ADCx->JDR2)*2;
 8005e40:	b292      	uxth	r2, r2
  switch ( bSector )
 8005e42:	2c05      	cmp	r4, #5
 8005e44:	f200 809b 	bhi.w	8005f7e <R3_1_GetPhaseCurrents+0x15e>
 8005e48:	e8df f004 	tbb	[pc, r4]
 8005e4c:	0323233f 	.word	0x0323233f
 8005e50:	3f03      	.short	0x3f03
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005e52:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
 8005e56:	1ae4      	subs	r4, r4, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8005e58:	4b4d      	ldr	r3, [pc, #308]	@ (8005f90 <R3_1_GetPhaseCurrents+0x170>)
 8005e5a:	429c      	cmp	r4, r3
 8005e5c:	da64      	bge.n	8005f28 <R3_1_GetPhaseCurrents+0x108>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005e5e:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
 8005e62:	eba4 0c02 	sub.w	ip, r4, r2

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8005e66:	4c4a      	ldr	r4, [pc, #296]	@ (8005f90 <R3_1_GetPhaseCurrents+0x170>)
 8005e68:	45a4      	cmp	ip, r4
    default:
    {
    }
    break;
  }
  pStator_Currents->a = -pStator_Currents->a;
 8005e6a:	b29b      	uxth	r3, r3
      if ( wAux < -INT16_MAX )
 8005e6c:	db49      	blt.n	8005f02 <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 8005e6e:	f5bc 4f00 	cmp.w	ip, #32768	@ 0x8000
 8005e72:	db77      	blt.n	8005f64 <R3_1_GetPhaseCurrents+0x144>
  pStator_Currents->a = -pStator_Currents->a;
 8005e74:	425d      	negs	r5, r3
 8005e76:	b22d      	sxth	r5, r5
 8005e78:	f647 7cff 	movw	ip, #32767	@ 0x7fff
  pStator_Currents->b = -pStator_Currents->b;
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005e7c:	4463      	add	r3, ip
  pStator_Currents->a = -pStator_Currents->a;
 8005e7e:	800d      	strh	r5, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 8005e80:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 8005e82:	f8a0 5062 	strh.w	r5, [r0, #98]	@ 0x62
  pHandle->_Super.Ib = pStator_Currents->b;
 8005e86:	f8a0 4064 	strh.w	r4, [r0, #100]	@ 0x64
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005e8a:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 8005e8e:	bc70      	pop	{r4, r5, r6}
 8005e90:	4770      	bx	lr
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005e92:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
      if ( wAux < -INT16_MAX )
 8005e96:	4e3e      	ldr	r6, [pc, #248]	@ (8005f90 <R3_1_GetPhaseCurrents+0x170>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005e98:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 8005e9a:	42b4      	cmp	r4, r6
 8005e9c:	db3e      	blt.n	8005f1c <R3_1_GetPhaseCurrents+0xfc>
      else  if ( wAux > INT16_MAX )
 8005e9e:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8005ea2:	da55      	bge.n	8005f50 <R3_1_GetPhaseCurrents+0x130>
  pStator_Currents->a = -pStator_Currents->a;
 8005ea4:	b2a3      	uxth	r3, r4
 8005ea6:	425d      	negs	r5, r3
 8005ea8:	b22d      	sxth	r5, r5
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8005eaa:	f8d0 6090 	ldr.w	r6, [r0, #144]	@ 0x90
 8005eae:	1b92      	subs	r2, r2, r6
 8005eb0:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 8005eb2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005eb6:	da3e      	bge.n	8005f36 <R3_1_GetPhaseCurrents+0x116>
      else  if ( wAux < -INT16_MAX )
 8005eb8:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8005ebc:	dd43      	ble.n	8005f46 <R3_1_GetPhaseCurrents+0x126>
  pStator_Currents->b = -pStator_Currents->b;
 8005ebe:	fa1f fc82 	uxth.w	ip, r2
 8005ec2:	f1cc 0400 	rsb	r4, ip, #0
 8005ec6:	b224      	sxth	r4, r4
 8005ec8:	e7d8      	b.n	8005e7c <R3_1_GetPhaseCurrents+0x5c>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005eca:	f8d0 508c 	ldr.w	r5, [r0, #140]	@ 0x8c
 8005ece:	1aed      	subs	r5, r5, r3
      if ( wAux < -INT16_MAX )
 8005ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8005f90 <R3_1_GetPhaseCurrents+0x170>)
 8005ed2:	429d      	cmp	r5, r3
 8005ed4:	db1c      	blt.n	8005f10 <R3_1_GetPhaseCurrents+0xf0>
      else  if ( wAux > INT16_MAX )
 8005ed6:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8005eda:	da3e      	bge.n	8005f5a <R3_1_GetPhaseCurrents+0x13a>
  pStator_Currents->b = -pStator_Currents->b;
 8005edc:	fa1f fc85 	uxth.w	ip, r5
 8005ee0:	f1cc 0400 	rsb	r4, ip, #0
 8005ee4:	b224      	sxth	r4, r4
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8005ee6:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	1b5b      	subs	r3, r3, r5
      if ( wAux > INT16_MAX )
 8005eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ef2:	da24      	bge.n	8005f3e <R3_1_GetPhaseCurrents+0x11e>
      else  if ( wAux < -INT16_MAX )
 8005ef4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8005ef8:	dd3c      	ble.n	8005f74 <R3_1_GetPhaseCurrents+0x154>
  pStator_Currents->a = -pStator_Currents->a;
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	425d      	negs	r5, r3
 8005efe:	b22d      	sxth	r5, r5
 8005f00:	e7bc      	b.n	8005e7c <R3_1_GetPhaseCurrents+0x5c>
 8005f02:	425d      	negs	r5, r3
 8005f04:	b22d      	sxth	r5, r5
 8005f06:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8005f0a:	f248 0c01 	movw	ip, #32769	@ 0x8001
 8005f0e:	e7b5      	b.n	8005e7c <R3_1_GetPhaseCurrents+0x5c>
 8005f10:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8005f14:	461d      	mov	r5, r3
 8005f16:	f248 0c01 	movw	ip, #32769	@ 0x8001
 8005f1a:	e7e4      	b.n	8005ee6 <R3_1_GetPhaseCurrents+0xc6>
 8005f1c:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8005f20:	4634      	mov	r4, r6
 8005f22:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005f26:	e7c0      	b.n	8005eaa <R3_1_GetPhaseCurrents+0x8a>
      else  if ( wAux > INT16_MAX )
 8005f28:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
        pStator_Currents->a = ( int16_t )wAux;
 8005f2c:	bfb4      	ite	lt
 8005f2e:	b223      	sxthlt	r3, r4
 8005f30:	f647 73ff 	movwge	r3, #32767	@ 0x7fff
 8005f34:	e793      	b.n	8005e5e <R3_1_GetPhaseCurrents+0x3e>
 8005f36:	4c16      	ldr	r4, [pc, #88]	@ (8005f90 <R3_1_GetPhaseCurrents+0x170>)
 8005f38:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8005f3c:	e79e      	b.n	8005e7c <R3_1_GetPhaseCurrents+0x5c>
 8005f3e:	4d14      	ldr	r5, [pc, #80]	@ (8005f90 <R3_1_GetPhaseCurrents+0x170>)
 8005f40:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005f44:	e79a      	b.n	8005e7c <R3_1_GetPhaseCurrents+0x5c>
 8005f46:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8005f4a:	f248 0c01 	movw	ip, #32769	@ 0x8001
 8005f4e:	e795      	b.n	8005e7c <R3_1_GetPhaseCurrents+0x5c>
 8005f50:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005f54:	4635      	mov	r5, r6
 8005f56:	461c      	mov	r4, r3
 8005f58:	e7a7      	b.n	8005eaa <R3_1_GetPhaseCurrents+0x8a>
 8005f5a:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8005f5e:	461c      	mov	r4, r3
 8005f60:	4665      	mov	r5, ip
 8005f62:	e7c0      	b.n	8005ee6 <R3_1_GetPhaseCurrents+0xc6>
  pStator_Currents->b = -pStator_Currents->b;
 8005f64:	fa1f fc8c 	uxth.w	ip, ip
  pStator_Currents->a = -pStator_Currents->a;
 8005f68:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 8005f6a:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 8005f6e:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 8005f70:	b224      	sxth	r4, r4
 8005f72:	e783      	b.n	8005e7c <R3_1_GetPhaseCurrents+0x5c>
 8005f74:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8005f78:	f248 0301 	movw	r3, #32769	@ 0x8001
 8005f7c:	e77e      	b.n	8005e7c <R3_1_GetPhaseCurrents+0x5c>
  pStator_Currents->a = -pStator_Currents->a;
 8005f7e:	880b      	ldrh	r3, [r1, #0]
  pStator_Currents->b = -pStator_Currents->b;
 8005f80:	f8b1 c002 	ldrh.w	ip, [r1, #2]
  pStator_Currents->a = -pStator_Currents->a;
 8005f84:	425d      	negs	r5, r3
  pStator_Currents->b = -pStator_Currents->b;
 8005f86:	f1cc 0400 	rsb	r4, ip, #0
  pStator_Currents->a = -pStator_Currents->a;
 8005f8a:	b22d      	sxth	r5, r5
  pStator_Currents->b = -pStator_Currents->b;
 8005f8c:	b224      	sxth	r4, r4
 8005f8e:	e775      	b.n	8005e7c <R3_1_GetPhaseCurrents+0x5c>
 8005f90:	ffff8001 	.word	0xffff8001

08005f94 <R3_1_HFCurrentsCalibrationAB>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f94:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 8005f98:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005f9a:	e9d3 4200 	ldrd	r4, r2, [r3]
 8005f9e:	6a13      	ldr	r3, [r2, #32]
 8005fa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fa4:	6213      	str	r3, [r2, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005fa6:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 8005faa:	2b0f      	cmp	r3, #15
 8005fac:	d80f      	bhi.n	8005fce <R3_1_HFCurrentsCalibrationAB+0x3a>
  {
    pHandle->PhaseAOffset += ADCx->JDR1;
 8005fae:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005fb0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
    pHandle->PhaseBOffset += ADCx->JDR2;
 8005fb4:	6c25      	ldr	r5, [r4, #64]	@ 0x40
    pHandle->PhaseAOffset += ADCx->JDR1;
 8005fb6:	189c      	adds	r4, r3, r2
    pHandle->PhaseBOffset += ADCx->JDR2;
 8005fb8:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
    pHandle->PolarizationCounter++;
 8005fbc:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseBOffset += ADCx->JDR2;
 8005fc0:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8005fc2:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += ADCx->JDR2;
 8005fc4:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
    pHandle->PolarizationCounter++;
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005fce:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8005fd0:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 8005fd2:	600b      	str	r3, [r1, #0]
}
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop

08005fd8 <R3_1_HFCurrentsCalibrationC>:
  *         of phase A and B in ab_t format.
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005fd8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
{
 8005fdc:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005fde:	e9d3 4200 	ldrd	r4, r2, [r3]
 8005fe2:	6a13      	ldr	r3, [r2, #32]
 8005fe4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fe8:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005fea:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
 8005fee:	2b0f      	cmp	r3, #15
 8005ff0:	d80b      	bhi.n	800600a <R3_1_HFCurrentsCalibrationC+0x32>
  {
    pHandle->PhaseCOffset += ADCx->JDR2;
 8005ff2:	6c24      	ldr	r4, [r4, #64]	@ 0x40
    pHandle->PolarizationCounter++;
 8005ff4:	f890 309f 	ldrb.w	r3, [r0, #159]	@ 0x9f
    pHandle->PhaseCOffset += ADCx->JDR2;
 8005ff8:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 8005ffc:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += ADCx->JDR2;
 8005ffe:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006000:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += ADCx->JDR2;
 8006002:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    pHandle->PolarizationCounter++;
 8006006:	f880 309f 	strb.w	r3, [r0, #159]	@ 0x9f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800600a:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800600c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8006010:	600b      	str	r3, [r1, #0]
}
 8006012:	4770      	bx	lr

08006014 <R3_1_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006014:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006018:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800601c:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800601e:	0851      	lsrs	r1, r2, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006020:	f04f 0c00 	mov.w	ip, #0
{  
 8006024:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006026:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800602a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800602c:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800602e:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006030:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006032:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006036:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006038:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	07d2      	lsls	r2, r2, #31
 800603e:	d5fc      	bpl.n	800603a <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006040:	f06f 0201 	mvn.w	r2, #1
 8006044:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006048:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800604c:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800604e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006050:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006054:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006056:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 800605a:	2a02      	cmp	r2, #2
 800605c:	d007      	beq.n	800606e <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800605e:	f06f 0201 	mvn.w	r2, #1
 8006062:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	60da      	str	r2, [r3, #12]
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 800606c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800606e:	6a1d      	ldr	r5, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006070:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 8006074:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006078:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 800607a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800607e:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8006080:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006084:	f240 5c55 	movw	ip, #1365	@ 0x555
 8006088:	ea15 0f0c 	tst.w	r5, ip
 800608c:	d004      	beq.n	8006098 <R3_1_SwitchOnPWM+0x84>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800608e:	f8ce 4018 	str.w	r4, [lr, #24]
 8006092:	61b9      	str	r1, [r7, #24]
 8006094:	61b2      	str	r2, [r6, #24]
}
 8006096:	e7e2      	b.n	800605e <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006098:	0424      	lsls	r4, r4, #16
 800609a:	0409      	lsls	r1, r1, #16
 800609c:	0412      	lsls	r2, r2, #16
 800609e:	f8ce 4018 	str.w	r4, [lr, #24]
 80060a2:	61b9      	str	r1, [r7, #24]
 80060a4:	61b2      	str	r2, [r6, #24]
}
 80060a6:	e7da      	b.n	800605e <R3_1_SwitchOnPWM+0x4a>

080060a8 <R3_1_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80060a8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->_Super.BrakeActionLock == true)
 80060ac:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80060b0:	685a      	ldr	r2, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80060b2:	68d3      	ldr	r3, [r2, #12]
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80060ba:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 80060bc:	f04f 0c00 	mov.w	ip, #0
 80060c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060c4:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 80060c8:	6453      	str	r3, [r2, #68]	@ 0x44
  if (pHandle->_Super.BrakeActionLock == true)
 80060ca:	b919      	cbnz	r1, 80060d4 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80060cc:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d009      	beq.n	80060e8 <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060d4:	f06f 0301 	mvn.w	r3, #1
 80060d8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80060da:	6913      	ldr	r3, [r2, #16]
 80060dc:	07db      	lsls	r3, r3, #31
 80060de:	d5fc      	bpl.n	80060da <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060e0:	f06f 0301 	mvn.w	r3, #1
 80060e4:	6113      	str	r3, [r2, #16]
 80060e6:	4770      	bx	lr
{
 80060e8:	b430      	push	{r4, r5}
    {
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80060ea:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80060ee:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80060f0:	f8b0 104a 	ldrh.w	r1, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80060f4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 80060f8:	0424      	lsls	r4, r4, #16
 80060fa:	61ac      	str	r4, [r5, #24]
 80060fc:	e9d0 4010 	ldrd	r4, r0, [r0, #64]	@ 0x40
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	0409      	lsls	r1, r1, #16
 8006104:	61a1      	str	r1, [r4, #24]
 8006106:	6183      	str	r3, [r0, #24]
 8006108:	f06f 0301 	mvn.w	r3, #1
 800610c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800610e:	6913      	ldr	r3, [r2, #16]
 8006110:	07d9      	lsls	r1, r3, #31
 8006112:	d5fc      	bpl.n	800610e <R3_1_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006114:	f06f 0301 	mvn.w	r3, #1
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8006118:	bc30      	pop	{r4, r5}
 800611a:	6113      	str	r3, [r2, #16]
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <R3_1_RLGetPhaseCurrents>:
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006120:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8006124:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
{
 8006128:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800612a:	e9d2 4000 	ldrd	r4, r0, [r2]
  CLEAR_BIT(TIMx->CCER, Channels);
 800612e:	6a02      	ldr	r2, [r0, #32]
 8006130:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006134:	6202      	str	r2, [r0, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 8006136:	6c20      	ldr	r0, [r4, #64]	@ 0x40
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8006138:	4a0a      	ldr	r2, [pc, #40]	@ (8006164 <R3_1_RLGetPhaseCurrents+0x44>)
  /* First value read of Phase B*/
  wAux = -wAux;
  pStator_Currents->a = ( int16_t )( wAux );
  pStator_Currents->b = ( int16_t )( wAux );

}
 800613a:	f85d 4b04 	ldr.w	r4, [sp], #4
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)((ADCx->JDR2)*2u);
 800613e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    if (wAux < INT16_MAX)
 8006142:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8006146:	4283      	cmp	r3, r0
 8006148:	bfa8      	it	ge
 800614a:	4603      	movge	r3, r0
 800614c:	4293      	cmp	r3, r2
 800614e:	bfb8      	it	lt
 8006150:	4613      	movlt	r3, r2
  wAux = -wAux;
 8006152:	425b      	negs	r3, r3
  pStator_Currents->a = ( int16_t )( wAux );
 8006154:	b21b      	sxth	r3, r3
 8006156:	2200      	movs	r2, #0
 8006158:	f363 020f 	bfi	r2, r3, #0, #16
 800615c:	f363 421f 	bfi	r2, r3, #16, #16
 8006160:	600a      	str	r2, [r1, #0]
}
 8006162:	4770      	bx	lr
 8006164:	ffff8001 	.word	0xffff8001

08006168 <R3_1_RLSwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006168:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 800616c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800616e:	2400      	movs	r4, #0
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006170:	e9d2 1300 	ldrd	r1, r3, [r2]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006174:	f880 407e 	strb.w	r4, [r0, #126]	@ 0x7e
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	06d5      	lsls	r5, r2, #27
 800617c:	d4fc      	bmi.n	8006178 <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	06d4      	lsls	r4, r2, #27
 8006182:	d5fc      	bpl.n	800617e <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8006184:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006188:	2401      	movs	r4, #1
 800618a:	3a05      	subs	r2, #5
 800618c:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800618e:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006190:	f06f 0201 	mvn.w	r2, #1
 8006194:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	07d2      	lsls	r2, r2, #31
 800619a:	d5fc      	bpl.n	8006196 <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800619c:	f06f 0201 	mvn.w	r2, #1
 80061a0:	611a      	str	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80061a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061a8:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80061aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061b0:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 80061b2:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 80061b6:	2a02      	cmp	r2, #2
 80061b8:	d119      	bne.n	80061ee <R3_1_RLSwitchOnPWM+0x86>
  {
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80061ba:	6a1e      	ldr	r6, [r3, #32]
    {
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80061bc:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80061c0:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80061c4:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80061c8:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80061cc:	6c07      	ldr	r7, [r0, #64]	@ 0x40
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80061ce:	6c40      	ldr	r0, [r0, #68]	@ 0x44
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80061d0:	f240 5c55 	movw	ip, #1365	@ 0x555
 80061d4:	ea16 0f0c 	tst.w	r6, ip
 80061d8:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80061dc:	bf05      	ittet	eq
 80061de:	042d      	lsleq	r5, r5, #16
 80061e0:	0424      	lsleq	r4, r4, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 80061e2:	f8ce 5018 	strne.w	r5, [lr, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80061e6:	f8ce 5018 	streq.w	r5, [lr, #24]
 80061ea:	61bc      	str	r4, [r7, #24]
 80061ec:	6182      	str	r2, [r0, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061ee:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80061f2:	f06f 0004 	mvn.w	r0, #4
 80061f6:	6008      	str	r0, [r1, #0]
 80061f8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	f042 0201 	orr.w	r2, r2, #1
 8006200:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8006202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006204 <R3_1_TurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006204:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8006208:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800620a:	2300      	movs	r3, #0
  pHandle->_Super.TurnOnLowSidesAction = true;
 800620c:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006210:	f06f 0101 	mvn.w	r1, #1
 8006214:	f880 c07e 	strb.w	ip, [r0, #126]	@ 0x7e
 8006218:	6111      	str	r1, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800621a:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800621c:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800621e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006220:	6913      	ldr	r3, [r2, #16]
 8006222:	07db      	lsls	r3, r3, #31
 8006224:	d5fc      	bpl.n	8006220 <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006226:	f06f 0301 	mvn.w	r3, #1
 800622a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800622c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800622e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006232:	6453      	str	r3, [r2, #68]	@ 0x44
  if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 8006234:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8006238:	2b02      	cmp	r3, #2
 800623a:	d000      	beq.n	800623e <R3_1_TurnOnLowSides+0x3a>
 800623c:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800623e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8006242:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006244:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8006246:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800624a:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800624c:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006250:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8006254:	618c      	str	r4, [r1, #24]
}
 8006256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800625a:	619a      	str	r2, [r3, #24]
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop

08006260 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006260:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 8006264:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006266:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006268:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800626c:	6351      	str	r1, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800626e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006270:	6913      	ldr	r3, [r2, #16]
 8006272:	07db      	lsls	r3, r3, #31
 8006274:	d5fc      	bpl.n	8006270 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006276:	f06f 0301 	mvn.w	r3, #1
 800627a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800627c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800627e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006282:	6453      	str	r3, [r2, #68]	@ 0x44
  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006284:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8006288:	2b02      	cmp	r3, #2
 800628a:	d000      	beq.n	800628e <R3_1_RLTurnOnLowSides+0x2e>
 800628c:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800628e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8006290:	f8b0 204a 	ldrh.w	r2, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8006294:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
{  
 8006298:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800629a:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 800629e:	618c      	str	r4, [r1, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80062a0:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80062a4:	0412      	lsls	r2, r2, #16
 80062a6:	041b      	lsls	r3, r3, #16
 80062a8:	61a2      	str	r2, [r4, #24]
}
 80062aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ae:	618b      	str	r3, [r1, #24]
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop

080062b4 <R3_1_Init>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80062b4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 80062b8:	6813      	ldr	r3, [r2, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80062ba:	6852      	ldr	r2, [r2, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80062bc:	6859      	ldr	r1, [r3, #4]
{
 80062be:	b430      	push	{r4, r5}
 80062c0:	f021 0120 	bic.w	r1, r1, #32
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80062c4:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80062c8:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80062ca:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80062cc:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80062ce:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80062d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80062d6:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80062d8:	601c      	str	r4, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80062da:	6811      	ldr	r1, [r2, #0]
    if ( TIMx == TIM1 )
 80062dc:	4c1e      	ldr	r4, [pc, #120]	@ (8006358 <R3_1_Init+0xa4>)
 80062de:	f021 0101 	bic.w	r1, r1, #1
 80062e2:	42a2      	cmp	r2, r4
 80062e4:	6011      	str	r1, [r2, #0]
 80062e6:	d031      	beq.n	800634c <R3_1_Init+0x98>
    else if ( TIMx == TIM8 )
 80062e8:	491c      	ldr	r1, [pc, #112]	@ (800635c <R3_1_Init+0xa8>)
 80062ea:	428a      	cmp	r2, r1
 80062ec:	d028      	beq.n	8006340 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80062ee:	f06f 0180 	mvn.w	r1, #128	@ 0x80
 80062f2:	6111      	str	r1, [r2, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80062f4:	68d1      	ldr	r1, [r2, #12]
 80062f6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80062fa:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 80062fc:	6a11      	ldr	r1, [r2, #32]
 80062fe:	f441 61aa 	orr.w	r1, r1, #1360	@ 0x550
 8006302:	f041 0105 	orr.w	r1, r1, #5
 8006306:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006312:	f06f 0504 	mvn.w	r5, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006316:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800631a:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800631c:	601d      	str	r5, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006324:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8006326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006328:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
    pHandle->_Super.DTTest = 0u;
 800632c:	2100      	movs	r1, #0
 800632e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006332:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
 8006336:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006338:	bc30      	pop	{r4, r5}
    pHandle->_Super.DTTest = 0u;
 800633a:	f8a0 1070 	strh.w	r1, [r0, #112]	@ 0x70
}
 800633e:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006340:	4c07      	ldr	r4, [pc, #28]	@ (8006360 <R3_1_Init+0xac>)
 8006342:	68e1      	ldr	r1, [r4, #12]
 8006344:	f041 0102 	orr.w	r1, r1, #2
 8006348:	60e1      	str	r1, [r4, #12]
}
 800634a:	e7d0      	b.n	80062ee <R3_1_Init+0x3a>
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800634c:	4c04      	ldr	r4, [pc, #16]	@ (8006360 <R3_1_Init+0xac>)
 800634e:	68e1      	ldr	r1, [r4, #12]
 8006350:	f041 0101 	orr.w	r1, r1, #1
 8006354:	60e1      	str	r1, [r4, #12]
}
 8006356:	e7ca      	b.n	80062ee <R3_1_Init+0x3a>
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400
 8006360:	e0042000 	.word	0xe0042000

08006364 <R3_1_SetOffsetCalib>:
{
 8006364:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006366:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800636a:	680b      	ldr	r3, [r1, #0]
 800636c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  pHdl->offsetCalibStatus = true;
 8006370:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006372:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
  pHdl->offsetCalibStatus = true;
 8006376:	f880 3081 	strb.w	r3, [r0, #129]	@ 0x81
}
 800637a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800637e:	4770      	bx	lr

08006380 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8006380:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 8006384:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8006388:	608b      	str	r3, [r1, #8]
 800638a:	e9c1 0200 	strd	r0, r2, [r1]
}
 800638e:	4770      	bx	lr

08006390 <R3_1_CurrentReadingCalibration>:
{
 8006390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006394:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
  if (false == pHandle->_Super.offsetCalibStatus)
 8006398:	f890 6081 	ldrb.w	r6, [r0, #129]	@ 0x81
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800639c:	685c      	ldr	r4, [r3, #4]
{
 800639e:	b082      	sub	sp, #8
 80063a0:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 80063a2:	b35e      	cbz	r6, 80063fc <R3_1_CurrentReadingCalibration+0x6c>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80063a4:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 80063a6:	f8b5 309c 	ldrh.w	r3, [r5, #156]	@ 0x9c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80063aa:	f022 0208 	bic.w	r2, r2, #8
 80063ae:	61a2      	str	r2, [r4, #24]
 80063b0:	69a2      	ldr	r2, [r4, #24]
 80063b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063b6:	61a2      	str	r2, [r4, #24]
 80063b8:	69e2      	ldr	r2, [r4, #28]
 80063ba:	f022 0208 	bic.w	r2, r2, #8
 80063be:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80063c0:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80063c2:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80063c4:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80063c6:	69a3      	ldr	r3, [r4, #24]
 80063c8:	f043 0308 	orr.w	r3, r3, #8
 80063cc:	61a3      	str	r3, [r4, #24]
 80063ce:	69a3      	ldr	r3, [r4, #24]
 80063d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80063d4:	61a3      	str	r3, [r4, #24]
 80063d6:	69e3      	ldr	r3, [r4, #28]
 80063d8:	f043 0308 	orr.w	r3, r3, #8
 80063dc:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 80063de:	6a23      	ldr	r3, [r4, #32]
 80063e0:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  pHandle->_Super.Sector = SECTOR_5;
 80063e4:	2104      	movs	r1, #4
  pHandle->_Super.BrakeActionLock = false;
 80063e6:	2200      	movs	r2, #0
 80063e8:	f043 0305 	orr.w	r3, r3, #5
 80063ec:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 80063ee:	f885 107c 	strb.w	r1, [r5, #124]	@ 0x7c
  pHandle->_Super.BrakeActionLock = false;
 80063f2:	f885 2085 	strb.w	r2, [r5, #133]	@ 0x85
}
 80063f6:	b002      	add	sp, #8
 80063f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 80063fc:	6803      	ldr	r3, [r0, #0]
 80063fe:	9300      	str	r3, [sp, #0]
    pHandle->PhaseAOffset = 0u;
 8006400:	e9c0 6622 	strd	r6, r6, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8006404:	6943      	ldr	r3, [r0, #20]
 8006406:	9301      	str	r3, [sp, #4]
    pHandle->PolarizationCounter = 0u;
 8006408:	f880 609f 	strb.w	r6, [r0, #159]	@ 0x9f
  CLEAR_BIT(TIMx->CCER, Channels);
 800640c:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseCOffset = 0u;
 800640e:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
 8006412:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8006416:	f023 0305 	bic.w	r3, r3, #5
 800641a:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800641c:	4b23      	ldr	r3, [pc, #140]	@ (80064ac <R3_1_CurrentReadingCalibration+0x11c>)
 800641e:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8006420:	4b23      	ldr	r3, [pc, #140]	@ (80064b0 <R3_1_CurrentReadingCalibration+0x120>)
 8006422:	6143      	str	r3, [r0, #20]
    pHandle->CalibSector = SECTOR_5;
 8006424:	2304      	movs	r3, #4
 8006426:	f880 309e 	strb.w	r3, [r0, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_5;
 800642a:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 800642e:	f7ff fdf1 	bl	8006014 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 8006432:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 8006436:	f105 0756 	add.w	r7, r5, #86	@ 0x56
 800643a:	f105 089f 	add.w	r8, r5, #159	@ 0x9f
 800643e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8006442:	4639      	mov	r1, r7
 8006444:	4643      	mov	r3, r8
 8006446:	4620      	mov	r0, r4
 8006448:	f7ff fccc 	bl	8005de4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 800644c:	4628      	mov	r0, r5
 800644e:	f7ff fe2b 	bl	80060a8 <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8006452:	4b18      	ldr	r3, [pc, #96]	@ (80064b4 <R3_1_CurrentReadingCalibration+0x124>)
 8006454:	602b      	str	r3, [r5, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006456:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 8006458:	f885 609f 	strb.w	r6, [r5, #159]	@ 0x9f
    pHandle->CalibSector = SECTOR_1;
 800645c:	f885 609e 	strb.w	r6, [r5, #158]	@ 0x9e
    pHandle->_Super.Sector = SECTOR_1;
 8006460:	f885 607c 	strb.w	r6, [r5, #124]	@ 0x7c
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006464:	f7ff fdd6 	bl	8006014 <R3_1_SwitchOnPWM>
                            pHandle->pParams_str->RepetitionCounter,
 8006468:	f8d5 20a0 	ldr.w	r2, [r5, #160]	@ 0xa0
    waitForPolarizationEnd( TIMx,
 800646c:	4643      	mov	r3, r8
 800646e:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8006472:	4639      	mov	r1, r7
 8006474:	4620      	mov	r0, r4
 8006476:	f7ff fcb5 	bl	8005de4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 800647a:	4628      	mov	r0, r5
 800647c:	f7ff fe14 	bl	80060a8 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 8006480:	e9d5 1222 	ldrd	r1, r2, [r5, #136]	@ 0x88
    pHandle->PhaseCOffset >>= 3;
 8006484:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
    pHandle->PhaseBOffset >>= 3;
 8006488:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseAOffset >>= 3;
 800648a:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 800648c:	e9c5 1222 	strd	r1, r2, [r5, #136]	@ 0x88
    if (0U == pHandle->_Super.SWerror)
 8006490:	f8b5 2056 	ldrh.w	r2, [r5, #86]	@ 0x56
    pHandle->PhaseCOffset >>= 3;
 8006494:	08db      	lsrs	r3, r3, #3
 8006496:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
    if (0U == pHandle->_Super.SWerror)
 800649a:	b912      	cbnz	r2, 80064a2 <R3_1_CurrentReadingCalibration+0x112>
      pHandle->_Super.offsetCalibStatus = true;
 800649c:	2301      	movs	r3, #1
 800649e:	f885 3081 	strb.w	r3, [r5, #129]	@ 0x81
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80064a2:	9a00      	ldr	r2, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80064a4:	9b01      	ldr	r3, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80064a6:	602a      	str	r2, [r5, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80064a8:	616b      	str	r3, [r5, #20]
 80064aa:	e77b      	b.n	80063a4 <R3_1_CurrentReadingCalibration+0x14>
 80064ac:	08005f95 	.word	0x08005f95
 80064b0:	080064f1 	.word	0x080064f1
 80064b4:	08005fd9 	.word	0x08005fd9

080064b8 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80064b8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 80064bc:	4603      	mov	r3, r0
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80064be:	6852      	ldr	r2, [r2, #4]
{
 80064c0:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 80064c2:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 80064c6:	f8b0 0052 	ldrh.w	r0, [r0, #82]	@ 0x52
  WRITE_REG(TIMx->CCR1, CompareValue);
 80064ca:	6354      	str	r4, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80064cc:	6390      	str	r0, [r2, #56]	@ 0x38
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 80064ce:	f8b3 4054 	ldrh.w	r4, [r3, #84]	@ 0x54
  if ( pHandle->_Super.SWerror == 1u )
 80064d2:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  WRITE_REG(TIMx->CCR3, CompareValue);
 80064d6:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80064d8:	6411      	str	r1, [r2, #64]	@ 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80064da:	6a12      	ldr	r2, [r2, #32]
}
 80064dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 80064e0:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 80064e2:	bf0a      	itet	eq
 80064e4:	2200      	moveq	r2, #0
 80064e6:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 80064ea:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 80064ee:	4770      	bx	lr

080064f0 <R3_1_SetADCSampPointCalibration>:
{
 80064f0:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 80064f2:	f8b0 109c 	ldrh.w	r1, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->CalibSector;
 80064f6:	f890 209e 	ldrb.w	r2, [r0, #158]	@ 0x9e
 80064fa:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80064fe:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006502:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006504:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006508:	b289      	uxth	r1, r1
 800650a:	f7ff ffd5 	bl	80064b8 <R3_1_WriteTIMRegisters>
}
 800650e:	bd10      	pop	{r4, pc}

08006510 <R3_1_SetADCSampPointSectX>:
{
 8006510:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8006512:	f8b0 2058 	ldrh.w	r2, [r0, #88]	@ 0x58
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006516:	f8b0 e09c 	ldrh.w	lr, [r0, #156]	@ 0x9c
 800651a:	f8d0 40a0 	ldr.w	r4, [r0, #160]	@ 0xa0
  register uint16_t midDuty = pHdl->midDuty;
 800651e:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006522:	8c21      	ldrh	r1, [r4, #32]
 8006524:	ebae 0302 	sub.w	r3, lr, r2
 8006528:	b29b      	uxth	r3, r3
 800652a:	428b      	cmp	r3, r1
 800652c:	d908      	bls.n	8006540 <R3_1_SetADCSampPointSectX+0x30>
    pHandle->_Super.Sector = SECTOR_5;
 800652e:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006530:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8006534:	f880 307c 	strb.w	r3, [r0, #124]	@ 0x7c
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006538:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800653a:	f7ff ffbd 	bl	80064b8 <R3_1_WriteTIMRegisters>
}
 800653e:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8006540:	eba2 0c0c 	sub.w	ip, r2, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8006544:	fa1f fc8c 	uxth.w	ip, ip
 8006548:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
 800654c:	d905      	bls.n	800655a <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 800654e:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8006550:	1ad2      	subs	r2, r2, r3
 8006552:	b291      	uxth	r1, r2
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006554:	f7ff ffb0 	bl	80064b8 <R3_1_WriteTIMRegisters>
}
 8006558:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 800655a:	4411      	add	r1, r2
 800655c:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800655e:	458e      	cmp	lr, r1
 8006560:	d8eb      	bhi.n	800653a <R3_1_SetADCSampPointSectX+0x2a>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006562:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006564:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006568:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800656c:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006570:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006572:	f7ff ffa1 	bl	80064b8 <R3_1_WriteTIMRegisters>
}
 8006576:	bd10      	pop	{r4, pc}

08006578 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006578:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
{
 800657c:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800657e:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 8006582:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8006584:	6890      	ldr	r0, [r2, #8]
 8006586:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 800658a:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 800658c:	f893 007c 	ldrb.w	r0, [r3, #124]	@ 0x7c
 8006590:	3002      	adds	r0, #2
 8006592:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006596:	6391      	str	r1, [r2, #56]	@ 0x38
  SET_BIT(TIMx->CCER, Channels);
 8006598:	6a21      	ldr	r1, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800659a:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800659e:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 80065a2:	6221      	str	r1, [r4, #32]
 80065a4:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80065a6:	f44f 1480 	mov.w	r4, #1048576	@ 0x100000
 80065aa:	4301      	orrs	r1, r0
 80065ac:	6091      	str	r1, [r2, #8]
}
 80065ae:	f103 007a 	add.w	r0, r3, #122	@ 0x7a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80065b2:	f8c3 4098 	str.w	r4, [r3, #152]	@ 0x98
}
 80065b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 80065bc:	f890 1080 	ldrb.w	r1, [r0, #128]	@ 0x80
{
 80065c0:	b410      	push	{r4}
  if (pHandle->_Super.RLDetectionMode == false)
 80065c2:	2900      	cmp	r1, #0
 80065c4:	d135      	bne.n	8006632 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80065c6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 80065ca:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80065cc:	699a      	ldr	r2, [r3, #24]
 80065ce:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80065d2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80065d6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80065d8:	6a1a      	ldr	r2, [r3, #32]
 80065da:	f042 0201 	orr.w	r2, r2, #1
 80065de:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80065e0:	6a1a      	ldr	r2, [r3, #32]
 80065e2:	f022 0204 	bic.w	r2, r2, #4
 80065e6:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065e8:	6359      	str	r1, [r3, #52]	@ 0x34
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 80065ea:	f890 207d 	ldrb.w	r2, [r0, #125]	@ 0x7d
 80065ee:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80065f0:	f103 0418 	add.w	r4, r3, #24
 80065f4:	d02b      	beq.n	800664e <R3_1_RLDetectionModeEnable+0x92>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 80065f6:	2a02      	cmp	r2, #2
 80065f8:	d10d      	bne.n	8006616 <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80065fa:	699a      	ldr	r2, [r3, #24]
 80065fc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006600:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006604:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006606:	6a1a      	ldr	r2, [r3, #32]
 8006608:	f042 0210 	orr.w	r2, r2, #16
 800660c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800660e:	6a1a      	ldr	r2, [r3, #32]
 8006610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006614:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006616:	6862      	ldr	r2, [r4, #4]
 8006618:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800661c:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8006620:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006622:	6a1a      	ldr	r2, [r3, #32]
 8006624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006628:	621a      	str	r2, [r3, #32]
 800662a:	6a1a      	ldr	r2, [r3, #32]
 800662c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006630:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006632:	4b0e      	ldr	r3, [pc, #56]	@ (800666c <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8006634:	490e      	ldr	r1, [pc, #56]	@ (8006670 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006636:	4a0f      	ldr	r2, [pc, #60]	@ (8006674 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006638:	4c0f      	ldr	r4, [pc, #60]	@ (8006678 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800663a:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800663c:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800663e:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006640:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006644:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8006648:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 800664c:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8006654:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006658:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800665a:	6a1a      	ldr	r2, [r3, #32]
 800665c:	f022 0210 	bic.w	r2, r2, #16
 8006660:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006662:	6a1a      	ldr	r2, [r3, #32]
 8006664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	e7d4      	b.n	8006616 <R3_1_RLDetectionModeEnable+0x5a>
 800666c:	08006261 	.word	0x08006261
 8006670:	08006169 	.word	0x08006169
 8006674:	080060a9 	.word	0x080060a9
 8006678:	08006121 	.word	0x08006121

0800667c <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 800667c:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8006680:	2b00      	cmp	r3, #0
 8006682:	d04a      	beq.n	800671a <R3_1_RLDetectionModeDisable+0x9e>
{
 8006684:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006686:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 800668a:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	06d4      	lsls	r4, r2, #27
 8006690:	d5fc      	bpl.n	800668c <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	06d2      	lsls	r2, r2, #27
 8006696:	d4fc      	bmi.n	8006692 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8006698:	f891 202a 	ldrb.w	r2, [r1, #42]	@ 0x2a
 800669c:	631a      	str	r2, [r3, #48]	@ 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800669e:	699a      	ldr	r2, [r3, #24]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 80066a0:	f8b0 c09c 	ldrh.w	ip, [r0, #156]	@ 0x9c
 80066a4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80066a8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80066ac:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80066ae:	6a1c      	ldr	r4, [r3, #32]
 80066b0:	f044 0401 	orr.w	r4, r4, #1
 80066b4:	621c      	str	r4, [r3, #32]
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 80066b6:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 80066ba:	2c01      	cmp	r4, #1
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 80066bc:	ea4f 025c 	mov.w	r2, ip, lsr #1
    if ((pHandle->_Super.LowSideOutputs)== LS_PWM_TIMER)
 80066c0:	d02c      	beq.n	800671c <R3_1_RLDetectionModeDisable+0xa0>
    else if ((pHandle->_Super.LowSideOutputs)== ES_GPIO)
 80066c2:	2c02      	cmp	r4, #2
 80066c4:	d04d      	beq.n	8006762 <R3_1_RLDetectionModeDisable+0xe6>
  WRITE_REG(TIMx->CCR1, CompareValue);
 80066c6:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80066c8:	699c      	ldr	r4, [r3, #24]
 80066ca:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 80066ce:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 80066d2:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80066d4:	6a1c      	ldr	r4, [r3, #32]
 80066d6:	f044 0410 	orr.w	r4, r4, #16
 80066da:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80066dc:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80066de:	69dc      	ldr	r4, [r3, #28]
 80066e0:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 80066e4:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 80066e8:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80066ea:	6a1c      	ldr	r4, [r3, #32]
 80066ec:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 80066f0:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 80066f2:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80066f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 80066f6:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80066f8:	4a2b      	ldr	r2, [pc, #172]	@ (80067a8 <R3_1_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80066fa:	4c2c      	ldr	r4, [pc, #176]	@ (80067ac <R3_1_RLDetectionModeDisable+0x130>)
 80066fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006700:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006702:	492b      	ldr	r1, [pc, #172]	@ (80067b0 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006704:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006706:	4a2b      	ldr	r2, [pc, #172]	@ (80067b4 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006708:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800670a:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800670c:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8006710:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8006714:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8006718:	4770      	bx	lr
 800671a:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800671c:	6a1c      	ldr	r4, [r3, #32]
 800671e:	f044 0404 	orr.w	r4, r4, #4
 8006722:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006724:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006726:	699c      	ldr	r4, [r3, #24]
 8006728:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 800672c:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006730:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006732:	6a1c      	ldr	r4, [r3, #32]
 8006734:	f044 0410 	orr.w	r4, r4, #16
 8006738:	621c      	str	r4, [r3, #32]
 800673a:	6a1c      	ldr	r4, [r3, #32]
 800673c:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8006740:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006742:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006744:	69dc      	ldr	r4, [r3, #28]
 8006746:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 800674a:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 800674e:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006750:	6a1c      	ldr	r4, [r3, #32]
 8006752:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8006756:	621c      	str	r4, [r3, #32]
 8006758:	6a1c      	ldr	r4, [r3, #32]
 800675a:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
 800675e:	621c      	str	r4, [r3, #32]
}
 8006760:	e7c7      	b.n	80066f2 <R3_1_RLDetectionModeDisable+0x76>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006762:	6a1c      	ldr	r4, [r3, #32]
 8006764:	f024 0404 	bic.w	r4, r4, #4
 8006768:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800676a:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800676c:	699c      	ldr	r4, [r3, #24]
 800676e:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
 8006772:	f444 44c0 	orr.w	r4, r4, #24576	@ 0x6000
 8006776:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006778:	6a1c      	ldr	r4, [r3, #32]
 800677a:	f044 0410 	orr.w	r4, r4, #16
 800677e:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006780:	6a1c      	ldr	r4, [r3, #32]
 8006782:	f024 0440 	bic.w	r4, r4, #64	@ 0x40
 8006786:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006788:	639a      	str	r2, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800678a:	69dc      	ldr	r4, [r3, #28]
 800678c:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
 8006790:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 8006794:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006796:	6a1c      	ldr	r4, [r3, #32]
 8006798:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 800679c:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800679e:	6a1c      	ldr	r4, [r3, #32]
 80067a0:	f424 6480 	bic.w	r4, r4, #1024	@ 0x400
 80067a4:	621c      	str	r4, [r3, #32]
}
 80067a6:	e7a4      	b.n	80066f2 <R3_1_RLDetectionModeDisable+0x76>
 80067a8:	08005e21 	.word	0x08005e21
 80067ac:	08006205 	.word	0x08006205
 80067b0:	08006015 	.word	0x08006015
 80067b4:	080060a9 	.word	0x080060a9

080067b8 <R3_1_RLDetectionModeSetDuty>:
{
 80067b8:	4603      	mov	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80067ba:	f8d0 00a0 	ldr.w	r0, [r0, #160]	@ 0xa0
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 80067be:	f8b3 209c 	ldrh.w	r2, [r3, #156]	@ 0x9c
{
 80067c2:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 80067c4:	fb02 f101 	mul.w	r1, r2, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80067c8:	6844      	ldr	r4, [r0, #4]
  if (pHandle->_Super.SWerror == 1u)
 80067ca:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 80067ce:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 80067d0:	2203      	movs	r2, #3
 80067d2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 80067d6:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 80067da:	6361      	str	r1, [r4, #52]	@ 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80067dc:	6a22      	ldr	r2, [r4, #32]
}
 80067de:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (pHandle->_Super.SWerror == 1u)
 80067e2:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0u;
 80067e4:	bf0a      	itet	eq
 80067e6:	2200      	moveq	r2, #0
 80067e8:	f3c2 3000 	ubfxne	r0, r2, #12, #1
 80067ec:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <R3_1_RLTurnOnLowSidesAndStart>:
 * @param  pHdl: Handler of the current instance of the PWM component.
 */
void R3_1_RLTurnOnLowSidesAndStart( PWMC_Handle_t * pHdl )
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80067f4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
{
 80067f8:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80067fa:	e9d2 4300 	ldrd	r4, r3, [r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067fe:	f06f 0101 	mvn.w	r1, #1
 8006802:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006804:	691a      	ldr	r2, [r3, #16]
 8006806:	07d1      	lsls	r1, r2, #31
 8006808:	d5fc      	bpl.n	8006804 <R3_1_RLTurnOnLowSidesAndStart+0x10>

  LL_TIM_OC_SetCompareCH1 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH2 ( TIMx, 0x0u );
  LL_TIM_OC_SetCompareCH3 ( TIMx, 0x0u );

  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod - 5u));
 800680a:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800680e:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006810:	f06f 0501 	mvn.w	r5, #1
 8006814:	3a05      	subs	r2, #5
 8006816:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006818:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800681a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800681c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800681e:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	07d2      	lsls	r2, r2, #31
 8006824:	d5fc      	bpl.n	8006820 <R3_1_RLTurnOnLowSidesAndStart+0x2c>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
  {}

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8006826:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006828:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800682e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006834:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->_Super.LowSideOutputs ) == ES_GPIO )
 8006836:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 800683a:	2b02      	cmp	r3, #2
 800683c:	d10b      	bne.n	8006856 <R3_1_RLTurnOnLowSidesAndStart+0x62>
  {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800683e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin );
 8006842:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 8006846:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006848:	6195      	str	r5, [r2, #24]
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin );
 800684a:	f8b0 504a 	ldrh.w	r5, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin( pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin );
 800684e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8006852:	618d      	str	r5, [r1, #24]
 8006854:	619a      	str	r2, [r3, #24]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006856:	68a3      	ldr	r3, [r4, #8]
 8006858:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800685c:	60a3      	str	r3, [r4, #8]

//  ADCx->JSQR = pHandle->wADC_JSQR_phAB;
  LL_ADC_INJ_StartConversionExtTrig(ADCx,LL_ADC_INJ_TRIG_EXT_RISING);

  return;
}
 800685e:	bc30      	pop	{r4, r5}
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop

08006864 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006864:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8006868:	8a42      	ldrh	r2, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800686a:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800686c:	4494      	add	ip, r2
 800686e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8006872:	b430      	push	{r4, r5}
 8006874:	2500      	movs	r5, #0
 8006876:	f36c 050f 	bfi	r5, ip, #0, #16
 800687a:	f36c 451f 	bfi	r5, ip, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800687e:	b14b      	cbz	r3, 8006894 <RVBS_Clear+0x30>
    {
      pHandle->aBuffer[index] = aux;
 8006880:	6944      	ldr	r4, [r0, #20]
 8006882:	2300      	movs	r3, #0
 8006884:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006886:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8006888:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800688c:	8941      	ldrh	r1, [r0, #10]
 800688e:	b29a      	uxth	r2, r3
 8006890:	4291      	cmp	r1, r2
 8006892:	d8f7      	bhi.n	8006884 <RVBS_Clear+0x20>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8006894:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8006896:	6045      	str	r5, [r0, #4]
    pHandle->index = 0U;
 8006898:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800689a:	bc30      	pop	{r4, r5}
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop

080068a0 <RVBS_Init>:
{
 80068a0:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 80068a2:	f7ff ffdf 	bl	8006864 <RVBS_Clear>
}
 80068a6:	bd08      	pop	{r3, pc}

080068a8 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80068a8:	8982      	ldrh	r2, [r0, #12]
 80068aa:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80068ac:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80068ae:	428a      	cmp	r2, r1
 80068b0:	d010      	beq.n	80068d4 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80068b2:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 80068b6:	459c      	cmp	ip, r3
 80068b8:	d80a      	bhi.n	80068d0 <RVBS_CheckFaultState+0x28>
{
 80068ba:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 80068bc:	7c04      	ldrb	r4, [r0, #16]
 80068be:	b994      	cbnz	r4, 80068e6 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 80068c0:	4299      	cmp	r1, r3
 80068c2:	d914      	bls.n	80068ee <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 80068c4:	2301      	movs	r3, #1
 80068c6:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 80068c8:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 80068ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ce:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 80068d0:	2004      	movs	r0, #4
 80068d2:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d30c      	bcc.n	80068f2 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80068d8:	8a40      	ldrh	r0, [r0, #18]
 80068da:	4298      	cmp	r0, r3
 80068dc:	bf94      	ite	ls
 80068de:	2000      	movls	r0, #0
 80068e0:	2001      	movhi	r0, #1
 80068e2:	0080      	lsls	r0, r0, #2
 80068e4:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d2ee      	bcs.n	80068c8 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 80068ea:	2300      	movs	r3, #0
 80068ec:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 80068ee:	2002      	movs	r0, #2
 80068f0:	e7eb      	b.n	80068ca <RVBS_CheckFaultState+0x22>
 80068f2:	2002      	movs	r0, #2
}
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop

080068f8 <RVBS_CalcAvVbus>:
{
 80068f8:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 80068fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80068fe:	4299      	cmp	r1, r3
{
 8006900:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8006902:	d021      	beq.n	8006948 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 8006904:	6943      	ldr	r3, [r0, #20]
 8006906:	7e45      	ldrb	r5, [r0, #25]
 8006908:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800690c:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 8006910:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 8006914:	d00d      	beq.n	8006932 <RVBS_CalcAvVbus+0x3a>
 8006916:	3a01      	subs	r2, #1
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800691e:	3b02      	subs	r3, #2
      wtemp = 0u;
 8006920:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8006922:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006926:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 8006928:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800692a:	d1fa      	bne.n	8006922 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800692c:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006930:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8006932:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006936:	4575      	cmp	r5, lr
        pHandle->index++;
 8006938:	bf34      	ite	cc
 800693a:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 800693c:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800693e:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8006940:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 8006942:	bf34      	ite	cc
 8006944:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 8006946:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006948:	4620      	mov	r0, r4
 800694a:	f7ff ffad 	bl	80068a8 <RVBS_CheckFaultState>
 800694e:	8120      	strh	r0, [r4, #8]
}
 8006950:	bd38      	pop	{r3, r4, r5, pc}
 8006952:	bf00      	nop

08006954 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 8006954:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8006956:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8006958:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800695c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8006960:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8006962:	4770      	bx	lr

08006964 <SPD_GetElAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8006964:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop

0800696c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800696c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop

08006974 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8006974:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop

0800697c <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800697c:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8006980:	4603      	mov	r3, r0
 8006982:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 8006984:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 8006988:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800698c:	bfb8      	it	lt
 800698e:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006990:	f8b3 e016 	ldrh.w	lr, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006994:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006996:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006998:	8a9c      	ldrh	r4, [r3, #20]
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800699a:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
      hAux = -(*pMecSpeedUnit);
 800699e:	bfb8      	it	lt
 80069a0:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80069a2:	458e      	cmp	lr, r1
 80069a4:	d816      	bhi.n	80069d4 <SPD_IsMecSpeedReliable+0x58>
    {
      hAux = -(pHandle->hMecAccelUnitP);
 80069a6:	fa1f fe8c 	uxth.w	lr, ip
    if (pHandle->hMecAccelUnitP < 0)
 80069aa:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(pHandle->hMecAccelUnitP);
 80069ae:	bfb8      	it	lt
 80069b0:	f1ce 0e00 	rsblt	lr, lr, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80069b4:	f8b3 c018 	ldrh.w	ip, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 80069b8:	bfb8      	it	lt
 80069ba:	fa1f fe8e 	uxthlt.w	lr, lr
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80069be:	45f4      	cmp	ip, lr
 80069c0:	d308      	bcc.n	80069d4 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80069c2:	428c      	cmp	r4, r1
 80069c4:	d306      	bcc.n	80069d4 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80069c6:	4290      	cmp	r0, r2
 80069c8:	d809      	bhi.n	80069de <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80069ca:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80069cc:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80069ce:	bf18      	it	ne
 80069d0:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 80069d2:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80069d4:	4290      	cmp	r0, r2
 80069d6:	d9f8      	bls.n	80069ca <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 80069d8:	3201      	adds	r2, #1
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	e7f5      	b.n	80069ca <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 80069de:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80069e0:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 80069e2:	2001      	movs	r0, #1
}
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	bf00      	nop

080069e8 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 80069e8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80069ec:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 80069f0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80069f4:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 80069f8:	b200      	sxth	r0, r0
 80069fa:	4770      	bx	lr

080069fc <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80069fc:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 8006a00:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006a02:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->SPD = SPD_Handle;
 8006a06:	6142      	str	r2, [r0, #20]
{
 8006a08:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8006a0a:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8006a0e:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8006a10:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8006a12:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006a16:	0409      	lsls	r1, r1, #16
 8006a18:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8006a1c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8006a22:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006a24:	6183      	str	r3, [r0, #24]
}
 8006a26:	4770      	bx	lr

08006a28 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8006a28:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006a2a:	4770      	bx	lr

08006a2c <STC_GetSpeedSensor>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8006a2c:	6940      	ldr	r0, [r0, #20]
 8006a2e:	4770      	bx	lr

08006a30 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006a30:	7803      	ldrb	r3, [r0, #0]
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d000      	beq.n	8006a38 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006a36:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8006a38:	6900      	ldr	r0, [r0, #16]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	f7ff b8f4 	b.w	8005c28 <PID_SetIntegralTerm>

08006a40 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8006a40:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop

08006a48 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8006a48:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop

08006a50 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8006a50:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8006a52:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8006a54:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006a56:	4770      	bx	lr

08006a58 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8006a58:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006a5a:	7803      	ldrb	r3, [r0, #0]
 8006a5c:	2b04      	cmp	r3, #4
{
 8006a5e:	4604      	mov	r4, r0
 8006a60:	460d      	mov	r5, r1
 8006a62:	4616      	mov	r6, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006a64:	d01d      	beq.n	8006aa2 <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8006a66:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8006a68:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8006a6c:	4299      	cmp	r1, r3
 8006a6e:	dd01      	ble.n	8006a74 <STC_ExecRamp+0x1c>
 8006a70:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8006a74:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	dcf9      	bgt.n	8006a70 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8006a7c:	8c23      	ldrh	r3, [r4, #32]
 8006a7e:	4299      	cmp	r1, r3
 8006a80:	da03      	bge.n	8006a8a <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8006a82:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8006a86:	428b      	cmp	r3, r1
 8006a88:	dbf2      	blt.n	8006a70 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8006a8a:	b9a6      	cbnz	r6, 8006ab6 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8006a8c:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006a8e:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8006a90:	2b03      	cmp	r3, #3
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006a92:	bf0c      	ite	eq
 8006a94:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8006a96:	60a5      	strne	r5, [r4, #8]
        pHandle->IncDecAmount = 0;
 8006a98:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
 8006a9a:	61a0      	str	r0, [r4, #24]
        pHandle->RampRemainingStep++;
 8006a9c:	60e6      	str	r6, [r4, #12]
        pHandle->IncDecAmount = wAux1;
 8006a9e:	2001      	movs	r0, #1
}
 8006aa0:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8006aa2:	f7ff ffd1 	bl	8006a48 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8006aa6:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	dbe1      	blt.n	8006a70 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8006aac:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8006ab0:	42ab      	cmp	r3, r5
 8006ab2:	dcdd      	bgt.n	8006a70 <STC_ExecRamp+0x18>
 8006ab4:	e7e9      	b.n	8006a8a <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8006ab6:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8006ab8:	4a06      	ldr	r2, [pc, #24]	@ (8006ad4 <STC_ExecRamp+0x7c>)
        pHandle->TargetFinal = hTargetFinal;
 8006aba:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8006abc:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8006ac0:	fba2 2303 	umull	r2, r3, r2, r3
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006ac4:	1a28      	subs	r0, r5, r0
        wAux /= 1000U;
 8006ac6:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8006ac8:	1c5e      	adds	r6, r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006aca:	0400      	lsls	r0, r0, #16
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8006acc:	fb90 f0f6 	sdiv	r0, r0, r6
        pHandle->IncDecAmount = wAux1;
 8006ad0:	e7e3      	b.n	8006a9a <STC_ExecRamp+0x42>
 8006ad2:	bf00      	nop
 8006ad4:	10624dd3 	.word	0x10624dd3

08006ad8 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006adc:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006ade:	4770      	bx	lr

08006ae0 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8006ae0:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006ae2:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8006ae4:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006ae6:	2a04      	cmp	r2, #4
{
 8006ae8:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8006aea:	d012      	beq.n	8006b12 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 8006aec:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8006aee:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8006af0:	d908      	bls.n	8006b04 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8006af2:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8006af4:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8006af6:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8006af8:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8006afa:	2a03      	cmp	r2, #3
 8006afc:	d011      	beq.n	8006b22 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8006afe:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8006b00:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8006b04:	d1f9      	bne.n	8006afa <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006b06:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8006b0a:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006b0c:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8006b0e:	60c3      	str	r3, [r0, #12]
 8006b10:	e7f3      	b.n	8006afa <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 8006b12:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8006b14:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8006b16:	d911      	bls.n	8006b3c <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8006b18:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8006b1a:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8006b1c:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 8006b1e:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006b20:	e7ed      	b.n	8006afe <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8006b22:	6960      	ldr	r0, [r4, #20]
 8006b24:	f7ff ff22 	bl	800696c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8006b28:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8006b2c:	b209      	sxth	r1, r1
 8006b2e:	6920      	ldr	r0, [r4, #16]
 8006b30:	f7ff f8ac 	bl	8005c8c <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8006b34:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8006b36:	0405      	lsls	r5, r0, #16
 8006b38:	60a5      	str	r5, [r4, #8]
}
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8006b3c:	d1df      	bne.n	8006afe <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006b3e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8006b42:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006b44:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8006b46:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006b48:	e7d9      	b.n	8006afe <STC_CalcTorqueReference+0x1e>
 8006b4a:	bf00      	nop

08006b4c <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006b4c:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8006b50:	2200      	movs	r2, #0
 8006b52:	b299      	uxth	r1, r3
 8006b54:	f361 020f 	bfi	r2, r1, #0, #16
 8006b58:	0c1b      	lsrs	r3, r3, #16
 8006b5a:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006b5e:	b082      	sub	sp, #8
}
 8006b60:	4610      	mov	r0, r2
 8006b62:	b002      	add	sp, #8
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop

08006b68 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8006b6c:	6940      	ldr	r0, [r0, #20]
 8006b6e:	f7ff fefd 	bl	800696c <SPD_GetAvrgMecSpeedUnit>
 8006b72:	0400      	lsls	r0, r0, #16
 8006b74:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006b76:	bd10      	pop	{r4, pc}

08006b78 <STO_CR_CalcElAngle>:
  *         pInputs pointer to the observer inputs structure.
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_CR_CalcElAngle(STO_CR_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	b085      	sub	sp, #20
    int16_t hRotor_Acceleration;
    int16_t hRotor_Angle;
    int16_t hValfa;
    int16_t hVbeta;

    int16_t hPrev_Rotor_Angle = pHandle->_Super.hElAngle;
 8006b7e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8006b82:	9200      	str	r2, [sp, #0]
    int16_t hPrev_Rotor_Speed = pHandle->_Super.hElSpeedDpp;
    int16_t hMax_Instant_Accel = pHandle->MaxInstantElAcceleration;
 8006b84:	f9b0 2176 	ldrsh.w	r2, [r0, #374]	@ 0x176
 8006b88:	9201      	str	r2, [sp, #4]

    if (pHandle->wBemf_alfa_est > ((int32_t)pHandle->hF2 * INT16_MAX))
 8006b8a:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
    int16_t hPrev_Rotor_Speed = pHandle->_Super.hElSpeedDpp;
 8006b8e:	f9b0 b00e 	ldrsh.w	fp, [r0, #14]
{
 8006b92:	4603      	mov	r3, r0
    if (pHandle->wBemf_alfa_est > ((int32_t)pHandle->hF2 * INT16_MAX))
 8006b94:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8006b96:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 8006b9a:	4290      	cmp	r0, r2
 8006b9c:	f340 81ab 	ble.w	8006ef6 <STO_CR_CalcElAngle+0x37e>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * (int32_t)(pHandle->hF2);
 8006ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ba2:	4610      	mov	r0, r2
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_CORDIC
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8006ba4:	f8b3 e17e 	ldrh.w	lr, [r3, #382]	@ 0x17e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * (int32_t)(pHandle->hF2)))
 8006ba8:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8006baa:	fa40 f70e 	asr.w	r7, r0, lr
    if (pHandle->wBemf_beta_est > (INT16_MAX * (int32_t)(pHandle->hF2)))
 8006bae:	42aa      	cmp	r2, r5
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8006bb0:	b23f      	sxth	r7, r7
    if (pHandle->wBemf_beta_est > (INT16_MAX * (int32_t)(pHandle->hF2)))
 8006bb2:	f2c0 817c 	blt.w	8006eae <STO_CR_CalcElAngle+0x336>
    {
      pHandle->wBemf_beta_est = INT16_MAX * (int32_t)(pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * (int32_t)(pHandle->hF2)))
 8006bb6:	4252      	negs	r2, r2
 8006bb8:	4295      	cmp	r5, r2
 8006bba:	f340 8178 	ble.w	8006eae <STO_CR_CalcElAngle+0x336>
      hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
      hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * (int32_t)(pHandle->hF1)))
 8006bbe:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 8006bc2:	f8d3 9034 	ldr.w	r9, [r3, #52]	@ 0x34
 8006bc6:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
      hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8006bca:	fa45 fe0e 	asr.w	lr, r5, lr
    if (pHandle->Ialfa_est > (INT16_MAX * (int32_t)(pHandle->hF1)))
 8006bce:	4591      	cmp	r9, r2
      hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8006bd0:	fa0f fe8e 	sxth.w	lr, lr
    if (pHandle->Ialfa_est > (INT16_MAX * (int32_t)(pHandle->hF1)))
 8006bd4:	f340 8195 	ble.w	8006f02 <STO_CR_CalcElAngle+0x38a>
    {
      pHandle->Ialfa_est = INT16_MAX * (int32_t)(pHandle->hF1);
 8006bd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006bda:	4691      	mov	r9, r2
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * (int32_t)(pHandle->hF1)))
 8006bdc:	f8d3 8038 	ldr.w	r8, [r3, #56]	@ 0x38
 8006be0:	4542      	cmp	r2, r8
 8006be2:	f2c0 8161 	blt.w	8006ea8 <STO_CR_CalcElAngle+0x330>
    {
      pHandle->Ibeta_est = INT16_MAX * (int32_t)(pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * (int32_t)(pHandle->hF1)))
 8006be6:	4252      	negs	r2, r2
 8006be8:	4590      	cmp	r8, r2
 8006bea:	f340 815d 	ble.w	8006ea8 <STO_CR_CalcElAngle+0x330>
      /* Nothing to do */
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_CORDIC
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8006bee:	f8b3 c17c 	ldrh.w	ip, [r3, #380]	@ 0x17c
#else
    hIalfa_err = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006bf2:	888c      	ldrh	r4, [r1, #4]
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = (int32_t)(pHandle->hC1) * hAux;
 8006bf4:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8006bf8:	9202      	str	r2, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8006bfa:	fa49 f20c 	asr.w	r2, r9, ip
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006bfe:	1b14      	subs	r4, r2, r4
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006c00:	88ce      	ldrh	r6, [r1, #6]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006c02:	9403      	str	r4, [sp, #12]
    wAux = (int32_t)(pHandle->hC1) * hAux;
 8006c04:	9c02      	ldr	r4, [sp, #8]
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8006c06:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8006c0a:	fa48 fc0c 	asr.w	ip, r8, ip
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006c0e:	ebac 0606 	sub.w	r6, ip, r6
    wAux = (int32_t)(pHandle->hC1) * hAux;
 8006c12:	fb12 f204 	smulbb	r2, r2, r4
    hAux = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    wAux = (int32_t)(pHandle->hC1) * hAux;
 8006c16:	fb1c fc04 	smulbb	ip, ip, r4
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8006c1a:	eba9 0202 	sub.w	r2, r9, r2
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8006c1e:	eba8 0c0c 	sub.w	ip, r8, ip
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8006c22:	f9b1 9000 	ldrsh.w	r9, [r1]
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8006c26:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    wAux = (int32_t)(pHandle->hC2) * hIalfa_err;
 8006c2a:	f9b3 1022 	ldrsh.w	r1, [r3, #34]	@ 0x22
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006c2e:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
    {
      wDirection = -1;
    }

    /* Stores observed b-emfs */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8006c32:	f8a3 7044 	strh.w	r7, [r3, #68]	@ 0x44
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006c36:	b236      	sxth	r6, r6
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8006c38:	fb0a f909 	mul.w	r9, sl, r9
    wAux = (int32_t)(pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8006c3c:	fb0a f808 	mul.w	r8, sl, r8
    wAux = (int32_t)(pHandle->hC5) * hValfa;
 8006c40:	f9b3 a028 	ldrsh.w	sl, [r3, #40]	@ 0x28
    pHandle->hBemf_beta_est = hAux_Beta;
 8006c44:	f8a3 e046 	strh.w	lr, [r3, #70]	@ 0x46
    wIbeta_est_Next += wAux;
 8006c48:	fb01 cc06 	mla	ip, r1, r6, ip
    hVbeta = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006c4c:	ea4f 4828 	mov.w	r8, r8, asr #16
    wIbeta_est_Next += wAux;
 8006c50:	fb0a cc08 	mla	ip, sl, r8, ip
    wAux = (int32_t)(pHandle->hC4) * hIalfa_err;
 8006c54:	f9b3 8026 	ldrsh.w	r8, [r3, #38]	@ 0x26
    wIalfa_est_Next += wAux;
 8006c58:	fb01 2204 	mla	r2, r1, r4, r2
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006c5c:	ea4f 4929 	mov.w	r9, r9, asr #16
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8006c60:	fb04 0408 	mla	r4, r4, r8, r0
    wAux = (int32_t) hAux_Beta >> pHandle->F3POW2;
 8006c64:	8e59      	ldrh	r1, [r3, #50]	@ 0x32
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8006c66:	fb08 5806 	mla	r8, r8, r6, r5
    wAux = (int32_t)(pHandle->hC3) * hAux_Alfa;
 8006c6a:	f9b3 6024 	ldrsh.w	r6, [r3, #36]	@ 0x24
    wIalfa_est_Next += wAux;
 8006c6e:	fb0a 2209 	mla	r2, sl, r9, r2
    wAux = wAux * pHandle->hC6;
 8006c72:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	@ 0x2a
    wIalfa_est_Next -= wAux;
 8006c76:	fb06 2a17 	mls	sl, r6, r7, r2
    wIbeta_est_Next -= wAux;
 8006c7a:	fb06 c61e 	mls	r6, r6, lr, ip
    wAux = (int32_t) hAux_Beta >> pHandle->F3POW2;
 8006c7e:	fa4e fc01 	asr.w	ip, lr, r1
    wAux = wAux * pHandle->hC6;
 8006c82:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 8006c86:	fb0c 440b 	mla	r4, ip, fp, r4
    if (pHandle->Orig_ElSpeedDpp >= 0)
 8006c8a:	f9b3 c14e 	ldrsh.w	ip, [r3, #334]	@ 0x14e
 8006c8e:	f1bc 0f00 	cmp.w	ip, #0
    wAux = (int32_t) hAux_Alfa >> pHandle->F3POW2;
 8006c92:	fa47 f101 	asr.w	r1, r7, r1
    wAux = wAux * pHandle->hC6;
 8006c96:	bfbc      	itt	lt
 8006c98:	4240      	neglt	r0, r0
 8006c9a:	426d      	neglt	r5, r5
 8006c9c:	fb01 f109 	mul.w	r1, r1, r9
      wDirection = -1;
 8006ca0:	bfb4      	ite	lt
 8006ca2:	f04f 3cff 	movlt.w	ip, #4294967295
      wDirection = 1;
 8006ca6:	f04f 0c01 	movge.w	ip, #1

  int16_t hAngle;
  int32_t wXi, wYi, wXold;

  /*Determining quadrant*/
  if (wBemf_alfa_est < 0)
 8006caa:	2800      	cmp	r0, #0
    wBemf_beta_est_Next -= wAux;
 8006cac:	fb01 811b 	mls	r1, r1, fp, r8

    /* Calls the CORDIC blockset */
    wAux_Alpha = pHandle->wBemf_alfa_est * wDirection;
    wAux_Beta = pHandle->wBemf_beta_est * wDirection;

    hRotor_Angle = MCM_PhaseComputation(wAux_Alpha, -wAux_Beta);
 8006cb0:	f1c5 0700 	rsb	r7, r5, #0
 8006cb4:	db4d      	blt.n	8006d52 <STO_CR_CalcElAngle+0x1da>
  else
  {
    /* Quadrant I or IV */
    hAngle = 0;
    wXi = wBemf_alfa_est / 2;
    wYi = wBemf_beta_est / 2;
 8006cb6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8006cba:	107d      	asrs	r5, r7, #1
    wXi = wBemf_alfa_est / 2;
 8006cbc:	1040      	asrs	r0, r0, #1
    wYi = wBemf_beta_est / 2;
 8006cbe:	f44f 4760 	mov.w	r7, #57344	@ 0xe000
 8006cc2:	f44f 5e00 	mov.w	lr, #8192	@ 0x2000
  }
  wXold = wXi;

  /* Begin the successive approximation process */
  /* Iteration 0 */
  if (wYi < 0)
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	da4d      	bge.n	8006d66 <STO_CR_CalcElAngle+0x1ee>
 8006cca:	4677      	mov	r7, lr
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV1;
    wXi = wXi - wYi;
    wYi = wXold + wYi;
 8006ccc:	eb05 0e00 	add.w	lr, r5, r0
    wYi = -wXold + wYi;
  }
  wXold = wXi;

  /* Iteration 1 */
  if (wYi < 0)
 8006cd0:	f1be 0f00 	cmp.w	lr, #0
    wXi = wXi - wYi;
 8006cd4:	eba0 0805 	sub.w	r8, r0, r5
  if (wYi < 0)
 8006cd8:	da4c      	bge.n	8006d74 <STO_CR_CalcElAngle+0x1fc>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV2;
 8006cda:	f507 5797 	add.w	r7, r7, #4832	@ 0x12e0
    wXi = wXi - (wYi / 2);
    wYi = (wXold / 2) + wYi;
 8006cde:	eb0e 0568 	add.w	r5, lr, r8, asr #1
    hAngle += ATAN1DIV2;
 8006ce2:	3704      	adds	r7, #4
    wXi = wXi - (wYi / 2);
 8006ce4:	eb0e 79de 	add.w	r9, lr, lr, lsr #31
    wYi = (-wXold / 2) + wYi;
  }
  wXold = wXi;

  /* Iteration 2 */
  if (wYi < 0)
 8006ce8:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV2;
 8006cea:	b2bf      	uxth	r7, r7
    wXi = wXi - (wYi / 2);
 8006cec:	eba8 0969 	sub.w	r9, r8, r9, asr #1
  if (wYi < 0)
 8006cf0:	da4e      	bge.n	8006d90 <STO_CR_CalcElAngle+0x218>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV4;
    wXi = wXi - (wYi / 4);
 8006cf2:	f105 0e03 	add.w	lr, r5, #3
    wYi = (wXold / 4) + wYi;
 8006cf6:	eb05 05a9 	add.w	r5, r5, r9, asr #2
    hAngle += ATAN1DIV4;
 8006cfa:	f607 17fb 	addw	r7, r7, #2555	@ 0x9fb
    wYi = (-wXold / 4) + wYi;
  }
  wXold = wXi;

  /* Iteration 3 */
  if (wYi < 0)
 8006cfe:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV4;
 8006d00:	b2b8      	uxth	r0, r7
    wXi = wXi - (wYi / 4);
 8006d02:	eba9 0eae 	sub.w	lr, r9, lr, asr #2
  if (wYi < 0)
 8006d06:	da51      	bge.n	8006dac <STO_CR_CalcElAngle+0x234>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV8;
    wXi = wXi - (wYi / 8);
 8006d08:	1def      	adds	r7, r5, #7
    wYi = (wXold / 8) + wYi;
 8006d0a:	eb05 05ee 	add.w	r5, r5, lr, asr #3
    hAngle += ATAN1DIV8;
 8006d0e:	f200 5011 	addw	r0, r0, #1297	@ 0x511
    wYi = (-wXold / 8) + wYi;
  }
  wXold = wXi;

  /* Iteration4 */
  if (wYi < 0)
 8006d12:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV8;
 8006d14:	b280      	uxth	r0, r0
    wXi = wXi - (wYi / 8);
 8006d16:	ebae 07e7 	sub.w	r7, lr, r7, asr #3
  if (wYi < 0)
 8006d1a:	da58      	bge.n	8006dce <STO_CR_CalcElAngle+0x256>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV16;
    wXi = wXi - (wYi / 16);
 8006d1c:	f105 0e0f 	add.w	lr, r5, #15
    wYi = (wXold / 16) + wYi;
 8006d20:	eb05 1527 	add.w	r5, r5, r7, asr #4
    hAngle += ATAN1DIV16;
 8006d24:	f200 208b 	addw	r0, r0, #651	@ 0x28b
    wYi = (-wXold / 16) + wYi;
  }
  wXold = wXi;

  /* Iteration 5 */
  if (wYi < 0)
 8006d28:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV16;
 8006d2a:	b280      	uxth	r0, r0
    wXi = wXi - (wYi / 16);
 8006d2c:	eba7 1e2e 	sub.w	lr, r7, lr, asr #4
  if (wYi < 0)
 8006d30:	da5d      	bge.n	8006dee <STO_CR_CalcElAngle+0x276>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV32;
    wXi = wXi - (wYi / 32);
 8006d32:	f105 071f 	add.w	r7, r5, #31
    wYi = (wXold / 32) + wYi;
 8006d36:	eb05 156e 	add.w	r5, r5, lr, asr #5
    hAngle += ATAN1DIV32;
 8006d3a:	f500 70a3 	add.w	r0, r0, #326	@ 0x146
    wYi = (-wXold / 32) + wYi;
  }
  wXold = wXi;

  /* Iteration 6 */
  if (wYi < 0)
 8006d3e:	2d00      	cmp	r5, #0
    hAngle += ATAN1DIV32;
 8006d40:	b280      	uxth	r0, r0
    wXi = wXi - (wYi / 32);
 8006d42:	ebae 1767 	sub.w	r7, lr, r7, asr #5
  if (wYi < 0)
 8006d46:	da62      	bge.n	8006e0e <STO_CR_CalcElAngle+0x296>
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV64;
 8006d48:	30a3      	adds	r0, #163	@ 0xa3
    wXi = wXi - (wYi / 64);
    wYi = (wXold / 64) + wYi;
 8006d4a:	eb05 15a7 	add.w	r5, r5, r7, asr #6
    hAngle += ATAN1DIV64;
 8006d4e:	b280      	uxth	r0, r0
    wYi = (wXold / 64) + wYi;
 8006d50:	e066      	b.n	8006e20 <STO_CR_CalcElAngle+0x2a8>
    if (wBemf_beta_est < 0)
 8006d52:	2d00      	cmp	r5, #0
 8006d54:	f300 80f9 	bgt.w	8006f4a <STO_CR_CalcElAngle+0x3d2>
      wYi = - (wBemf_alfa_est / 2);
 8006d58:	eb00 75d0 	add.w	r5, r0, r0, lsr #31
 8006d5c:	106d      	asrs	r5, r5, #1
      wXi = wBemf_beta_est / 2;
 8006d5e:	1078      	asrs	r0, r7, #1
      wYi = - (wBemf_alfa_est / 2);
 8006d60:	426d      	negs	r5, r5
 8006d62:	f44f 4720 	mov.w	r7, #40960	@ 0xa000
    wYi = -wXold + wYi;
 8006d66:	eba5 0e00 	sub.w	lr, r5, r0
  if (wYi < 0)
 8006d6a:	f1be 0f00 	cmp.w	lr, #0
    wXi = wXi + wYi;
 8006d6e:	eb05 0800 	add.w	r8, r5, r0
  if (wYi < 0)
 8006d72:	dbb2      	blt.n	8006cda <STO_CR_CalcElAngle+0x162>
    wYi = (-wXold / 2) + wYi;
 8006d74:	f1c8 0500 	rsb	r5, r8, #0
 8006d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    hAngle -= ATAN1DIV2;
 8006d7c:	f5a7 5797 	sub.w	r7, r7, #4832	@ 0x12e0
    wYi = (-wXold / 2) + wYi;
 8006d80:	eb0e 0565 	add.w	r5, lr, r5, asr #1
    hAngle -= ATAN1DIV2;
 8006d84:	3f04      	subs	r7, #4
  if (wYi < 0)
 8006d86:	2d00      	cmp	r5, #0
    hAngle -= ATAN1DIV2;
 8006d88:	b2bf      	uxth	r7, r7
    wXi = wXi + (wYi / 2);
 8006d8a:	eb08 096e 	add.w	r9, r8, lr, asr #1
  if (wYi < 0)
 8006d8e:	dbb0      	blt.n	8006cf2 <STO_CR_CalcElAngle+0x17a>
    hAngle -= ATAN1DIV4;
 8006d90:	f6a7 17fb 	subw	r7, r7, #2555	@ 0x9fb
 8006d94:	b2b8      	uxth	r0, r7
    wYi = (-wXold / 4) + wYi;
 8006d96:	f1c9 0700 	rsb	r7, r9, #0
 8006d9a:	2f00      	cmp	r7, #0
 8006d9c:	bfb8      	it	lt
 8006d9e:	3703      	addlt	r7, #3
    wXi = wXi + (wYi / 4);
 8006da0:	eb09 0ea5 	add.w	lr, r9, r5, asr #2
    wYi = (-wXold / 4) + wYi;
 8006da4:	eb05 05a7 	add.w	r5, r5, r7, asr #2
  if (wYi < 0)
 8006da8:	2d00      	cmp	r5, #0
 8006daa:	dbad      	blt.n	8006d08 <STO_CR_CalcElAngle+0x190>
    wYi = (-wXold / 8) + wYi;
 8006dac:	f1ce 0800 	rsb	r8, lr, #0
 8006db0:	f1b8 0f00 	cmp.w	r8, #0
 8006db4:	bfb8      	it	lt
 8006db6:	f108 0807 	addlt.w	r8, r8, #7
    hAngle -= ATAN1DIV8;
 8006dba:	f46f 62a2 	mvn.w	r2, #1296	@ 0x510
    wXi = wXi + (wYi / 8);
 8006dbe:	eb0e 07e5 	add.w	r7, lr, r5, asr #3
    wYi = (-wXold / 8) + wYi;
 8006dc2:	eb05 05e8 	add.w	r5, r5, r8, asr #3
    hAngle -= ATAN1DIV8;
 8006dc6:	4410      	add	r0, r2
  if (wYi < 0)
 8006dc8:	2d00      	cmp	r5, #0
    hAngle -= ATAN1DIV8;
 8006dca:	b280      	uxth	r0, r0
  if (wYi < 0)
 8006dcc:	dba6      	blt.n	8006d1c <STO_CR_CalcElAngle+0x1a4>
    wYi = (-wXold / 16) + wYi;
 8006dce:	f1c7 0800 	rsb	r8, r7, #0
 8006dd2:	f1b8 0f00 	cmp.w	r8, #0
 8006dd6:	bfb8      	it	lt
 8006dd8:	f108 080f 	addlt.w	r8, r8, #15
    wXi = wXi + (wYi / 16);
 8006ddc:	eb07 1e25 	add.w	lr, r7, r5, asr #4
    wYi = (-wXold / 16) + wYi;
 8006de0:	eb05 1528 	add.w	r5, r5, r8, asr #4
    hAngle -= ATAN1DIV16;
 8006de4:	f2a0 208b 	subw	r0, r0, #651	@ 0x28b
  if (wYi < 0)
 8006de8:	2d00      	cmp	r5, #0
    hAngle -= ATAN1DIV16;
 8006dea:	b280      	uxth	r0, r0
  if (wYi < 0)
 8006dec:	dba1      	blt.n	8006d32 <STO_CR_CalcElAngle+0x1ba>
    wYi = (-wXold / 32) + wYi;
 8006dee:	f1ce 0800 	rsb	r8, lr, #0
 8006df2:	f1b8 0f00 	cmp.w	r8, #0
 8006df6:	bfb8      	it	lt
 8006df8:	f108 081f 	addlt.w	r8, r8, #31
    wXi = wXi + (wYi / 32);
 8006dfc:	eb0e 1765 	add.w	r7, lr, r5, asr #5
    wYi = (-wXold / 32) + wYi;
 8006e00:	eb05 1568 	add.w	r5, r5, r8, asr #5
    hAngle -= ATAN1DIV32;
 8006e04:	f5a0 70a3 	sub.w	r0, r0, #326	@ 0x146
  if (wYi < 0)
 8006e08:	2d00      	cmp	r5, #0
    hAngle -= ATAN1DIV32;
 8006e0a:	b280      	uxth	r0, r0
  if (wYi < 0)
 8006e0c:	db9c      	blt.n	8006d48 <STO_CR_CalcElAngle+0x1d0>
  else
  {
    /* Vector is in Quadrant I */
    hAngle -= ATAN1DIV64;
    wXi = wXi + (wYi / 64);
    wYi = (-wXold / 64) + wYi;
 8006e0e:	427f      	negs	r7, r7
 8006e10:	2f00      	cmp	r7, #0
    hAngle -= ATAN1DIV64;
 8006e12:	f1a0 00a3 	sub.w	r0, r0, #163	@ 0xa3
    wYi = (-wXold / 64) + wYi;
 8006e16:	bfb8      	it	lt
 8006e18:	373f      	addlt	r7, #63	@ 0x3f
    hAngle -= ATAN1DIV64;
 8006e1a:	b280      	uxth	r0, r0
    wYi = (-wXold / 64) + wYi;
 8006e1c:	eb05 15a7 	add.w	r5, r5, r7, asr #6
  }
  wXold = wXi;

  /* Iteration 7 */
  if (wYi < 0)
 8006e20:	2d00      	cmp	r5, #0
  {
    /* Vector is in Quadrant IV */
    hAngle += ATAN1DIV128;
 8006e22:	bfb4      	ite	lt
 8006e24:	3051      	addlt	r0, #81	@ 0x51
    wYi = (wXold / 128) + wYi;
  }
  else
  {
    /* Vector is in Quadrant I */
    hAngle -= ATAN1DIV128;
 8006e26:	3851      	subge	r0, #81	@ 0x51

    hOrRotor_Speed = (int16_t)(hRotor_Angle - hPrev_Rotor_Angle);
 8006e28:	f8bd 8000 	ldrh.w	r8, [sp]
 8006e2c:	b280      	uxth	r0, r0
    wXi = wXi + (wYi / 128);
    wYi = (-wXold / 128) + wYi;
  }

  return (-hAngle);
 8006e2e:	4240      	negs	r0, r0
 8006e30:	eba0 0e08 	sub.w	lr, r0, r8
    hRotor_Acceleration = hOrRotor_Speed - hPrev_Rotor_Speed;
 8006e34:	fa1f f78b 	uxth.w	r7, fp
 8006e38:	ebae 0507 	sub.w	r5, lr, r7

    hRotor_Speed = hOrRotor_Speed;

    if (wDirection == 1)
 8006e3c:	f1bc 0f01 	cmp.w	ip, #1
 8006e40:	b200      	sxth	r0, r0
    hOrRotor_Speed = (int16_t)(hRotor_Angle - hPrev_Rotor_Angle);
 8006e42:	fa0f fe8e 	sxth.w	lr, lr
    hRotor_Acceleration = hOrRotor_Speed - hPrev_Rotor_Speed;
 8006e46:	b22d      	sxth	r5, r5
    if (wDirection == 1)
 8006e48:	d061      	beq.n	8006f0e <STO_CR_CalcElAngle+0x396>
        }
      }
    }
    else
    {
      if (hRotor_Speed > 0)
 8006e4a:	f1be 0f00 	cmp.w	lr, #0
 8006e4e:	dd31      	ble.n	8006eb4 <STO_CR_CalcElAngle+0x33c>
        }
      }
    }


    if (hRotor_Acceleration > hMax_Instant_Accel)
 8006e50:	9801      	ldr	r0, [sp, #4]
 8006e52:	42a8      	cmp	r0, r5
 8006e54:	da45      	bge.n	8006ee2 <STO_CR_CalcElAngle+0x36a>
    {
      hOrRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 8006e56:	4407      	add	r7, r0
 8006e58:	fa0f fe87 	sxth.w	lr, r7
 8006e5c:	f04f 0c00 	mov.w	ip, #0
  * @param  pHandle: handler of the current instance of the STO CORDIC component
  * @retval none
  */
inline static void STO_CR_Store_Rotor_Speed(STO_CR_Handle_t *pHandle, int16_t hRotor_Speed, int16_t hOrRotor_Speed)
{
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8006e60:	f893 70c8 	ldrb.w	r7, [r3, #200]	@ 0xc8

  bBuffer_index++;
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8006e64:	f893 016c 	ldrb.w	r0, [r3, #364]	@ 0x16c
  bBuffer_index++;
 8006e68:	3701      	adds	r7, #1
 8006e6a:	b2ff      	uxtb	r7, r7
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8006e6c:	42b8      	cmp	r0, r7
 8006e6e:	bf0a      	itet	eq
 8006e70:	2500      	moveq	r5, #0
  else
  {
    /* Nothing too do */
  }

  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8006e72:	463d      	movne	r5, r7
    bBuffer_index = 0U;
 8006e74:	462f      	moveq	r7, r5
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8006e76:	eb03 0545 	add.w	r5, r3, r5, lsl #1
}
 8006e7a:	9800      	ldr	r0, [sp, #0]
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8006e7c:	f9b5 8048 	ldrsh.w	r8, [r5, #72]	@ 0x48
 8006e80:	f8a3 8168 	strh.w	r8, [r3, #360]	@ 0x168
  pHandle->OrigSpeedBufferOldestEl = pHandle->Orig_Speed_Buffer[bBuffer_index];
 8006e84:	f9b5 80ce 	ldrsh.w	r8, [r5, #206]	@ 0xce
 8006e88:	f8a3 816a 	strh.w	r8, [r3, #362]	@ 0x16a

  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8006e8c:	f8a5 c048 	strh.w	ip, [r5, #72]	@ 0x48
  pHandle->Orig_Speed_Buffer[bBuffer_index] = hOrRotor_Speed;
 8006e90:	f8a5 e0ce 	strh.w	lr, [r5, #206]	@ 0xce
    pHandle->Ibeta_est = wIbeta_est_Next;
 8006e94:	e9c3 640e 	strd	r6, r4, [r3, #56]	@ 0x38
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8006e98:	f883 70c8 	strb.w	r7, [r3, #200]	@ 0xc8
    pHandle->Ialfa_est = wIalfa_est_Next;
 8006e9c:	f8c3 a034 	str.w	sl, [r3, #52]	@ 0x34
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8006ea0:	6419      	str	r1, [r3, #64]	@ 0x40
}
 8006ea2:	b005      	add	sp, #20
 8006ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * (int32_t)(pHandle->hF1);
 8006ea8:	639a      	str	r2, [r3, #56]	@ 0x38
 8006eaa:	4690      	mov	r8, r2
 8006eac:	e69f      	b.n	8006bee <STO_CR_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = -INT16_MAX * (int32_t)(pHandle->hF2);
 8006eae:	641a      	str	r2, [r3, #64]	@ 0x40
 8006eb0:	4615      	mov	r5, r2
 8006eb2:	e684      	b.n	8006bbe <STO_CR_CalcElAngle+0x46>
        if (hRotor_Acceleration < (-hMax_Instant_Accel))
 8006eb4:	9a01      	ldr	r2, [sp, #4]
 8006eb6:	f1c2 0c00 	rsb	ip, r2, #0
 8006eba:	4565      	cmp	r5, ip
 8006ebc:	da38      	bge.n	8006f30 <STO_CR_CalcElAngle+0x3b8>
          hRotor_Speed = hPrev_Rotor_Speed - hMax_Instant_Accel;
 8006ebe:	fa1f fe82 	uxth.w	lr, r2
 8006ec2:	eba7 0c0e 	sub.w	ip, r7, lr
          pHandle->_Super.hElAngle = hPrev_Rotor_Angle + hRotor_Speed;
 8006ec6:	fa18 f88c 	uxtah	r8, r8, ip
 8006eca:	fa0f f088 	sxth.w	r0, r8
    if (hRotor_Acceleration > hMax_Instant_Accel)
 8006ece:	42aa      	cmp	r2, r5
          pHandle->_Super.hElAngle = hPrev_Rotor_Angle + hRotor_Speed;
 8006ed0:	9000      	str	r0, [sp, #0]
 8006ed2:	8098      	strh	r0, [r3, #4]
          hRotor_Speed = hPrev_Rotor_Speed - hMax_Instant_Accel;
 8006ed4:	fa0f fc8c 	sxth.w	ip, ip
    if (hRotor_Acceleration > hMax_Instant_Accel)
 8006ed8:	da46      	bge.n	8006f68 <STO_CR_CalcElAngle+0x3f0>
      hOrRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 8006eda:	44be      	add	lr, r7
 8006edc:	fa0f fe8e 	sxth.w	lr, lr
 8006ee0:	e7be      	b.n	8006e60 <STO_CR_CalcElAngle+0x2e8>
 8006ee2:	f04f 0c00 	mov.w	ip, #0
 8006ee6:	4602      	mov	r2, r0
    else if (hRotor_Acceleration < (-hMax_Instant_Accel))
 8006ee8:	4250      	negs	r0, r2
 8006eea:	4285      	cmp	r5, r0
 8006eec:	dab8      	bge.n	8006e60 <STO_CR_CalcElAngle+0x2e8>
      hOrRotor_Speed = hPrev_Rotor_Speed - hMax_Instant_Accel;
 8006eee:	1abf      	subs	r7, r7, r2
 8006ef0:	fa0f fe87 	sxth.w	lr, r7
 8006ef4:	e7b4      	b.n	8006e60 <STO_CR_CalcElAngle+0x2e8>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * (int32_t)(pHandle->hF2)))
 8006ef6:	4254      	negs	r4, r2
 8006ef8:	42a0      	cmp	r0, r4
      pHandle->wBemf_alfa_est = -INT16_MAX * (int32_t)(pHandle->hF2);
 8006efa:	bfdc      	itt	le
 8006efc:	63dc      	strle	r4, [r3, #60]	@ 0x3c
 8006efe:	4620      	movle	r0, r4
 8006f00:	e650      	b.n	8006ba4 <STO_CR_CalcElAngle+0x2c>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * (int32_t)(pHandle->hF1)))
 8006f02:	4254      	negs	r4, r2
 8006f04:	45a1      	cmp	r9, r4
      pHandle->Ialfa_est = -INT16_MAX * (int32_t)(pHandle->hF1);
 8006f06:	bfdc      	itt	le
 8006f08:	635c      	strle	r4, [r3, #52]	@ 0x34
 8006f0a:	46a1      	movle	r9, r4
 8006f0c:	e666      	b.n	8006bdc <STO_CR_CalcElAngle+0x64>
      if (hRotor_Speed < 0)
 8006f0e:	f1be 0f00 	cmp.w	lr, #0
 8006f12:	db9d      	blt.n	8006e50 <STO_CR_CalcElAngle+0x2d8>
        if (hRotor_Acceleration > hMax_Instant_Accel)
 8006f14:	9a01      	ldr	r2, [sp, #4]
 8006f16:	42aa      	cmp	r2, r5
 8006f18:	da13      	bge.n	8006f42 <STO_CR_CalcElAngle+0x3ca>
          hRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 8006f1a:	4417      	add	r7, r2
          pHandle->_Super.hElAngle = hPrev_Rotor_Angle + hRotor_Speed;
 8006f1c:	fa18 f887 	uxtah	r8, r8, r7
 8006f20:	fa0f f288 	sxth.w	r2, r8
          hRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 8006f24:	fa0f fc87 	sxth.w	ip, r7
          pHandle->_Super.hElAngle = hPrev_Rotor_Angle + hRotor_Speed;
 8006f28:	9200      	str	r2, [sp, #0]
 8006f2a:	809a      	strh	r2, [r3, #4]
 8006f2c:	46e6      	mov	lr, ip
 8006f2e:	e797      	b.n	8006e60 <STO_CR_CalcElAngle+0x2e8>
    if (hRotor_Acceleration > hMax_Instant_Accel)
 8006f30:	42aa      	cmp	r2, r5
          pHandle->_Super.hElAngle = hRotor_Angle;
 8006f32:	8098      	strh	r0, [r3, #4]
    if (hRotor_Acceleration > hMax_Instant_Accel)
 8006f34:	da15      	bge.n	8006f62 <STO_CR_CalcElAngle+0x3ea>
      hOrRotor_Speed = hPrev_Rotor_Speed + hMax_Instant_Accel;
 8006f36:	4417      	add	r7, r2
 8006f38:	46f4      	mov	ip, lr
 8006f3a:	9000      	str	r0, [sp, #0]
 8006f3c:	fa0f fe87 	sxth.w	lr, r7
 8006f40:	e78e      	b.n	8006e60 <STO_CR_CalcElAngle+0x2e8>
          pHandle->_Super.hElAngle = hRotor_Angle;
 8006f42:	8098      	strh	r0, [r3, #4]
 8006f44:	9000      	str	r0, [sp, #0]
 8006f46:	46f4      	mov	ip, lr
 8006f48:	e7ce      	b.n	8006ee8 <STO_CR_CalcElAngle+0x370>
      wXi = - (wBemf_beta_est / 2);
 8006f4a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8006f4e:	107f      	asrs	r7, r7, #1
      wYi = wBemf_alfa_est / 2;
 8006f50:	eb00 75d0 	add.w	r5, r0, r0, lsr #31
 8006f54:	106d      	asrs	r5, r5, #1
      wXi = - (wBemf_beta_est / 2);
 8006f56:	4278      	negs	r0, r7
      wYi = wBemf_alfa_est / 2;
 8006f58:	f44f 4ec0 	mov.w	lr, #24576	@ 0x6000
 8006f5c:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 8006f60:	e6b1      	b.n	8006cc6 <STO_CR_CalcElAngle+0x14e>
    if (hRotor_Acceleration > hMax_Instant_Accel)
 8006f62:	9000      	str	r0, [sp, #0]
 8006f64:	46f4      	mov	ip, lr
 8006f66:	e77b      	b.n	8006e60 <STO_CR_CalcElAngle+0x2e8>
 8006f68:	46e6      	mov	lr, ip
      hOrRotor_Speed = hPrev_Rotor_Speed - hMax_Instant_Accel;
 8006f6a:	e779      	b.n	8006e60 <STO_CR_CalcElAngle+0x2e8>

08006f6c <STO_CR_CalcAvrgMecSpeedUnit>:
{
 8006f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8006f6e:	f890 516c 	ldrb.w	r5, [r0, #364]	@ 0x16c
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006f72:	2d00      	cmp	r5, #0
 8006f74:	f000 8096 	beq.w	80070a4 <STO_CR_CalcAvrgMecSpeedUnit+0x138>
 8006f78:	f100 0246 	add.w	r2, r0, #70	@ 0x46
 8006f7c:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 8006f80:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8006f82:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8006f86:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006f8a:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8006f8c:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006f8e:	d1fa      	bne.n	8006f86 <STO_CR_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / (int16_t)bSpeedBufferSizeUnit;
 8006f90:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 8006f94:	f04f 0c00 	mov.w	ip, #0
      wError = (int32_t)(pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8006f98:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8006f9c:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006fa0:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 8006fa2:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006fa6:	d1f7      	bne.n	8006f98 <STO_CR_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / (int16_t)bSpeedBufferSizeUnit;
 8006fa8:	fbbc f4f5 	udiv	r4, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8006fac:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8006fb0:	17de      	asrs	r6, r3, #31
 8006fb2:	f8b0 c16e 	ldrh.w	ip, [r0, #366]	@ 0x16e
    wAux = wAvrSpeed_dpp * (int32_t)(pHandle->_Super.hMeasurementFrequency);
 8006fb6:	8b45      	ldrh	r5, [r0, #26]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8006fb8:	f890 715c 	ldrb.w	r7, [r0, #348]	@ 0x15c
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8006fbc:	fbac 2303 	umull	r2, r3, ip, r3
 8006fc0:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 8006fc4:	09d2      	lsrs	r2, r2, #7
 8006fc6:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
    wAux = wAux * (int32_t) (pHandle->_Super.SpeedUnit);
 8006fca:	7883      	ldrb	r3, [r0, #2]
    wAux = wAvrSpeed_dpp * (int32_t)(pHandle->_Super.hMeasurementFrequency);
 8006fcc:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006fd0:	42a2      	cmp	r2, r4
    wAux = wAux * (int32_t) (pHandle->_Super.SpeedUnit);
 8006fd2:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006fd6:	bfd8      	it	le
 8006fd8:	2600      	movle	r6, #0
    wAux = wAux / (int32_t)(pHandle->_Super.DPPConvFactor);
 8006fda:	69c5      	ldr	r5, [r0, #28]
 8006fdc:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006fe0:	bfc8      	it	gt
 8006fe2:	2601      	movgt	r6, #1
    wAux = wAux / (int16_t)(pHandle->_Super.bElToMecRatio);
 8006fe4:	7845      	ldrb	r5, [r0, #1]
 8006fe6:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 8006fea:	b21d      	sxth	r5, r3
 8006fec:	800d      	strh	r5, [r1, #0]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006fee:	f880 60c9 	strb.w	r6, [r0, #201]	@ 0xc9
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8006ff2:	8185      	strh	r5, [r0, #12]
    if (pHandle->IsAlgorithmConverged == false)
 8006ff4:	f890 60cc 	ldrb.w	r6, [r0, #204]	@ 0xcc
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8006ff8:	b99f      	cbnz	r7, 8007022 <STO_CR_CalcAvrgMecSpeedUnit+0xb6>
    if (pHandle->IsAlgorithmConverged == false)
 8006ffa:	b346      	cbz	r6, 800704e <STO_CR_CalcAvrgMecSpeedUnit+0xe2>
      if ((pHandle->IsSpeedReliable == false) || (bIs_Bemf_Consistent == false))
 8006ffc:	42a2      	cmp	r2, r4
 8006ffe:	dc23      	bgt.n	8007048 <STO_CR_CalcAvrgMecSpeedUnit+0xdc>
        pHandle->ReliabilityCounter++;
 8007000:	f890 30cb 	ldrb.w	r3, [r0, #203]	@ 0xcb
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8007004:	f890 2175 	ldrb.w	r2, [r0, #373]	@ 0x175
        pHandle->ReliabilityCounter++;
 8007008:	3301      	adds	r3, #1
 800700a:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 800700c:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 800700e:	f880 30cb 	strb.w	r3, [r0, #203]	@ 0xcb
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8007012:	d81c      	bhi.n	800704e <STO_CR_CalcAvrgMecSpeedUnit+0xe2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007014:	78c2      	ldrb	r2, [r0, #3]
 8007016:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	f880 30cb 	strb.w	r3, [r0, #203]	@ 0xcb
}
 800701e:	4618      	mov	r0, r3
 8007020:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));  //cstat !MISRAC2012-Rule-14.3_b !RED-cond-never !RED-cmp-never
 8007022:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8007024:	f8b0 517a 	ldrh.w	r5, [r0, #378]	@ 0x17a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));  //cstat !MISRAC2012-Rule-14.3_b !RED-cond-never !RED-cmp-never
 8007028:	bfb8      	it	lt
 800702a:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800702c:	429d      	cmp	r5, r3
 800702e:	dc12      	bgt.n	8007056 <STO_CR_CalcAvrgMecSpeedUnit+0xea>
    bool bIs_Bemf_Consistent = false;
 8007030:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8007032:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8007034:	462f      	mov	r7, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8007036:	e9c0 7355 	strd	r7, r3, [r0, #340]	@ 0x154
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800703a:	f880 5150 	strb.w	r5, [r0, #336]	@ 0x150
    if (pHandle->IsAlgorithmConverged == false)
 800703e:	b136      	cbz	r6, 800704e <STO_CR_CalcAvrgMecSpeedUnit+0xe2>
      if ((pHandle->IsSpeedReliable == false) || (bIs_Bemf_Consistent == false))
 8007040:	42a2      	cmp	r2, r4
 8007042:	dddd      	ble.n	8007000 <STO_CR_CalcAvrgMecSpeedUnit+0x94>
 8007044:	2d00      	cmp	r5, #0
 8007046:	d0db      	beq.n	8007000 <STO_CR_CalcAvrgMecSpeedUnit+0x94>
        pHandle->ReliabilityCounter = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	f880 30cb 	strb.w	r3, [r0, #203]	@ 0xcb
}
 800704e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8007052:	f7ff bc93 	b.w	800697c <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)(pHandle->hBemf_alfa_est);
 8007056:	f9b0 5044 	ldrsh.w	r5, [r0, #68]	@ 0x44
        wObsBemf = (int32_t)(pHandle->hBemf_beta_est);
 800705a:	f9b0 7046 	ldrsh.w	r7, [r0, #70]	@ 0x46
        wObsBemfSq = wObsBemf * wObsBemf;
 800705e:	fb05 fc05 	mul.w	ip, r5, r5
        wEstBemfSq = (wEstBemf * (int32_t)(pHandle->BemfConsistencyGain)) / 64;
 8007062:	f890 5179 	ldrb.w	r5, [r0, #377]	@ 0x179
        wObsBemfSq += wObsBemf * wObsBemf;
 8007066:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / (int16_t)(pHandle->_Super.hMaxReliableMecSpeedUnit);
 800706a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800706e:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8007072:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * (int32_t)(pHandle->BemfConsistencyGain)) / 64;
 8007076:	fb03 f505 	mul.w	r5, r3, r5
 800707a:	2d00      	cmp	r5, #0
 800707c:	bfb8      	it	lt
 800707e:	353f      	addlt	r5, #63	@ 0x3f
 8007080:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8007082:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * (int32_t)(pHandle->BemfConsistencyCheck));
 8007086:	2b00      	cmp	r3, #0
 8007088:	461d      	mov	r5, r3
 800708a:	f890 c178 	ldrb.w	ip, [r0, #376]	@ 0x178
 800708e:	bfb8      	it	lt
 8007090:	f103 053f 	addlt.w	r5, r3, #63	@ 0x3f
 8007094:	11ad      	asrs	r5, r5, #6
 8007096:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800709a:	42af      	cmp	r7, r5
 800709c:	bfd4      	ite	le
 800709e:	2500      	movle	r5, #0
 80070a0:	2501      	movgt	r5, #1
 80070a2:	e7c8      	b.n	8007036 <STO_CR_CalcAvrgMecSpeedUnit+0xca>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 80070a4:	462c      	mov	r4, r5
 80070a6:	462b      	mov	r3, r5
 80070a8:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 80070aa:	46ae      	mov	lr, r5
 80070ac:	e781      	b.n	8006fb2 <STO_CR_CalcAvrgMecSpeedUnit+0x46>
 80070ae:	bf00      	nop

080070b0 <STO_CR_Clear>:
{
 80070b0:	b570      	push	{r4, r5, r6, lr}
  * @retval none
  */
static void STO_CR_InitSpeedBuffer(STO_CR_Handle_t *pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 80070b2:	f890 616c 	ldrb.w	r6, [r0, #364]	@ 0x16c
    pHandle->Ialfa_est = (int32_t)0;
 80070b6:	2500      	movs	r5, #0
    pHandle->Ibeta_est = (int32_t)0;
 80070b8:	e9c0 550d 	strd	r5, r5, [r0, #52]	@ 0x34
    pHandle->wBemf_beta_est = (int32_t)0;
 80070bc:	e9c0 550f 	strd	r5, r5, [r0, #60]	@ 0x3c
    pHandle->Est_Bemf_Level = (int32_t)0;
 80070c0:	e9c0 5555 	strd	r5, r5, [r0, #340]	@ 0x154
    pHandle->DppOrigBufferSum = (int32_t)0;
 80070c4:	e9c0 5558 	strd	r5, r5, [r0, #352]	@ 0x160
{
 80070c8:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 80070ca:	8085      	strh	r5, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 80070cc:	81c5      	strh	r5, [r0, #14]
    pHandle->Orig_ElSpeedDpp = (int16_t)0;
 80070ce:	f8a0 514e 	strh.w	r5, [r0, #334]	@ 0x14e
    pHandle->ConsistencyCounter = 0u;
 80070d2:	f8a0 50ca 	strh.w	r5, [r0, #202]	@ 0xca
    pHandle->IsAlgorithmConverged = false;
 80070d6:	f880 50cc 	strb.w	r5, [r0, #204]	@ 0xcc
    pHandle->IsBemfConsistent = false;
 80070da:	f880 5150 	strb.w	r5, [r0, #336]	@ 0x150
    pHandle->ForceConvergency = false;
 80070de:	f8a0 5182 	strh.w	r5, [r0, #386]	@ 0x182

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSizeUnit; b_i++)
 80070e2:	b15e      	cbz	r6, 80070fc <STO_CR_Clear+0x4c>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 80070e4:	0076      	lsls	r6, r6, #1
 80070e6:	4632      	mov	r2, r6
 80070e8:	4629      	mov	r1, r5
 80070ea:	3048      	adds	r0, #72	@ 0x48
 80070ec:	f000 f908 	bl	8007300 <memset>
    pHandle->Orig_Speed_Buffer[b_i] = (int16_t)0;
 80070f0:	4632      	mov	r2, r6
 80070f2:	4629      	mov	r1, r5
 80070f4:	f104 00ce 	add.w	r0, r4, #206	@ 0xce
 80070f8:	f000 f902 	bl	8007300 <memset>
  }

  pHandle->Speed_Buffer_Index = 0u;
 80070fc:	2300      	movs	r3, #0
 80070fe:	f884 30c8 	strb.w	r3, [r4, #200]	@ 0xc8
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8007102:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
}
 8007106:	bd70      	pop	{r4, r5, r6, pc}

08007108 <STO_CR_Init>:
{
 8007108:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800710a:	f890 1174 	ldrb.w	r1, [r0, #372]	@ 0x174
    htempk = (int16_t)(C6_COMP_CONST1 / (pHandle->hF2));
 800710e:	4b17      	ldr	r3, [pc, #92]	@ (800716c <STO_CR_Init+0x64>)
 8007110:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007114:	f880 10ca 	strb.w	r1, [r0, #202]	@ 0xca
    pHandle->EnableDualCheck = true;
 8007118:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0u;
 800711a:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / (pHandle->hF2));
 800711c:	fb93 f3fe 	sdiv	r3, r3, lr
 8007120:	b21b      	sxth	r3, r3
{
 8007122:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8007124:	f880 215c 	strb.w	r2, [r0, #348]	@ 0x15c
    pHandle->F3POW2 = 0u;
 8007128:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 800712a:	b1eb      	cbz	r3, 8007168 <STO_CR_Init+0x60>
    wAux = (int32_t)1;
 800712c:	4611      	mov	r1, r2
      htempk /= (int16_t)2;
 800712e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 8007132:	f102 0c01 	add.w	ip, r2, #1
 8007136:	105b      	asrs	r3, r3, #1
 8007138:	4610      	mov	r0, r2
      wAux *= (int32_t)2;
 800713a:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800713e:	fa1f f28c 	uxth.w	r2, ip
 8007142:	d1f4      	bne.n	800712e <STO_CR_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8007144:	b20a      	sxth	r2, r1
 8007146:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = (int32_t)(pHandle->hF2) * pHandle->hF3;
 8007148:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800714c:	4808      	ldr	r0, [pc, #32]	@ (8007170 <STO_CR_Init+0x68>)
    pHandle->hF3 = (int16_t)wAux;
 800714e:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007150:	17cb      	asrs	r3, r1, #31
 8007152:	fb80 0101 	smull	r0, r1, r0, r1
 8007156:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800715a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_CR_Clear(pHandle);
 800715c:	4620      	mov	r0, r4
 800715e:	f7ff ffa7 	bl	80070b0 <STO_CR_Clear>
    pHandle->_Super.hMecAccelUnitP = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	8263      	strh	r3, [r4, #18]
}
 8007166:	bd10      	pop	{r4, pc}
 8007168:	4671      	mov	r1, lr
 800716a:	e7ef      	b.n	800714c <STO_CR_Init+0x44>
 800716c:	000fea5e 	.word	0x000fea5e
 8007170:	06488dc5 	.word	0x06488dc5

08007174 <STO_CR_GetEstimatedBemf>:
    Vaux.alpha = pHandle->hBemf_alfa_est;
    Vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
  return (Vaux);
 8007174:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007176:	2200      	movs	r2, #0
 8007178:	b299      	uxth	r1, r3
 800717a:	f361 020f 	bfi	r2, r1, #0, #16
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	f363 421f 	bfi	r2, r3, #16, #16
{
 8007184:	b082      	sub	sp, #8
}
 8007186:	4610      	mov	r0, r2
 8007188:	b002      	add	sp, #8
 800718a:	4770      	bx	lr

0800718c <STO_CR_GetEstimatedCurrent>:
  * @param  pHandle: handler of the current instance of the STO CORDIC component
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta
  */
//cstat !MISRAC2012-Rule-8.13
__weak alphabeta_t STO_CR_GetEstimatedCurrent(STO_CR_Handle_t *pHandle)
{
 800718c:	4603      	mov	r3, r0
    Iaux.beta = (int16_t)(pHandle->Ibeta_est / (pHandle->hF1));
#endif
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
  return (Iaux);
 800718e:	2000      	movs	r0, #0
    Iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007190:	f8b3 117c 	ldrh.w	r1, [r3, #380]	@ 0x17c
    Iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8007194:	e9d3 230d 	ldrd	r2, r3, [r3, #52]	@ 0x34
    Iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007198:	410a      	asrs	r2, r1
  return (Iaux);
 800719a:	410b      	asrs	r3, r1
 800719c:	b292      	uxth	r2, r2
 800719e:	f362 000f 	bfi	r0, r2, #0, #16
 80071a2:	b29b      	uxth	r3, r3
{
 80071a4:	b082      	sub	sp, #8
  return (Iaux);
 80071a6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80071aa:	b002      	add	sp, #8
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop

080071b0 <STO_CR_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 80071b0:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80071b4:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 80071b6:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 80071ba:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop

080071c0 <STO_CR_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 80071c0:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 80071c2:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop

080071c8 <STO_CR_CalcAvrgElSpeedDpp>:
    int32_t wSumOrig = pHandle->DppOrigBufferSum;
    int32_t wAvrSpeed_dpp;
    int16_t hSpeedBufferSizedpp = (int16_t)(pHandle->SpeedBufferSizedpp);
    int16_t hSpeedBufferSizeUnit = (int16_t)(pHandle->SpeedBufferSizeUnit);
    int16_t hBufferSizeDiff;
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 80071c8:	f890 10c8 	ldrb.w	r1, [r0, #200]	@ 0xc8
    int16_t hIndexOld;
    int16_t hIndexOldTemp;

    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80071cc:	f890 216d 	ldrb.w	r2, [r0, #365]	@ 0x16d
 80071d0:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
{
 80071d4:	b510      	push	{r4, lr}

    if (0 == hBufferSizeDiff)
    {
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80071d6:	f9bc 3048 	ldrsh.w	r3, [ip, #72]	@ 0x48
 80071da:	f8d0 4160 	ldr.w	r4, [r0, #352]	@ 0x160
    int16_t hSpeedBufferSizeUnit = (int16_t)(pHandle->SpeedBufferSizeUnit);
 80071de:	f890 e16c 	ldrb.w	lr, [r0, #364]	@ 0x16c
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 80071e2:	f9bc c0ce 	ldrsh.w	ip, [ip, #206]	@ 0xce
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80071e6:	ebae 0202 	sub.w	r2, lr, r2
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80071ea:	4423      	add	r3, r4
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 80071ec:	f8d0 4164 	ldr.w	r4, [r0, #356]	@ 0x164
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 80071f0:	b292      	uxth	r2, r2
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 80071f2:	44a4      	add	ip, r4
    if (0 == hBufferSizeDiff)
 80071f4:	b99a      	cbnz	r2, 800721e <STO_CR_CalcAvrgElSpeedDpp+0x56>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80071f6:	f9b0 1168 	ldrsh.w	r1, [r0, #360]	@ 0x168
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 80071fa:	f9b0 216a 	ldrsh.w	r2, [r0, #362]	@ 0x16a
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 80071fe:	1a5b      	subs	r3, r3, r1
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->OrigSpeedBufferOldestEl;
 8007200:	ebac 0202 	sub.w	r2, ip, r2
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->Orig_Speed_Buffer[hIndexOld];
    }

#ifndef FULL_MISRA_C_COMPLIANCY_STO_CORDIC
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wAvrSpeed_dpp = (int32_t)(wSum >> pHandle->SpeedBufferSizedppLOG);
 8007204:	f8b0 1180 	ldrh.w	r1, [r0, #384]	@ 0x180
    }
#endif

    pHandle->Orig_ElSpeedDpp = (int16_t)wAvrSpeed_dpp;

    pHandle->DppBufferSum = wSum;
 8007208:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160
    wAvrSpeed_dpp = (int32_t)(wSum >> pHandle->SpeedBufferSizedppLOG);
 800720c:	410b      	asrs	r3, r1
    wAvrSpeed_dpp = (int32_t)(wSumOrig >> pHandle->SpeedBufferSizedppLOG);
 800720e:	fa42 f101 	asr.w	r1, r2, r1
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8007212:	81c3      	strh	r3, [r0, #14]
    pHandle->Orig_ElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8007214:	f8a0 114e 	strh.w	r1, [r0, #334]	@ 0x14e

    pHandle->DppOrigBufferSum = wSumOrig;
 8007218:	f8c0 2164 	str.w	r2, [r0, #356]	@ 0x164
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  }
#endif
}
 800721c:	bd10      	pop	{r4, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800721e:	4411      	add	r1, r2
 8007220:	b20a      	sxth	r2, r1
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8007222:	4596      	cmp	lr, r2
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8007224:	b289      	uxth	r1, r1
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8007226:	bfdc      	itt	le
 8007228:	eba1 010e 	suble.w	r1, r1, lr
 800722c:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800722e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007232:	f9b2 1048 	ldrsh.w	r1, [r2, #72]	@ 0x48
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->Orig_Speed_Buffer[hIndexOld];
 8007236:	f9b2 20ce 	ldrsh.w	r2, [r2, #206]	@ 0xce
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800723a:	1a5b      	subs	r3, r3, r1
      wSumOrig = wSumOrig + pHandle->Orig_Speed_Buffer[hIndexNew] - pHandle->Orig_Speed_Buffer[hIndexOld];
 800723c:	ebac 0202 	sub.w	r2, ip, r2
 8007240:	e7e0      	b.n	8007204 <STO_CR_CalcAvrgElSpeedDpp+0x3c>
 8007242:	bf00      	nop

08007244 <STO_CR_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  return ((NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 8007244:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop

0800724c <STO_CR_GetObservedBemfLevel>:
#ifdef NULL_PTR_CHECK_STO_COR_SPD_POS_FDB
  return ((NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 800724c:	f8d0 0154 	ldr.w	r0, [r0, #340]	@ 0x154
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop

08007254 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007254:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007256:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007258:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800725a:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800725e:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8007260:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8007262:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8007264:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 8007266:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007268:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800726a:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop

08007270 <VSS_Init>:
{
 8007270:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8007272:	f7ff ffef 	bl	8007254 <VSS_Clear>
}
 8007276:	bd08      	pop	{r3, pc}

08007278 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007278:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 800727a:	8601      	strh	r1, [r0, #48]	@ 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800727c:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 8007280:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007282:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop

08007288 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8007288:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800728c:	b9a3      	cbnz	r3, 80072b8 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800728e:	8b43      	ldrh	r3, [r0, #26]
{
 8007290:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007292:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007294:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007298:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800729c:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80072a0:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 80072a2:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 80072a6:	b942      	cbnz	r2, 80072ba <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80072a8:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80072ac:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80072ae:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 80072b2:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80072b4:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80072b6:	bd10      	pop	{r4, pc}
 80072b8:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 80072ba:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 80072bc:	fb02 f303 	mul.w	r3, r2, r3
 80072c0:	4a0e      	ldr	r2, [pc, #56]	@ (80072fc <VSS_SetMecAcceleration+0x74>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 80072ca:	3301      	adds	r3, #1
 80072cc:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80072ce:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 80072d2:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 80072d4:	b91b      	cbnz	r3, 80072de <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80072d6:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80072d8:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80072da:	6242      	str	r2, [r0, #36]	@ 0x24
}
 80072dc:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80072de:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80072e2:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80072e6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80072ea:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80072ec:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80072f0:	fb0e f303 	mul.w	r3, lr, r3
 80072f4:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80072f6:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80072f8:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 80072fa:	e7ef      	b.n	80072dc <VSS_SetMecAcceleration+0x54>
 80072fc:	10624dd3 	.word	0x10624dd3

08007300 <memset>:
 8007300:	4402      	add	r2, r0
 8007302:	4603      	mov	r3, r0
 8007304:	4293      	cmp	r3, r2
 8007306:	d100      	bne.n	800730a <memset+0xa>
 8007308:	4770      	bx	lr
 800730a:	f803 1b01 	strb.w	r1, [r3], #1
 800730e:	e7f9      	b.n	8007304 <memset+0x4>

08007310 <__libc_init_array>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	4d0d      	ldr	r5, [pc, #52]	@ (8007348 <__libc_init_array+0x38>)
 8007314:	4c0d      	ldr	r4, [pc, #52]	@ (800734c <__libc_init_array+0x3c>)
 8007316:	1b64      	subs	r4, r4, r5
 8007318:	10a4      	asrs	r4, r4, #2
 800731a:	2600      	movs	r6, #0
 800731c:	42a6      	cmp	r6, r4
 800731e:	d109      	bne.n	8007334 <__libc_init_array+0x24>
 8007320:	4d0b      	ldr	r5, [pc, #44]	@ (8007350 <__libc_init_array+0x40>)
 8007322:	4c0c      	ldr	r4, [pc, #48]	@ (8007354 <__libc_init_array+0x44>)
 8007324:	f000 f826 	bl	8007374 <_init>
 8007328:	1b64      	subs	r4, r4, r5
 800732a:	10a4      	asrs	r4, r4, #2
 800732c:	2600      	movs	r6, #0
 800732e:	42a6      	cmp	r6, r4
 8007330:	d105      	bne.n	800733e <__libc_init_array+0x2e>
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	f855 3b04 	ldr.w	r3, [r5], #4
 8007338:	4798      	blx	r3
 800733a:	3601      	adds	r6, #1
 800733c:	e7ee      	b.n	800731c <__libc_init_array+0xc>
 800733e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007342:	4798      	blx	r3
 8007344:	3601      	adds	r6, #1
 8007346:	e7f2      	b.n	800732e <__libc_init_array+0x1e>
 8007348:	080077ac 	.word	0x080077ac
 800734c:	080077ac 	.word	0x080077ac
 8007350:	080077ac 	.word	0x080077ac
 8007354:	080077b0 	.word	0x080077b0

08007358 <memcpy>:
 8007358:	440a      	add	r2, r1
 800735a:	4291      	cmp	r1, r2
 800735c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007360:	d100      	bne.n	8007364 <memcpy+0xc>
 8007362:	4770      	bx	lr
 8007364:	b510      	push	{r4, lr}
 8007366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800736a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800736e:	4291      	cmp	r1, r2
 8007370:	d1f9      	bne.n	8007366 <memcpy+0xe>
 8007372:	bd10      	pop	{r4, pc}

08007374 <_init>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	bf00      	nop
 8007378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737a:	bc08      	pop	{r3}
 800737c:	469e      	mov	lr, r3
 800737e:	4770      	bx	lr

08007380 <_fini>:
 8007380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007382:	bf00      	nop
 8007384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007386:	bc08      	pop	{r3}
 8007388:	469e      	mov	lr, r3
 800738a:	4770      	bx	lr
