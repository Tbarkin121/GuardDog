# used to create the object
name: TorquePole

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym. 
env:
  numEnvs: ${resolve_default:512,${...num_envs}}
  envSpacing: 0.5
  resetDist: 3.0
  maxEffort: 0.15
  maxEpisodeLen: 1000

  clipObservations: 5.0
  clipActions: 1.0
  asset:
    assetRoot: "../../assets"
    assetFileName: "urdf/TorquePole/urdf/TorquePole.urdf"

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.01 # 1/100 s
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 0
    contact_offset: 0.02
    rest_offset: 0.001
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 2.0
    max_gpu_contact_pairs: 1048576 # 1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)

# None of this randomizer stuff seems to work
# Like... It will color the stls if i turn it randomize to true and torquepole is in the actor_params
# but if i set color: False it doesn't respect that, and friction values appear to not change ever... 
task:
  randomize: False
  randomization_params:
    frequency: 10   # Define how many environment steps between generating new randomizations
    # observations:
    #   range: [0, .002] # range for the white noise
    #   operation: "additive"
    #   distribution: "gaussian"
    # actions:
    #   range: [0., .02]
    #   operation: "additive"
    #   distribution: "gaussian"
    # sim_params: 
    #   gravity:
    #     range: [0, 0.4]
    #     operation: "additive"
    #     distribution: "gaussian"
    #     schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
    #     schedule_steps: 3000
    actor_params:
      torquepole:
        # color: False
        dof_properties:
          friction: 
            range: [0.0, 1.0]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 500
          