# used to create the object
name: BipedWalker

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym. 
env:
  numEnvs: ${resolve_default:512,${...num_envs}}
  envSpacing: 5.0
  resetDist: 3.0
  maxEpisodeLen: 20

  clipObservations: 5.0
  clipActions: 1.0

  plane:
    staticFriction: 1.0  # [-]
    dynamicFriction: 1.0  # [-]
    restitution: 0.        # [-]

  baseInitState:
    pos: [0.0, 0.0, 0.4] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]

  asset:
    assetRoot: "../../assets"
    assetFileName: "urdf/Biped_SphereFoot/urdf/Biped_SphereFoot.urdf"

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

  randomCommandVelocityRanges:
    linear_x: [-2., 2.]   # min max [m/s]
    linear_y: [-0.5, 0.5] # min max [m/s]
    yaw: [-0.5, 0.5]          # min max [rad/s]

  control:
    # PD Drive parameters:
    stiffness: 0.0  # [N*m/rad]
    damping: 0.0     # [N*m*s/rad]
    maxEffort: 3.0 # [N*m]
    maxVelocity: 50.0 #[rad/s]
    friction: 0.03
    controlFrequencyInv: 1 # 60 Hz

  defaultJointAngles:  # = target angles when action = 0.0
    R_J1: 0.0    # [rad]
    L_J1: 0.0    # [rad]
    R_J2: -1.0     # [rad]
    L_J2: 1.0    # [rad]
    R_J3: 1.5    # [rad]
    L_J3: -1.5     # [rad] 
    WheelX: 0.0
    WheelY: 0.0
    
  learn:
    # rewards
    linearVelocityXYRewardScale: 1.0
    linearVelocityZRewardScale: -4.0
    angularVelocityXYRewardScale: -0.05
    angularVelocityZRewardScale: 0.5
    orientationRewardScale: -0. #-1.
    torqueRewardScale: -0.000025 
    jointAccRewardScale: -0.0005 # -0.0025
    toeForceRewardScale: -0.0
    jointSpeedRewardScale: -0.001
    actionRateRewardScale: -0.01
    kneeCollisionRewardScale: -0.25 

    # normalization
    linearVelocityScale: 2.0
    angularVelocityScale: 0.25
    dofPositionScale: 1.0
    dofVelocityScale: 0.05

    # episode length in seconds
    episodeLength_s: 10

  # viewer cam:
  viewer:
    refEnv: 0
    pos: [0, 0, 4]  # [m]
    lookat: [1., 1, 3.3]  # [m]

sim:
  dt: 0.01 # 1/100 s
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 2
    num_velocity_iterations: 0
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 5.0
    # max_gpu_contact_pairs: 1048576 # 1024*1024
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)

# None of this randomizer stuff seems to work
# Like... It will color the stls if i turn it randomize to true and torquepole is in the actor_params
# but if i set color: False it doesn't respect that, and friction values appear to not change ever... 
task:
  randomize: False
  randomization_params:
    frequency: 10   # Define how many environment steps between generating new randomizations
    # observations:
    #   range: [0, .002] # range for the white noise
    #   operation: "additive"
    #   distribution: "gaussian"
    # actions:
    #   range: [0., .02]
    #   operation: "additive"
    #   distribution: "gaussian"
    # sim_params: 
    #   gravity:
    #     range: [0, 0.4]
    #     operation: "additive"
    #     distribution: "gaussian"
    #     schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
    #     schedule_steps: 3000
    actor_params:
      bipedwalker:
        # color: False
        dof_properties:
          friction: 
            range: [0.0, 1.0]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 500
          