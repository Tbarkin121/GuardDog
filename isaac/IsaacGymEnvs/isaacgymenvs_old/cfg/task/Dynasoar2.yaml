# used to create the object
name: Dynasoar

physics_engine: ${..physics_engine}

env:
  numEnvs: ${resolve_default:32768,${...num_envs}}
  num_envs: 32768
  horizon: 20
  numObservations: 13
  numActions: 4
  gamma: 0.99
  minibatch_steps: 2
  minibatch_size: 16384
  envSpacing: 1.  # [m]

  clipObservations: 5.0
  clipActions: 1.0

  debug_flags:
    plots_enable: True
    logging: True
    log_name: "SpeedTest_HDGRew"
    log_envs: [0]
    pos_xy_hold: False
    pos_z_hold: False
    quat_hold: False
    linvel_hold: False
    angvel_hold: False
    cam_follow: True
    cam_target: 0
    joystick: True
    joystick_quat: False
    control_en: False
    print: False
    mode: 0 # Loads a default set of debug parameters.

  plane:
    staticFriction: 1.0  # [-]    linearVelocityScale: 2.0
    angularVelocityScale: 0.25
    dofPositionScale: 1.0
    dofVelocityScale: 0.05


    dynamicFriction: 1.0  # [-]
    restitution: 0.        # [-]

  glider:
    urdf_path: "urdf/Glider_S/urdf/Glider_S.urdf"
    mass: 1.0
    ixx: 0.1913
    iyy: 0.1020
    izz: 0.2905
    ixz: 0.0071
    Cd0: 0.01
    front_area: 1.0e-2
    
    station_pts: 20
    eps: 0.001
    cla: 6.5
    rho: 1.2
    wind_speed: 10.0
    wind_angle: 0.0
    wind_thickness: 10.0
    wind_randomize: False
    wind_speed_min: 5.0
    wind_speed_max: 10.0

    battery:
      update: True
      capacity: 1000
      initial_charge: 0.5

    thruster:
      update: True

    wings:
      count: 4
      offsets: [ [0.010, -0.5, 0.0],
                 [0.010, 0.5, 0.0],
                 [0.6, -0.1, 0.1],
                 [0.6, 0.1, 0.1] ]
                
      headings: [ [0.0, 2.0],
                  [0.0, 2.0],
                  [-45.0, -1.0],
                  [45.0, -1.0] ]

      #Left to Right in wing space
      chords: [ [0.125, 0.15],
                [0.15, 0.125],
                [0.05, 0.05],
                [0.05, 0.05] ]

      pos: [ [-0.5, 0.5],
             [-0.5, 0.5],
             [-0.0707, 0.0707],
             [-0.0707, 0.0707] ]

  goal: 
    urdf_path: "urdf/GoalPin/urdf/GoalPin.urdf"
    target_range: [-500.0, 500.0]
    target_radius: 25
    use_goal_list: False
    goal_list: [[-501.0, -1.0], #Up / Down Wind
                [-1.0, -1.0]]

    # goal_list: [[-1.0, -501.0], #Cross Wind
    #             [-1.0, -1.0]]


  randomRanges:
    roll: [-60.0, 60.0]
    pitch: [-15.0, 15.0]
    yaw: [-180.0, 180.0]
    vinf: [10.0, 20.0]
    height: [1.0, 5.0]
    # roll: [0.0, 0.0]
    # pitch: [0.0, 0.0]
    # yaw: [0.0, 0.0]
    # vinf: [15.0, 15.0]
    # height: [2.0, 2.0]
    


  baseInitState:
    pos: [0.0, 0.0, 0.0] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]

  # normalization
  obs_scales:
    height: 0.01
    air_speed: 0.01
    ground_speed: 0.01

  control:
    actionScale_main: 0.3 #10   Deg Max Angle of Attack
    actionScale_tail: 0.174533
    controlFrequencyInv: 4 # 

  urdfAsset:
    collapseFixedJoints: True
    fixBaseLink: False

  learn:
    # rewards
    headingRewardScale: 0.1
    energyRewardScale: 1.0

    # episode length in seconds
    # episodeLength_s: 30
    # episodeLength_s: 60
    # episodeLength_s: 240
    episodeLength_s: 600

  # viewer cam:
  viewer:
    refEnv: 0
    # pos: [0, 0, 4]  # [m]
    pos: [3, -12., 2]  # [m]
    lookat: [0., 0., 0.]  # [m]

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.02
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 100.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  randomize: False
  randomization_params:
    frequency: 600   # Define how many environment steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [0., .02]
      operation: "additive"
      distribution: "gaussian"
    sim_params: 
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      anymal:
        color: True
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [0., 0.7]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
